<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-13T07:28:32+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[TableView] 7. UITableViewCell 확장을 통해 셀 식별자 코드 재사용</title><link href="http://localhost:4000/UIKit-tableView7/" rel="alternate" type="text/html" title="[TableView] 7. UITableViewCell 확장을 통해 셀 식별자 코드 재사용" /><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView7</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView7/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="코드-재사용">코드 재사용</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
<span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
<span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
    <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>

    <span class="c1">// [guard let] 방식</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"StoryBoardCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>

    <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>

    <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>

    <span class="c1">/// 셀의 서브 타이틀 설정</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>

    <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<p>지금까지 재사용되는 셀은 고유한 식별자를 상수로 넣어주는데 보통 클래스 명을 써주었다. <br />
프로그래밍 하면서 상수가 있는 부분은 최대한 피하는게 좋다. 이유는 상수를 재사용할 수도 있고 오타가 발생할 수 있기 때문이다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 변수로</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"StoryboardCell"</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그래서 셀에서 static으로 상수로 추가해둔다. 이 방법도 충분하지만 조금 더 편하게 할 수 있다.<br />
UITableviewCell 자체가 전부 reuseIdentifier라는 static변수를 가질 수 있게 하면 더 편리해질 수 있다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>참고로 확장에서는 저장 속성을 정의할 수 없음으로 계산 속성으로 변경해준다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UICollectionView</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 이 방식도 UItableView, UICollectionVIew각각마다 만들어줘야하는 불편함이 있다.  반복을 더 줄일 수 있다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ReuseIdentifiable 채택</span>
<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="p">,</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>프로토콜을 활용해서 해결하자. 프로토콜 이름은 아래 컨벤션을 따르면 좋다.<br />
https://www.swift.org/documentation/api-design-guidelines/<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이를 활용하면 Nib파일을 등록할때도 적용할 수 있다. NibCell을 상수로 사용하지 않고 프로토로 해결해보자.<br />
<br /></p>

<h2 id="최종-코드">최종 코드</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">protocol</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">),</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UITableViewCell</span><span class="p">:</span> <span class="kt">Nibbed</span><span class="p">,</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{}</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="c1">// let cellNib = UINib(nibName: "NibCell", bundle: nil)</span>
        
        <span class="c1">// self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell")</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[코드 재사용 /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } 지금까지 재사용되는 셀은 고유한 식별자를 상수로 넣어주는데 보통 클래스 명을 써주었다. 프로그래밍 하면서 상수가 있는 부분은 최대한 피하는게 좋다. 이유는 상수를 재사용할 수도 있고 오타가 발생할 수 있기 때문이다. class StoryboardCell: UITableViewCell { // 변수로 static let reuseIdentifier: String = "StoryboardCell" @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } 그래서 셀에서 static으로 상수로 추가해둔다. 이 방법도 충분하지만 조금 더 편하게 할 수 있다. UITableviewCell 자체가 전부 reuseIdentifier라는 static변수를 가질 수 있게 하면 더 편리해질 수 있다. extension UITableViewCell { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } 참고로 확장에서는 저장 속성을 정의할 수 없음으로 계산 속성으로 변경해준다. extension UITableViewCell { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } extension UICollectionView { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } 하지만 이 방식도 UItableView, UICollectionVIew각각마다 만들어줘야하는 불편함이 있다. 반복을 더 줄일 수 있다. protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } // ReuseIdentifiable 채택 class StoryboardCell: UITableViewCell, ReuseIdentifiable { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } 프로토콜을 활용해서 해결하자. 프로토콜 이름은 아래 컨벤션을 따르면 좋다. https://www.swift.org/documentation/api-design-guidelines/ class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } 이를 활용하면 Nib파일을 등록할때도 적용할 수 있다. NibCell을 상수로 사용하지 않고 프로토로 해결해보자. 최종 코드 import UIKit protocol Nibbed { static var uinib: UINib { get } } extension Nibbed { static var uinib: UINib { return UINib(nibName: String(describing: Self.self), bundle: nil) } } protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } extension UITableViewCell: Nibbed, ReuseIdentifiable {} class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. // let cellNib = UINib(nibName: "NibCell", bundle: nil) // self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) self.myTableView.dataSource = self self.myTableView.delegate = self } }]]></summary></entry><entry><title type="html">[TableView] 6. Cell Configuration</title><link href="http://localhost:4000/UIKit-tableView6/" rel="alternate" type="text/html" title="[TableView] 6. Cell Configuration" /><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView6</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView6/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="cell-configuration-알아보기">Cell Configuration 알아보기</h2>

<p>Cell Configuration은 iOS 14+부터 도입된 기능으로, 셀의 UI 구성과 데이터 설정을 <strong>보다 선언적으로 처리</strong>할 수 있도록 도와준다.</p>

<p>기존에는 셀마다 <code class="language-plaintext highlighter-rouge">IBOutlet</code>을 연결하거나, <code class="language-plaintext highlighter-rouge">cell.textLabel.text = ...</code> 방식으로 직접 설정했지만,  <br />
Cell Configuration은 UI와 데이터를 분리하고 <strong>설정 구조체를 통해 셀 내부 뷰를 생성 및 업데이트</strong>하는 구조다.</p>

<hr />
<h3 id="화면-구성-예시">화면 구성 예시</h3>

<p><img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160118427.png" alt="셀1" width="80%" /></p>

<ul>
  <li>테이블뷰를 스토리보드에서 추가하고, 상하좌우 제약을 0으로 설정한다</li>
</ul>

<div style="display: flex; justify-content: center; gap: 20px;">
  <img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160616153.png" alt="셀1" width="80%" />
  <img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160715945.png" alt="셀2" width="80%" />
</div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Storyboard ID</code>는 <code class="language-plaintext highlighter-rouge">CellConfigurationListViewController</code>로 지정</li>
  <li><code class="language-plaintext highlighter-rouge">Reference ID</code>도 동일하게 맞춰야 코드에서 호출 가능</li>
</ul>

<hr />

<h2 id="구성">구성</h2>

<p><code class="language-plaintext highlighter-rouge">Cell Configuration</code>을 구성하는 핵심 요소는 다음과 같다:</p>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIContentConfiguration</code></td>
      <td>데이터 설정을 위한 구조체 역할 (예: <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIContentView</code></td>
      <td>실제 UI를 그리는 뷰 (예: <code class="language-plaintext highlighter-rouge">CellConfigurationView</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UITableViewCell</code></td>
      <td>시스템이 자동으로 <code class="language-plaintext highlighter-rouge">UIContentView</code>를 삽입해주는 셀 컨테이너 (<code class="language-plaintext highlighter-rouge">CellConfigTableViewCell</code>)</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="1-mycellconfigurationswift">1. MyCellConfiguration.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">MyCellConfiguration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>

    <span class="kd">func</span> <span class="nf">makeContentView</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">UIView</span> <span class="o">&amp;</span> <span class="kt">UIContentView</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">updated</span><span class="p">(</span><span class="k">for</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UIConfigurationState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">updated</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">state</span> <span class="o">=</span> <span class="n">state</span> <span class="k">as?</span> <span class="kt">UICellConfigurationState</span><span class="p">,</span> <span class="n">state</span><span class="o">.</span><span class="n">isSelected</span> <span class="p">{</span>
            <span class="n">updated</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"선택됨: "</span> <span class="o">+</span> <span class="n">updated</span><span class="o">.</span><span class="n">title</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">updated</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>데이터(title, body)를 담고 있고, 상태(state)에 따라 동적으로 내용도 바꿀 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">makeContentView()</code>를 통해 실제 UIContentView (<code class="language-plaintext highlighter-rouge">CellConfigurationView</code>) 생성</li>
</ul>

<hr />

<h3 id="2-cellconfigurationviewswift">2. CellConfigurationView.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CellConfigurationView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">UIContentView</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">customConfiguration</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="n">newValue</span> <span class="k">as?</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
                <span class="nf">applyConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">configureUI</span><span class="p">()</span>
        <span class="nf">applyConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyConfig</span><span class="p">(</span><span class="n">_</span> <span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customConfiguration</span> <span class="o">=</span> <span class="n">config</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">title</span>
        <span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UIView</code>이자 <code class="language-plaintext highlighter-rouge">UIContentView</code>를 채택</li>
  <li>외부에서 전달받은 <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>을 적용해서 <code class="language-plaintext highlighter-rouge">UILabel</code>에 반영</li>
  <li>내부적으로 <code class="language-plaintext highlighter-rouge">titleLabel</code>, <code class="language-plaintext highlighter-rouge">bodyLabel</code>을 AutoLayout으로 배치</li>
</ul>

<hr />

<h3 id="3-cellconfigtableviewcellswift">3. CellConfigTableViewCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CellConfigTableViewCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span> <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span> <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">updateConfiguration</span><span class="p">(</span><span class="n">using</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UICellConfigurationState</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">MyCellConfiguration</span><span class="p">()</span><span class="o">.</span><span class="nf">updated</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        <span class="n">config</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">config</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentConfiguration</span> <span class="o">=</span> <span class="n">config</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">setNeedsUpdateConfiguration()</code> 호출 시 시스템이 <code class="language-plaintext highlighter-rouge">updateConfiguration(using:)</code>을 호출</li>
  <li><code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">body</code>를 가지고 <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>을 만든 뒤 <code class="language-plaintext highlighter-rouge">contentConfiguration</code>에 설정</li>
  <li>시스템은 이 설정을 보고 자동으로 <code class="language-plaintext highlighter-rouge">CellConfigurationView</code>를 생성 및 삽입</li>
</ul>

<hr />

<h3 id="4-cellconfigurationlistviewcontrollerswift">4. CellConfigurationListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">cellData</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>더미 데이터를 불러와 <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">body</code>만 할당하면 자동으로 UI가 구성된다</li>
  <li>직접적으로 <code class="language-plaintext highlighter-rouge">UILabel</code>에 접근하거나 <code class="language-plaintext highlighter-rouge">cell.subviews</code>를 조작하지 않아도 된다</li>
</ul>

<hr />

<h2 id="전체-예제-코드">전체 예제 코드</h2>

<h3 id="1-mycellconfigurationswift-1">1. MyCellConfiguration.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 커스텀 셀에 대한 설정</span>
<span class="kd">struct</span> <span class="kt">MyCellConfiguration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    
    <span class="c1">// 보여줄 화면</span>
    <span class="c1">// UIView이면서 UIContentView인 애를 반화내라</span>
    <span class="kd">func</span> <span class="nf">makeContentView</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kd">any</span> <span class="kt">UIView</span> <span class="o">&amp;</span> <span class="kt">UIContentView</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
    
    
    <span class="c1">/// 셀 상태가 변경되면 발동</span>
    <span class="c1">/// - Parameter state: 셀 상태</span>
    <span class="c1">/// - Returns: 셀 설정 자체</span>
    <span class="kd">func</span> <span class="nf">updated</span><span class="p">(</span><span class="k">for</span> <span class="nv">state</span><span class="p">:</span> <span class="kd">any</span> <span class="kt">UIConfigurationState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">state</span> <span class="o">=</span> <span class="n">state</span> <span class="k">as?</span> <span class="kt">UICellConfigurationState</span> <span class="p">{</span>
            <span class="k">var</span> <span class="nv">updatedConfig</span> <span class="o">=</span> <span class="k">self</span>
            
            <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">isSelected</span> <span class="p">{</span>
                <span class="n">updatedConfig</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"선택됨: "</span> <span class="o">+</span> <span class="n">updatedConfig</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">updatedConfig</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-cellconfigurationviewswift-1">2. CellConfigurationView.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 뷰 안에 컨텐츠 Config를 가지고 있는 뷰</span>
<span class="kd">class</span> <span class="kt">CellConfigurationView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">UIContentView</span> <span class="p">{</span>
    
    <span class="c1">// 여러 데이터를 가진 덩어리</span>
    <span class="kd">fileprivate</span> <span class="k">var</span> <span class="nv">customConfiguration</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="o">!</span>
    
    <span class="c1">// 데이터와 UI를 연결</span>
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">_</span> <span class="nv">newConfiguration</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customConfiguration</span> <span class="o">=</span> <span class="n">newConfiguration</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newConfiguration</span><span class="o">.</span><span class="n">title</span>
        <span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newConfiguration</span><span class="o">.</span><span class="n">body</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">customConfiguration</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">newConfiguration</span> <span class="o">=</span> <span class="n">newValue</span> <span class="k">as?</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
                <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">newConfiguration</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
   
    <span class="nf">init</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">configureUI</span><span class="p">()</span>
        <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemBlue</span>
        
        <span class="c1">// 타이틀 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
        
        <span class="c1">// 바디 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">bodyLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CellConfigurationView_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"오늘도 코딩"</span><span class="p">,</span> <span class="nv">body</span><span class="p">:</span> <span class="s">"바디부분"</span><span class="p">))</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<h3 id="3-cellconfigtableviewcellswift-1">3. CellConfigTableViewCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 기존 테이블뷰 셀은 데이터만 신경쓰면 됨</span>
<span class="kd">class</span> <span class="kt">CellConfigTableViewCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 데이터 변경시 UI 변경해라</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">updateConfiguration</span><span class="p">(</span><span class="n">using</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UICellConfigurationState</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">updateConfiguration</span><span class="p">(</span><span class="nv">using</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        
        <span class="k">var</span> <span class="nv">contentConfig</span> <span class="o">=</span> <span class="kt">MyCellConfiguration</span><span class="p">()</span><span class="o">.</span><span class="nf">updated</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        <span class="n">contentConfig</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">contentConfig</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentConfiguration</span> <span class="o">=</span> <span class="n">contentConfig</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CellConfigTableViewCell_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CodeCell</span><span class="p">()</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<h3 id="4-cellconfigurationlistviewcontrollerswift-1">4. CellConfigurationListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="c1">// cell.titleLabel.text = cellData.title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="c1">// cell.bodyLabel.text = cellData.body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        
        <span class="c1">// 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[Cell Configuration 알아보기 Cell Configuration은 iOS 14+부터 도입된 기능으로, 셀의 UI 구성과 데이터 설정을 보다 선언적으로 처리할 수 있도록 도와준다. 기존에는 셀마다 IBOutlet을 연결하거나, cell.textLabel.text = ... 방식으로 직접 설정했지만, Cell Configuration은 UI와 데이터를 분리하고 설정 구조체를 통해 셀 내부 뷰를 생성 및 업데이트하는 구조다. 화면 구성 예시 테이블뷰를 스토리보드에서 추가하고, 상하좌우 제약을 0으로 설정한다 Storyboard ID는 CellConfigurationListViewController로 지정 Reference ID도 동일하게 맞춰야 코드에서 호출 가능 구성 Cell Configuration을 구성하는 핵심 요소는 다음과 같다: 요소 설명 UIContentConfiguration 데이터 설정을 위한 구조체 역할 (예: MyCellConfiguration) UIContentView 실제 UI를 그리는 뷰 (예: CellConfigurationView) UITableViewCell 시스템이 자동으로 UIContentView를 삽입해주는 셀 컨테이너 (CellConfigTableViewCell) 1. MyCellConfiguration.swift struct MyCellConfiguration: UIContentConfiguration, Hashable { var title: String = "" var body: String = "" func makeContentView() -&gt; UIView &amp; UIContentView { return CellConfigurationView(config: self) } func updated(for state: UIConfigurationState) -&gt; MyCellConfiguration { var updated = self if let state = state as? UICellConfigurationState, state.isSelected { updated.title = "선택됨: " + updated.title } return updated } } 데이터(title, body)를 담고 있고, 상태(state)에 따라 동적으로 내용도 바꿀 수 있다. makeContentView()를 통해 실제 UIContentView (CellConfigurationView) 생성 2. CellConfigurationView.swift class CellConfigurationView: UIView, UIContentView { var configuration: UIContentConfiguration { get { customConfiguration } set { if let config = newValue as? MyCellConfiguration { applyConfig(config) } } } init(config: MyCellConfiguration) { super.init(frame: .zero) configureUI() applyConfig(config) } fileprivate func applyConfig(_ config: MyCellConfiguration) { self.customConfiguration = config titleLabel.text = config.title bodyLabel.text = config.body } } UIView이자 UIContentView를 채택 외부에서 전달받은 MyCellConfiguration을 적용해서 UILabel에 반영 내부적으로 titleLabel, bodyLabel을 AutoLayout으로 배치 3. CellConfigTableViewCell.swift class CellConfigTableViewCell: UITableViewCell { var title: String = "" { didSet { setNeedsUpdateConfiguration() } } var body: String = "" { didSet { setNeedsUpdateConfiguration() } } override func updateConfiguration(using state: UICellConfigurationState) { var config = MyCellConfiguration().updated(for: state) config.title = title config.body = body self.contentConfiguration = config } } setNeedsUpdateConfiguration() 호출 시 시스템이 updateConfiguration(using:)을 호출 title, body를 가지고 MyCellConfiguration을 만든 뒤 contentConfiguration에 설정 시스템은 이 설정을 보고 자동으로 CellConfigurationView를 생성 및 삽입 4. CellConfigurationListViewController.swift func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let cellData = dummySections[indexPath.section].rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } 더미 데이터를 불러와 title, body만 할당하면 자동으로 UI가 구성된다 직접적으로 UILabel에 접근하거나 cell.subviews를 조작하지 않아도 된다 전체 예제 코드 1. MyCellConfiguration.swift import UIKit // 커스텀 셀에 대한 설정 struct MyCellConfiguration: UIContentConfiguration, Hashable { var title: String = "" var body: String = "" // 보여줄 화면 // UIView이면서 UIContentView인 애를 반화내라 func makeContentView() -&gt; any UIView &amp; UIContentView { return CellConfigurationView(config: self) } /// 셀 상태가 변경되면 발동 /// - Parameter state: 셀 상태 /// - Returns: 셀 설정 자체 func updated(for state: any UIConfigurationState) -&gt; MyCellConfiguration { if let state = state as? UICellConfigurationState { var updatedConfig = self if state.isSelected { updatedConfig.title = "선택됨: " + updatedConfig.title } return updatedConfig } return self } } 2. CellConfigurationView.swift import UIKit // 뷰 안에 컨텐츠 Config를 가지고 있는 뷰 class CellConfigurationView: UIView, UIContentView { // 여러 데이터를 가진 덩어리 fileprivate var customConfiguration: MyCellConfiguration! // 데이터와 UI를 연결 fileprivate func applyConfigAndChangeUI(_ newConfiguration: MyCellConfiguration) { self.customConfiguration = newConfiguration titleLabel.text = newConfiguration.title bodyLabel.text = newConfiguration.body } var configuration: UIContentConfiguration { get { customConfiguration } set { if let newConfiguration = newValue as? MyCellConfiguration { applyConfigAndChangeUI(newConfiguration) } } } init(config: MyCellConfiguration) { super.init(frame: .zero) configureUI() applyConfigAndChangeUI(config) } lazy var titleLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨" label.numberOfLines = 1 label.textColor = .white label.font = UIFont.systemFont(ofSize: 14, weight: .bold) return label }() lazy var bodyLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨" label.numberOfLines = 0 label.textColor = .white label.font = UIFont.systemFont(ofSize: 12, weight: .regular) return label }() fileprivate func configureUI() { self.backgroundColor = .systemBlue // 타이틀 라벨 설정 self.addSubview(self.titleLabel) NSLayoutConstraint.activate([ titleLabel.topAnchor.constraint(equalTo: self.topAnchor, constant: 10), titleLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 10), titleLabel.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -10), ]) // 바디 라벨 설정 self.addSubview(self.bodyLabel) NSLayoutConstraint.activate([ bodyLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: 10), bodyLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 10), bodyLabel.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -10), bodyLabel.bottomAnchor.constraint(equalTo: self.bottomAnchor, constant: -10) ]) } required init?(coder: NSCoder) { super.init(coder: coder) } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI struct CellConfigurationView_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CellConfigurationView(config: MyCellConfiguration(title: "오늘도 코딩", body: "바디부분")).getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif 3. CellConfigTableViewCell.swift import UIKit // 기존 테이블뷰 셀은 데이터만 신경쓰면 됨 class CellConfigTableViewCell: UITableViewCell { // 데이터 변경시 UI 변경해라 var title: String = "" { didSet { setNeedsUpdateConfiguration() } } var body: String = "" { didSet { setNeedsUpdateConfiguration() } } override func updateConfiguration(using state: UICellConfigurationState) { super.updateConfiguration(using: state) var contentConfig = MyCellConfiguration().updated(for: state) contentConfig.title = title contentConfig.body = body self.contentConfiguration = contentConfig } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI struct CellConfigTableViewCell_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CodeCell().getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif 4. CellConfigurationListViewController.swift import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CellConfigurationListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 // cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 // cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 // 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근 cell.title = cellData.title cell.body = cellData.body return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 5. 코드기반 커스텀 테이블뷰 구현하기</title><link href="http://localhost:4000/UIKit-tableView5/" rel="alternate" type="text/html" title="[TableView] 5. 코드기반 커스텀 테이블뷰 구현하기" /><published>2025-05-11T00:00:00+00:00</published><updated>2025-05-11T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView5</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView5/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="코드기반-커스텀-테이블뷰-구현하기">코드기반 커스텀 테이블뷰 구현하기</h2>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509020704480.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511173004744.png" alt="커스텀셀" width="85%" /></td>
      <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView5/image-20250511181826302.png" alt="커스텀셀" width="85%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Storyboard 커스텀 셀</td>
    <td style="text-align:center;">Nib 커스텀 셀</td>
      <td style="text-align:center;">Code 커스텀 셀</td>
  </tr>
</table>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView5/image-20250511174809378.png" alt="커스텀셀" width="30%" /> <br />
CodeList.xiv파일로 와서 테이블뷰를 드래그해서 추가 후 제약조건을 상하좌우 전부 0으로 해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView5/image-20250511175003817.png" alt="커스텀셀" width="70%" /> <br />
myTableView를 ViewController로 드래그해서 IBOutlet 추가한다. 이떄 추가가안되면 xib파일의 viewController가 연결되있는지 확인한다.<br />
<br /></p>

<h3 id="codecellswift">CodeCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CodeCell.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/11/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CodeCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
        
        <span class="c1">// 타이틀 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
        
        <span class="c1">// 바디 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">bodyLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="c1">// 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다.</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">CellStyle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="n">reuseIdentifier</span><span class="p">)</span> <span class="c1">/// 부모의 로직을 싱행시키는 의미</span>
        <span class="nf">configureUI</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>



<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">extension</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">struct</span> <span class="kt">ViewRepresentable</span><span class="p">:</span> <span class="kt">UIViewRepresentable</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">uiView</span><span class="p">:</span> <span class="kt">UIView</span>
        <span class="kd">func</span> <span class="nf">updateUIView</span><span class="p">(</span><span class="n">_</span> <span class="nv">uiView</span><span class="p">:</span> <span class="kt">UIViewType</span><span class="p">,</span> <span class="nv">context</span><span class="p">:</span> <span class="kt">Context</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">}</span>
        <span class="kd">func</span> <span class="nf">makeUIView</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="kt">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">UIView</span> <span class="p">{</span>
            <span class="n">uiView</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">getPreview</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">ViewRepresentable</span><span class="p">(</span><span class="nv">uiView</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CodeCell_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CodeCell</span><span class="p">()</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>

</code></pre></div></div>

<h3 id="codelistviewcontroller">CodeListViewController</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CodeListViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CodeListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CodeListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CodeListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="참고-테이블뷰도-완전-코드베이스로-하는법">참고: 테이블뷰도 완전 코드베이스로 하는법</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  MainViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MainViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"MainViewController loaded"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">codeButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"눌림"</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationController</span><span class="p">?</span><span class="o">.</span><span class="nf">pushViewController</span><span class="p">(</span><span class="n">vc</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  OnlyCodeBaseViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/11/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">tableView</span> <span class="o">=</span> <span class="kt">UITableView</span><span class="p">()</span>
        <span class="n">tableView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">return</span> <span class="n">tableView</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupTableView</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">myTableView</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">)</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="nf">setupTableView</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[코드기반 커스텀 테이블뷰 구현하기 Storyboard 커스텀 셀 Nib 커스텀 셀 Code 커스텀 셀 CodeList.xiv파일로 와서 테이블뷰를 드래그해서 추가 후 제약조건을 상하좌우 전부 0으로 해준다. myTableView를 ViewController로 드래그해서 IBOutlet 추가한다. 이떄 추가가안되면 xib파일의 viewController가 연결되있는지 확인한다. CodeCell.swift // // CodeCell.swift // UITableViewTutorial // // Created by 김동현 on 5/11/25. // import UIKit class CodeCell: UITableViewCell { lazy var titleLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨" label.numberOfLines = 1 label.font = UIFont.systemFont(ofSize: 14, weight: .bold) return label }() lazy var bodyLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨" label.numberOfLines = 0 label.font = UIFont.systemFont(ofSize: 12, weight: .regular) return label }() fileprivate func configureUI() { self.backgroundColor = .systemYellow // 타이틀 라벨 설정 self.contentView.addSubview(self.titleLabel) NSLayoutConstraint.activate([ titleLabel.topAnchor.constraint(equalTo: self.contentView.topAnchor, constant: 10), titleLabel.leadingAnchor.constraint(equalTo: self.contentView.leadingAnchor, constant: 10), titleLabel.trailingAnchor.constraint(equalTo: self.contentView.trailingAnchor, constant: -10), ]) // 바디 라벨 설정 self.contentView.addSubview(self.bodyLabel) NSLayoutConstraint.activate([ bodyLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: 10), bodyLabel.leadingAnchor.constraint(equalTo: self.contentView.leadingAnchor, constant: 10), bodyLabel.trailingAnchor.constraint(equalTo: self.contentView.trailingAnchor, constant: -10), bodyLabel.bottomAnchor.constraint(equalTo: self.contentView.bottomAnchor, constant: -10) ]) } // 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다. override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) { super.init(style: style, reuseIdentifier: reuseIdentifier) /// 부모의 로직을 싱행시키는 의미 configureUI() } required init?(coder: NSCoder) { super.init(coder: coder) } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI extension UIView { private struct ViewRepresentable: UIViewRepresentable { let uiView: UIView func updateUIView(_ uiView: UIViewType, context: Context) { } func makeUIView(context: Context) -&gt; some UIView { uiView } } func getPreview() -&gt; some View { ViewRepresentable(uiView: self) } } #endif #if DEBUG import SwiftUI struct CodeCell_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CodeCell().getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif CodeListViewController // // CodeListViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class CodeListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CodeCell.self, forCellReuseIdentifier: "CodeCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CodeListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CodeCell", for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CodeListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 참고: 테이블뷰도 완전 코드베이스로 하는법 // // MainViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class MainViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() print("MainViewController loaded") } @IBAction func codeButtonTapped(_ sender: UIButton) { print("눌림") let vc = OnlyCodeBaseViewController() self.navigationController?.pushViewController(vc, animated: true) } } // // OnlyCodeBaseViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/11/25. // import UIKit class OnlyCodeBaseViewController: UIViewController { private let myTableView: UITableView = { let tableView = UITableView() tableView.translatesAutoresizingMaskIntoConstraints = false return tableView }() private func setupTableView() { view.addSubview(myTableView) NSLayoutConstraint.activate([ myTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), myTableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor), myTableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor), myTableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor) ]) } private func configureTableView() { myTableView.register(CodeCell.self, forCellReuseIdentifier: "CodeCell") myTableView.dataSource = self myTableView.delegate = self } var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .white setupTableView() configureTableView() } } /// UITableView의 데이터 관리 역할을 담당 extension OnlyCodeBaseViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CodeCell", for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension OnlyCodeBaseViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 4. Nib으로 커스텀 테이블뷰 구현하기</title><link href="http://localhost:4000/UIKit-tableView4/" rel="alternate" type="text/html" title="[TableView] 4. Nib으로 커스텀 테이블뷰 구현하기" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView4</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView4/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="nib으로-커스텀-테이블뷰-구현하기">Nib으로 커스텀 테이블뷰 구현하기</h2>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509020704480.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511173004744.png" alt="커스텀셀" width="85%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Storyboard 커스텀 셀</td>
    <td style="text-align:center;">Nib 커스텀 셀</td>
  </tr>
</table>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511162051512.png" alt="커스텀셀" width="70%" /></p>

<p>파일만들기 -&gt; Cocoa Toucn -&gt; Nib파일이름, 체크박스 체크로 2개의 파일을 만든다. 그러면 Nib파일과, Swift파일이 생성된다.<br />
<br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511163641185.png" alt="커스텀셀" width="70%" /></p>

<p>TitleLabel만들고 ContentView로 드래그하여 Leading, Top, Trailing을 체크해준다. 그리고 이번에는 타이틀 Label의 number of lines를 1로 하자.<br />
<br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511164303585.png" alt="커스텀셀" width="70%" /></p>

<p>BodyLabel을 TitleLabel로 드래그하여 Leading, Vertical Spacing 체크해준다. <br />
그리고 BodyLabel을 ContentView로 드래그하여 Trailing을 채크해준다.(TitleLabel은 한줄이라서..?)<br />
<br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511170258909.png" alt="커스텀셀" width="70%" /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511170350423.png" alt="커스텀셀" width="70%" /></p>

<p>Identifier, Class 설정해준다.<br />
 <br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511170649565.png" alt="커스텀셀" width="70%" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemMint</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p>IBOutlet 추가한다.<br />
 <br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511171224918.png" alt="커스텀셀" width="70%" /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511171534370.png" alt="커스텀셀" width="70%" /></p>

<p>NibListStoryboard에서 테이블만들고 My Table View 이름 지정.해준다. 그리고 이를 NibListViewController에 드래그하여 myTableView만들어준다.<br />
 <br /><br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
    <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>

    <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
    <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이대로 실행하면 에러가난다. Storyboard 방식과 달리 Nib 방식으로 할때는 등록 절차를 직접 해줘야 한다.<br />
 <br /><br />
<br /></p>

<h2 id="전체코드">전체코드</h2>

<h3 id="nibcellxib">NibCell.xib</h3>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511172511582.png" alt="커스텀셀" width="70%" /></p>

<h3 id="nibcellswift">NibCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  NibCell.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/11/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemMint</span>
    <span class="p">}</span>

    <span class="cm">/*
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }
     */</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="niblistviewcontroller">NibListViewController</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  NibListViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[Nib으로 커스텀 테이블뷰 구현하기 Storyboard 커스텀 셀 Nib 커스텀 셀 파일만들기 -&gt; Cocoa Toucn -&gt; Nib파일이름, 체크박스 체크로 2개의 파일을 만든다. 그러면 Nib파일과, Swift파일이 생성된다. TitleLabel만들고 ContentView로 드래그하여 Leading, Top, Trailing을 체크해준다. 그리고 이번에는 타이틀 Label의 number of lines를 1로 하자. BodyLabel을 TitleLabel로 드래그하여 Leading, Vertical Spacing 체크해준다. 그리고 BodyLabel을 ContentView로 드래그하여 Trailing을 채크해준다.(TitleLabel은 한줄이라서..?) Identifier, Class 설정해준다. import UIKit class NibCell: UITableViewCell { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() self.backgroundColor = .systemMint } } IBOutlet 추가한다. NibListStoryboard에서 테이블만들고 My Table View 이름 지정.해준다. 그리고 이를 NibListViewController에 드래그하여 myTableView만들어준다. fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } 이대로 실행하면 에러가난다. Storyboard 방식과 달리 Nib 방식으로 할때는 등록 절차를 직접 해줘야 한다. 전체코드 NibCell.xib NibCell.swift // // NibCell.swift // UITableViewTutorial // // Created by 김동현 on 5/11/25. // import UIKit class NibCell: UITableViewCell { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() self.backgroundColor = .systemMint } /* override func setSelected(_ selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Configure the view for the selected state } */ } NibListViewController // // NibListViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension NibListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "NibCell", for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension NibListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 1. 테이블뷰 예제</title><link href="http://localhost:4000/UIKit-tableView1/" rel="alternate" type="text/html" title="[TableView] 1. 테이블뷰 예제" /><published>2025-05-08T00:00:00+00:00</published><updated>2025-05-08T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView1</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView1/"><![CDATA[<h2 id="테이블-뷰">테이블 뷰</h2>
<p>테이블뷰는 dataSource와 delegate, Cell로 이루어져있다.</p>

<h3 id="구성">구성</h3>
<ul>
  <li>dataSource
    <ul>
      <li>데이터와 관련된 부분</li>
      <li>셀을 어떻게 보여줄 지</li>
      <li>데이터 크기, 종류에 따른 셀의 타입 정하기</li>
      <li>리스트 개수가 몇개인지</li>
    </ul>
  </li>
  <li>delegate
    <ul>
      <li>특정 셀 선택시 엑션과 같은 이벤트 처리 담당</li>
    </ul>
  </li>
  <li>Cell
    <ul>
      <li>테이블뷰에 들어가는 각각의 알맹이</li>
    </ul>
  </li>
</ul>

<h3 id="예제-1">예제 1</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="c1">/// Interface Builder에 연결된 테이블 뷰 아울렛</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="c1">/// 더미 데이터</span>
    <span class="k">var</span> <span class="nv">dummyDataList</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="s">"hello world1"</span><span class="p">,</span>
        <span class="s">"hello world2"</span><span class="p">,</span>
        <span class="s">"hello world3"</span><span class="p">,</span>
        <span class="s">"hello world4"</span><span class="p">,</span>
        <span class="s">"hello world5"</span><span class="p">,</span>
        <span class="s">"hello world6"</span><span class="p">,</span>
        <span class="s">"hello world7"</span><span class="p">,</span>
        <span class="s">"hello world8"</span><span class="p">,</span>
        <span class="s">"hello world9"</span><span class="p">,</span>
    <span class="p">]</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="c1">/// 테이블 뷰의 데이터 소스, 델리겟을 현재 뷰 컨트롤러로 설정</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 프로토콜은 약속이다 -&gt; 준수해야한다</span>
<span class="c1">/// DateSource - 데이터 관련된 부분</span>
<span class="c1">/// 리스트는 섹션과 섹션안에 아이템들이 있다</span>
<span class="c1">/// 테이블뷰에서는 섹션과 로우로 부룬다</span>
<span class="c1">///</span>
<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션 내 보여줄 셀의 개수를 반환</span>
    <span class="c1">/// - section: 섹션 인덱스 (기본적으로 1개 섹션 사용 중)</span>
    <span class="c1">/// - returns: 행(Row)의 개수</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummyDataList</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="kt">UITableViewCell</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">subtitle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="s">"MyCell"</span><span class="p">)</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">textLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">dummyDataList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"테스트"</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="예제-2">예제 2</h3>
<ul>
  <li>더미 데이터 활용</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DummyData</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">uuid</span><span class="p">:</span> <span class="kt">UUID</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"타이틀입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">"바디입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getDumies</span><span class="p">(</span><span class="n">_</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="p">{</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="kt">DummyData</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dummyDataList</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummyData</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummyDataList</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="kt">UITableViewCell</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">subtitle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="s">"MyCell"</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">dummyDataList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">textLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="예제-3">예제 3</h3>
<ul>
  <li>섹션의 header와 footer 활용</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">struct</span> <span class="kt">DummySection</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">uuid</span><span class="p">:</span> <span class="kt">UUID</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">rows</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"섹션 타이틀입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">"섹션 바디입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">rows</span> <span class="o">=</span> <span class="kt">DummyData</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getDumies</span><span class="p">(</span><span class="n">_</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="p">{</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="kt">DummySection</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DummyData</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">uuid</span><span class="p">:</span> <span class="kt">UUID</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"타이틀입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">"바디입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getDumies</span><span class="p">(</span><span class="n">_</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="p">{</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="kt">DummyData</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="kt">UITableViewCell</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">subtitle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="s">"MyCell"</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">textLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="예제-4">예제 4</h3>
<ul>
  <li>Fakery 라이블러리 활용</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">import</span> <span class="kt">Fakery</span>

<span class="kd">struct</span> <span class="kt">DummySection</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">uuid</span><span class="p">:</span> <span class="kt">UUID</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">rows</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"섹션 타이틀입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">"섹션 바디입니다: </span><span class="se">\(</span><span class="n">uuid</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">rows</span> <span class="o">=</span> <span class="kt">DummyData</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getDumies</span><span class="p">(</span><span class="n">_</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="p">{</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="kt">DummySection</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">DummyData</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">uuid</span><span class="p">:</span> <span class="kt">UUID</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span>
    
    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">uuid</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">faker</span> <span class="o">=</span> <span class="kt">Faker</span><span class="p">(</span><span class="nv">locale</span><span class="p">:</span> <span class="s">"ko"</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">firstName</span> <span class="o">=</span> <span class="n">faker</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="nf">firstName</span><span class="p">()</span>  <span class="c1">//=&gt; "Emilie"</span>
        <span class="k">let</span> <span class="nv">lastName</span> <span class="o">=</span> <span class="n">faker</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="nf">lastName</span><span class="p">()</span>    <span class="c1">//=&gt; "Hansen"</span>
        
        <span class="k">let</span> <span class="nv">body</span> <span class="o">=</span> <span class="n">faker</span><span class="o">.</span><span class="n">lorem</span><span class="o">.</span><span class="nf">paragraphs</span><span class="p">(</span><span class="nv">amount</span><span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"타이틀입니다: </span><span class="se">\(</span><span class="n">lastName</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">firstName</span><span class="se">)</span><span class="s">"</span>
        <span class="k">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="s">"바디입니다: </span><span class="se">\(</span><span class="n">body</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getDumies</span><span class="p">(</span><span class="n">_</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="p">{</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="kt">DummyData</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="kt">UITableViewCell</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">subtitle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="s">"MyCell"</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">textLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[테이블 뷰 테이블뷰는 dataSource와 delegate, Cell로 이루어져있다. 구성 dataSource 데이터와 관련된 부분 셀을 어떻게 보여줄 지 데이터 크기, 종류에 따른 셀의 타입 정하기 리스트 개수가 몇개인지 delegate 특정 셀 선택시 엑션과 같은 이벤트 처리 담당 Cell 테이블뷰에 들어가는 각각의 알맹이 예제 1 import UIKit class ViewController: UIViewController { /// Interface Builder에 연결된 테이블 뷰 아울렛 @IBOutlet weak var myTableView: UITableView! /// 더미 데이터 var dummyDataList: [String] = [ "hello world1", "hello world2", "hello world3", "hello world4", "hello world5", "hello world6", "hello world7", "hello world8", "hello world9", ] override func viewDidLoad() { super.viewDidLoad() /// 테이블 뷰의 데이터 소스, 델리겟을 현재 뷰 컨트롤러로 설정 myTableView.dataSource = self myTableView.delegate = self } } /// 프로토콜은 약속이다 -&gt; 준수해야한다 /// DateSource - 데이터 관련된 부분 /// 리스트는 섹션과 섹션안에 아이템들이 있다 /// 테이블뷰에서는 섹션과 로우로 부룬다 /// /// UITableView의 데이터 관리 역할을 담당 extension ViewController: UITableViewDataSource { /// 섹션 내 보여줄 셀의 개수를 반환 /// - section: 섹션 인덱스 (기본적으로 1개 섹션 사용 중) /// - returns: 행(Row)의 개수 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummyDataList.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.textLabel?.text = dummyDataList[indexPath.row] /// 셀의 서브 타이틀 설정 cell.detailTextLabel?.text = "테스트" return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension ViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 예제 2 더미 데이터 활용 struct DummyData { let uuid: UUID let title: String let body: String init() { self.uuid = UUID() self.title = "타이틀입니다: \(uuid)" self.body = "바디입니다: \(uuid)" } static func getDumies(_ count: Int = 100) -&gt; [DummyData] { return (1...count).map { _ in DummyData() } } } import UIKit class ViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummyDataList: [DummyData] = DummyData.getDumies() override func viewDidLoad() { super.viewDidLoad() myTableView.dataSource = self myTableView.delegate = self } } extension ViewController: UITableViewDataSource { func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummyDataList.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") let cellData: DummyData = dummyDataList[indexPath.row] cell.textLabel?.text = cellData.title cell.detailTextLabel?.text = cellData.body return cell } } extension ViewController: UITableViewDelegate { func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 예제 3 섹션의 header와 footer 활용 import Foundation struct DummySection { let uuid: UUID let title: String let body: String let rows: [DummyData] init() { self.uuid = UUID() self.title = "섹션 타이틀입니다: \(uuid)" self.body = "섹션 바디입니다: \(uuid)" self.rows = DummyData.getDumies(10) } static func getDumies(_ count: Int = 100) -&gt; [DummySection] { return (1...count).map { _ in DummySection() } } } struct DummyData { let uuid: UUID let title: String let body: String init() { self.uuid = UUID() self.title = "타이틀입니다: \(uuid)" self.body = "바디입니다: \(uuid)" } static func getDumies(_ count: Int = 100) -&gt; [DummyData] { return (1...count).map { _ in DummyData() } } } import UIKit class ViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies() override func viewDidLoad() { super.viewDidLoad() myTableView.dataSource = self myTableView.delegate = self } } extension ViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.textLabel?.text = cellData.title cell.detailTextLabel?.text = cellData.body return cell } } extension ViewController: UITableViewDelegate { func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 예제 4 Fakery 라이블러리 활용 import Foundation import Fakery struct DummySection { let uuid: UUID let title: String let body: String let rows: [DummyData] init() { self.uuid = UUID() self.title = "섹션 타이틀입니다: \(uuid)" self.body = "섹션 바디입니다: \(uuid)" self.rows = DummyData.getDumies(10) } static func getDumies(_ count: Int = 100) -&gt; [DummySection] { return (1...count).map { _ in DummySection() } } } struct DummyData { let uuid: UUID let title: String let body: String init() { self.uuid = UUID() let faker = Faker(locale: "ko") let firstName = faker.name.firstName() //=&gt; "Emilie" let lastName = faker.name.lastName() //=&gt; "Hansen" let body = faker.lorem.paragraphs(amount: 10) self.title = "타이틀입니다: \(lastName) \(firstName)" self.body = "바디입니다: \(body)" } static func getDumies(_ count: Int = 100) -&gt; [DummyData] { return (1...count).map { _ in DummyData() } } } import UIKit class ViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies() override func viewDidLoad() { super.viewDidLoad() myTableView.dataSource = self myTableView.delegate = self } } extension ViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.textLabel?.text = cellData.title cell.detailTextLabel?.text = cellData.body return cell } } extension ViewController: UITableViewDelegate { func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 3. 스토리보드로 커스텀 테이블뷰 구현하기</title><link href="http://localhost:4000/UIKit-tableView3/" rel="alternate" type="text/html" title="[TableView] 3. 스토리보드로 커스텀 테이블뷰 구현하기" /><published>2025-05-08T00:00:00+00:00</published><updated>2025-05-08T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView3</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView3/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="스토리보드로-커스텀-테이블뷰-구현하기">스토리보드로 커스텀 테이블뷰 구현하기</h2>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509003319693.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509020704480.png" alt="커스텀셀2" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">기존 셀</td>
    <td style="text-align:center;">구현할 커스텀 셀</td>
  </tr>
</table>
<p>위 왼쪽 사진은 <strong>1. 테이블뷰 예제</strong>에서 구현한 방식이다. 사진처럼 셀 스타일이 기본 셀이라서 커스텀을 할 수 없다. 그래서 보통 UITableViewCell을 상속받아 커스텀 Cell Class를 만들어 입맛대로 만든다. 커스텀 Cell 적용 방식이 <strong>1. 스토리보드, 2. Nib파일, 3. 코드 방식</strong> 총 3가지가 있는데 이번 포스팅에서는 스토리보드 방식으로 커스템 셀 구현을 진행한다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%2012.38.22(2).png" alt="커스텀셀" width="100%" /> <br />
Shift + Command + L을 눌러서 TableView를 추가하고 상하좌우 제약을 0을 주도록 설정한다. 삼각형 모양이 Size Inspector이다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%2012.49.28(2).png" alt="커스텀셀" width="100%" /> <br />
Shift + Command + L을 눌러서 Table View Cell을 드래그해준다 이를 등록 과정(register)이라고 한다. ContentView가 핵심이다. 여기에 요소들 집어넣는다. 우측상단의 Raw Height로 셀 높이를 지정할 수 있다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%2012.59.22(2).png" alt="커스텀셀" width="100%" /> <br />
상단 Label은 Leading과 Top 걸어주고 하단 Label은 상단의 Leading, Vertical Spacing 설정, Bottom도 설정해준다. 이후 상단의 leading제약을 10으로 해준다. 그리고 상단 Label의 Top 제약을 10으로 걸면 빨간 에러가 뜬다. <br />
Label 자체는 크기를 가지고 있지 않기 때문에 상단 Label을 늘릴지 하단 Label이 늘릴지 정해줘야한다. <br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509010236155.png" alt="커스텀셀" width="100%" /><br />
상단Label의 크기는 유지하고 하단 Label의 크기를 늘려서 하단 Label의 Content Hugging Priority의 Vertical을 줄이면 된다. <br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509010642611.png" alt="커스텀셀" width="100%" /><br />
마무리로 모든 제약을 10으로 해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%201.08.47(2).png" alt="커스텀셀" width="100%" /><br />
긴 문장이 들어오면 number of lines가 1이라서 뒷부분이 잘린다. 해결하기 위해 상단 label의 trailing도 10 제약을 준다. <br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%201.12.45(2).png" alt="커스텀셀" width="100%" /><br />
<img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509012025690.png" alt="커스텀셀" width="100%" /><br />
두번째 Label에도 긴문장을 넣으면 뒷부분이 잘린다. 해결을 위해 number of lines를 0으로 하고 trailing도 10 잡아준다. 이때 빨간색 줄이 생기는데 이유는 number of lines가 0이라서 계속 늘어나기 때문이다. 늘어났을 때 ContentView 사이즈공간이 모자라서 상단 Label을 밀어내려고 하기 떄문에 발생한다. 이를 해결하기 위해 Compression Resistance를 설정해야한다. 만약 하단 Label의 vertical을 751로 올리면 상단 Label이 없어진다. 그래서 상단Label을 누르고 Compression Resistance를 751로올려야한다.<br />
<br /></p>

<table>
  <thead>
    <tr>
      <th>항목</th>
      <th>설명</th>
      <th>효과</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Content Hugging = 낮음</strong></td>
      <td>늘어나도 괜찮음</td>
      <td>다른 뷰들이 먼저 자기 크기 유지</td>
    </tr>
    <tr>
      <td><strong>Compression Resistance = 낮음</strong></td>
      <td>줄어들어도 괜찮음</td>
      <td>다른 뷰가 먼저 자기 크기 지킴</td>
    </tr>
    <tr>
      <td><strong>상단 Label Hugging 높음</strong></td>
      <td>상단 Label이 더 이상 안 늘어나려 함</td>
      <td>하단 Label이 늘어남</td>
    </tr>
    <tr>
      <td><strong>상단 Label Resistance 높음</strong></td>
      <td>상단 Label이 안 줄어들고 버팀</td>
      <td>하단 Label이 줄어듦</td>
    </tr>
  </tbody>
</table>

<h3 id="-정리">🔚 정리</h3>

<ul>
  <li><strong>Hugging</strong>: “나는 커지기 싫어”(숫자 높을수록 안커짐)</li>
  <li><strong>Compression Resistance</strong>: “나는 작아지기 싫어”(숫자 높을수록 안작아짐)</li>
  <li>위 두 값을 적절히 조절해주면, Auto Layout이 충돌 없이 어떤 뷰가 늘어나거나 줄어들지 결정하게 된다.<br />
  <br /></li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">class</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 커스텀 셀을 만들어야 한다. StoryboardCell.swift파일을 만들어준다.<br />
셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. 이 라이프사이클을 awakeFromNib라고 한다. -&gt; Interface Builder같이 스토리보드로 추가되거나 Nib파일로 되었을 경우에 awakeFromNib()가 호출된다 ViewController의 ViewDidload랑 비슷한 역할이다. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%201.34.20(2).png" alt="커스텀셀" width="100%" /><br />
<img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-09%20%EC%98%A4%EC%A0%84%201.40.11(2).png" alt="커스텀셀" width="100%" /><br />
Label이 드래그안될때는 당황하지말고 직접 @IBOutlet weak var로 선언해준다. 그리고 반대로 드래그해서 Label로 연결시켜주면 된다. 알고보니 StoryboardList의 StoryboardCell의 CustomClass설정을 StoryboardCell로 해줘야하는데 안되있어서 연결이 안된 것이었다. 주의하자. 이까지 완료되면 등록 과정(Register) 완료이다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 커스텀 셀</span>
<span class="kd">import</span> <span class="kt">Foundation</span>
<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  StoryboardListViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">MyTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="kt">MyTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="kt">MyTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"StoryBoardCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>이제 StoryboardListViewController로 돌아와서 <strong>func</strong> tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) 여기서 수정한다. 기존의 let cell 부분을 주석처리하고 바로 셀을 생성하는게 아니라 테이블 뷰 자체는 메모리를 재사용한다고 했으니 재사용 셀을 설정하기 위해 dequeueReusableCell를 설정한다.현재 셀을 가져온다.</p>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://hanipsum.com</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[스토리보드로 커스텀 테이블뷰 구현하기 기존 셀 구현할 커스텀 셀 위 왼쪽 사진은 1. 테이블뷰 예제에서 구현한 방식이다. 사진처럼 셀 스타일이 기본 셀이라서 커스텀을 할 수 없다. 그래서 보통 UITableViewCell을 상속받아 커스텀 Cell Class를 만들어 입맛대로 만든다. 커스텀 Cell 적용 방식이 1. 스토리보드, 2. Nib파일, 3. 코드 방식 총 3가지가 있는데 이번 포스팅에서는 스토리보드 방식으로 커스템 셀 구현을 진행한다. Shift + Command + L을 눌러서 TableView를 추가하고 상하좌우 제약을 0을 주도록 설정한다. 삼각형 모양이 Size Inspector이다. Shift + Command + L을 눌러서 Table View Cell을 드래그해준다 이를 등록 과정(register)이라고 한다. ContentView가 핵심이다. 여기에 요소들 집어넣는다. 우측상단의 Raw Height로 셀 높이를 지정할 수 있다. 상단 Label은 Leading과 Top 걸어주고 하단 Label은 상단의 Leading, Vertical Spacing 설정, Bottom도 설정해준다. 이후 상단의 leading제약을 10으로 해준다. 그리고 상단 Label의 Top 제약을 10으로 걸면 빨간 에러가 뜬다. Label 자체는 크기를 가지고 있지 않기 때문에 상단 Label을 늘릴지 하단 Label이 늘릴지 정해줘야한다. 상단Label의 크기는 유지하고 하단 Label의 크기를 늘려서 하단 Label의 Content Hugging Priority의 Vertical을 줄이면 된다. 마무리로 모든 제약을 10으로 해준다. 긴 문장이 들어오면 number of lines가 1이라서 뒷부분이 잘린다. 해결하기 위해 상단 label의 trailing도 10 제약을 준다. 두번째 Label에도 긴문장을 넣으면 뒷부분이 잘린다. 해결을 위해 number of lines를 0으로 하고 trailing도 10 잡아준다. 이때 빨간색 줄이 생기는데 이유는 number of lines가 0이라서 계속 늘어나기 때문이다. 늘어났을 때 ContentView 사이즈공간이 모자라서 상단 Label을 밀어내려고 하기 떄문에 발생한다. 이를 해결하기 위해 Compression Resistance를 설정해야한다. 만약 하단 Label의 vertical을 751로 올리면 상단 Label이 없어진다. 그래서 상단Label을 누르고 Compression Resistance를 751로올려야한다. 항목 설명 효과 Content Hugging = 낮음 늘어나도 괜찮음 다른 뷰들이 먼저 자기 크기 유지 Compression Resistance = 낮음 줄어들어도 괜찮음 다른 뷰가 먼저 자기 크기 지킴 상단 Label Hugging 높음 상단 Label이 더 이상 안 늘어나려 함 하단 Label이 늘어남 상단 Label Resistance 높음 상단 Label이 안 줄어들고 버팀 하단 Label이 줄어듦 🔚 정리 Hugging: “나는 커지기 싫어”(숫자 높을수록 안커짐) Compression Resistance: “나는 작아지기 싫어”(숫자 높을수록 안작아짐) 위 두 값을 적절히 조절해주면, Auto Layout이 충돌 없이 어떤 뷰가 늘어나거나 줄어들지 결정하게 된다. import Foundation import UIKit class StoryboardCell: UITableViewCell { /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override class func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() } } 이제 커스텀 셀을 만들어야 한다. StoryboardCell.swift파일을 만들어준다. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. 이 라이프사이클을 awakeFromNib라고 한다. -&gt; Interface Builder같이 스토리보드로 추가되거나 Nib파일로 되었을 경우에 awakeFromNib()가 호출된다 ViewController의 ViewDidload랑 비슷한 역할이다. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다. Label이 드래그안될때는 당황하지말고 직접 @IBOutlet weak var로 선언해준다. 그리고 반대로 드래그해서 Label로 연결시켜주면 된다. 알고보니 StoryboardList의 StoryboardCell의 CustomClass설정을 StoryboardCell로 해줘야하는데 안되있어서 연결이 안된 것이었다. 주의하자. 이까지 완료되면 등록 과정(Register) 완료이다. // 커스텀 셀 import Foundation import UIKit class StoryboardCell: UITableViewCell { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") } } // // StoryboardListViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class StoryboardListViewController: UIViewController { @IBOutlet weak var MyTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() self.MyTableView.dataSource = self self.MyTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension StoryboardListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension StoryboardListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 이제 StoryboardListViewController로 돌아와서 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) 여기서 수정한다. 기존의 let cell 부분을 주석처리하고 바로 셀을 생성하는게 아니라 테이블 뷰 자체는 메모리를 재사용한다고 했으니 재사용 셀을 설정하기 위해 dequeueReusableCell를 설정한다.현재 셀을 가져온다. Reference https://hanipsum.com]]></summary></entry><entry><title type="html">[TableView] 2. 스토리보드로 여러 화면 분기하기</title><link href="http://localhost:4000/UIKit-tableView2/" rel="alternate" type="text/html" title="[TableView] 2. 스토리보드로 여러 화면 분기하기" /><published>2025-05-08T00:00:00+00:00</published><updated>2025-05-08T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView2</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView2/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="스토리보드로-여러-화면-분기하기">스토리보드로 여러 화면 분기하기</h2>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508214538806.png" alt="커스텀셀" width="70%" /></p>

<h3 id="필요-파일">필요 파일</h3>

<ul>
  <li>MainViewController</li>
  <li>Main.storyboard</li>
</ul>

<p>MainStoryboard에서 Command + Shift + L을 눌러서 Storyboard를 추가하고 우측 하단의 Embeded In을 눌러서 Navigation Controller(화면 이동 관할)을 추가한다.   <br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508215655099.png" alt="커스텀셀" width="70%" /><br />
다음으로 현재 Main스토리보드에서 어떤 화변이 먼저 실행이 될 지 정해줘야 한다. Attribute Inspector에서 is Initial View Controller 클릭해서 첫 시작 뷰 컨트롤러를 설정해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508220915956.png" alt="커스텀셀" width="70%" /><br />
filled버튼들을 추가하고 전체 버튼들을 드래그하여 Embed In 클릭 후 Stack View를 눌러준다 그러면 버튼들이 StackView로 묶인다. 버튼들을 Stack에 같은 크기로 채우려면 alignment를 fill로 해주고 Distribution은 Fill Equally로 해준다. 그 이후 StackView를 SafeArea로 드래그하여 horizontal, vertical 각각 center 지정해준다. 주황색이 뜨면 새로고침 눌러준다.<br />
<br /></p>

<p>alignment(정렬)는 요소들이 한 축을 기준으로 어떻게 정렬될지를 결정한다.<br />
<code class="language-plaintext highlighter-rouge">horizontal</code> stack view일 경우:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.leading</code> → 왼쪽 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">.center</code> → 가운데 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">.trailing</code> → 오른쪽 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">.top</code>, <code class="language-plaintext highlighter-rouge">.bottom</code> → 요소들의 <strong>수직 위치</strong> 정렬 방식도 있음<br />
<br /></li>
</ul>

<p>distribution(분배)는 여러 UI 요소를 Stack View 안에서 얼마나 넓게 어떻게 나눌지 결정한다.<br />
<code class="language-plaintext highlighter-rouge">.fill</code> → 가능한 공간만큼 채움<br />
<code class="language-plaintext highlighter-rouge">.fillEqually</code> → 모든 요소가 <strong>동일한 크기</strong>로 공간 분배<br />
<code class="language-plaintext highlighter-rouge">.fillProportionally</code> → 각 요소의 <strong>원래 크기 비율</strong>에 따라 분배<br />
<code class="language-plaintext highlighter-rouge">.equalSpacing</code> → 요소들 사이 간격을 <strong>동일하게 유지</strong><br />
<code class="language-plaintext highlighter-rouge">.equalCentering</code> → 중심점 기준으로 <strong>균등하게 배치</strong><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508222122754.png" alt="커스텀셀" width="70%" /><br />
Default버튼을 우측 ViewController쪽으로 드래그하여 Show를 눌러준다 이때 ViewController는 CustomClass에서 Class설정을 해줘서 ViewController코드와 연결해둬야한다. 그러면 Default를 누르면 화면이동이 된다. 동일하게 나머지 버튼들도 ViewController를 만들어서 연결해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-08%20%EC%98%A4%ED%9B%84%2010.56.48(2).png" alt="커스텀셀" width="70%" /><br />
완성하면 이렇게 되는데 MainStoryBoard 파일 안에서 View가 많아지게 되면 상당히 무거워지기 때문에 작업이 힘들어 진다. 추천하는 방식은 Reference 방식이다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508230321228.png" alt="커스텀셀" width="70%" /><br />
StoryboardList.storyboard를 만들고 만들면 제공되는 ViewController를 없앤다. 그럼 이렇게 빈 화면이 나온다. 그리고 MainStoryboard에 있는 Storyboard 타이틀 VC를 Control + X로 잘라내어 StoryboardList.storyboard에 붙여넣는다<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508230739196.png" alt="커스텀셀" width="70%" /><br />
그리고 나서 타이틀을 설정해준다. 그리고 MainStoryboard로 가서 Command + Shift + L로 reference검색해서 드래그한다. 이는 스토리보드에 대한 참조(메모리 주소)이다. 즉 이로 서로 연걸이 되게끔 할 수 있다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508231122558.png" alt="커스텀셀" width="70%" /><br />
스토리보드Id를 설정한다 보통 클래스이름과 동일하게 적는다. 여기서 사진에는 표시 안되어 있지만 Use StoryboardId 체크 클릭해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508231515586.png" alt="커스텀셀" width="70%" /><br />
<img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508231740354.png" alt="커스텀셀" width="70%" /><br />
스토리보드와 스토리보드Id를 적어준다. 그리고 Identifier도 동일하게 스토리보드Id를 적어준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508232019316.png" alt="커스텀셀" width="70%" /><br />
최종적으로 참조에 드래그를 해서 show로 지정해준다. 이러면 이전의 방식과 동일한 방식이다. 이렇게 하면 작업이 용이해진다. 나머지 코드들도 동일하게 해주자. <br />
<br /></p>

<h2 id="최종화면">최종화면</h2>
<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-08%20%EC%98%A4%ED%9B%84%2011.46.20(2).png" alt="커스텀셀" width="70%" /><br />
<img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508234707587.png" alt="커스텀셀" width="30%" /></p>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[스토리보드로 여러 화면 분기하기 필요 파일 MainViewController Main.storyboard MainStoryboard에서 Command + Shift + L을 눌러서 Storyboard를 추가하고 우측 하단의 Embeded In을 눌러서 Navigation Controller(화면 이동 관할)을 추가한다. 다음으로 현재 Main스토리보드에서 어떤 화변이 먼저 실행이 될 지 정해줘야 한다. Attribute Inspector에서 is Initial View Controller 클릭해서 첫 시작 뷰 컨트롤러를 설정해준다. filled버튼들을 추가하고 전체 버튼들을 드래그하여 Embed In 클릭 후 Stack View를 눌러준다 그러면 버튼들이 StackView로 묶인다. 버튼들을 Stack에 같은 크기로 채우려면 alignment를 fill로 해주고 Distribution은 Fill Equally로 해준다. 그 이후 StackView를 SafeArea로 드래그하여 horizontal, vertical 각각 center 지정해준다. 주황색이 뜨면 새로고침 눌러준다. alignment(정렬)는 요소들이 한 축을 기준으로 어떻게 정렬될지를 결정한다. horizontal stack view일 경우: .leading → 왼쪽 정렬 .center → 가운데 정렬 .trailing → 오른쪽 정렬 .top, .bottom → 요소들의 수직 위치 정렬 방식도 있음 distribution(분배)는 여러 UI 요소를 Stack View 안에서 얼마나 넓게 어떻게 나눌지 결정한다. .fill → 가능한 공간만큼 채움 .fillEqually → 모든 요소가 동일한 크기로 공간 분배 .fillProportionally → 각 요소의 원래 크기 비율에 따라 분배 .equalSpacing → 요소들 사이 간격을 동일하게 유지 .equalCentering → 중심점 기준으로 균등하게 배치 Default버튼을 우측 ViewController쪽으로 드래그하여 Show를 눌러준다 이때 ViewController는 CustomClass에서 Class설정을 해줘서 ViewController코드와 연결해둬야한다. 그러면 Default를 누르면 화면이동이 된다. 동일하게 나머지 버튼들도 ViewController를 만들어서 연결해준다. 완성하면 이렇게 되는데 MainStoryBoard 파일 안에서 View가 많아지게 되면 상당히 무거워지기 때문에 작업이 힘들어 진다. 추천하는 방식은 Reference 방식이다. StoryboardList.storyboard를 만들고 만들면 제공되는 ViewController를 없앤다. 그럼 이렇게 빈 화면이 나온다. 그리고 MainStoryboard에 있는 Storyboard 타이틀 VC를 Control + X로 잘라내어 StoryboardList.storyboard에 붙여넣는다 그리고 나서 타이틀을 설정해준다. 그리고 MainStoryboard로 가서 Command + Shift + L로 reference검색해서 드래그한다. 이는 스토리보드에 대한 참조(메모리 주소)이다. 즉 이로 서로 연걸이 되게끔 할 수 있다. 스토리보드Id를 설정한다 보통 클래스이름과 동일하게 적는다. 여기서 사진에는 표시 안되어 있지만 Use StoryboardId 체크 클릭해준다. 스토리보드와 스토리보드Id를 적어준다. 그리고 Identifier도 동일하게 스토리보드Id를 적어준다. 최종적으로 참조에 드래그를 해서 show로 지정해준다. 이러면 이전의 방식과 동일한 방식이다. 이렇게 하면 작업이 용이해진다. 나머지 코드들도 동일하게 해주자. 최종화면]]></summary></entry><entry><title type="html">[UIKit] Delegate Pattern란?</title><link href="http://localhost:4000/UIKit-delegate/" rel="alternate" type="text/html" title="[UIKit] Delegate Pattern란?" /><published>2025-04-29T00:00:00+00:00</published><updated>2025-04-29T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-delegate</id><content type="html" xml:base="http://localhost:4000/UIKit-delegate/"><![CDATA[<h2 id="1-delegate-조건">1. Delegate 조건</h2>
<p>UIKit 클론코딩을 하다 보면 여러가지 상황에서 Delegate Protocol을 채택하고 Protocol 내부에서 제공하는 method를 사용하게 된다. UITextField, UITableView에서도 기능을 구현할 때 흔하게 사용되는 방식이다. Apple에서 우리가 유용하게 사용할 만한 기능들을 함수에 담아 미리 구현해두고 우리가 추가적인 코드를 작성함으로서 우리가 원하는 방식대로 앱이 동작하게 할 수 있다.</p>

<h3 id="delegate-pattern-은-아래의-조건을-총족함으로서-사용할-수-있다">Delegate Pattern 은 아래의 조건을 총족함으로서 사용할 수 있다.</h3>
<h3 id="delegate를-생성하는-뷰">Delegate를 생성하는 뷰</h3>
<ol>
  <li>Protocol을 생성하고, 구현하고 싶은 기능을 해당 Protocol의 메서드로 생성</li>
  <li>Protocol을 Type으로 갖는 Delegate 인스턴스 생성</li>
  <li>생성한 method가 동작해야하는 상황에 코드 작성</li>
</ol>

<h3 id="delegate를-위임받는-뷰">Delegate를 위임받는 뷰</h3>
<ol>
  <li>ViewController에 Delegate Protocol을 채택</li>
  <li>Protocol 필수 method 구현</li>
  <li>Delegate 위임</li>
</ol>

<h2 id="2-준비">2. 준비</h2>
<h3 id="firstviewcontroller는-결과값을-표시할-label-두번째-controller를-뛰울-button">FirstViewController는 결과값을 표시할 Label, 두번째 Controller를 뛰울 Button</h3>
<h3 id="secondviewcontroller는-결과값을-입력받을-textfield와-첫번째-controller로-돌아갈-수-있는-button을-배치">SecondViewController는 결과값을 입력받을 TextField와 첫번째 Controller로 돌아갈 수 있는 Button을 배치</h3>

<h3 id="protocol">Protocol</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 1</span>
<span class="kd">protocol</span> <span class="kt">CustomTextFieldDelegate</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textDidInput</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="firstviewcontroller">FirstViewController</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  FirstViewController.swift</span>
<span class="c1">//  MyDelegate</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 4/30/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">FirstViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Components</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">myLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"hello world"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">nextButton</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">()</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"secondView"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitleColor</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemMint</span>
        <span class="n">button</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">goNextView</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// MARK: - 뷰 추가</span>
        <span class="p">[</span><span class="n">myLabel</span><span class="p">,</span> <span class="n">nextButton</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
        
        <span class="c1">// MARK: - 제약조건 설정</span>
        <span class="c1">// 레이블</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myLabel</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">myLabel</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">)</span>
        <span class="p">])</span>
        
        <span class="c1">// 버튼</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="c1">// 위치 제약</span>
            <span class="n">nextButton</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">50</span><span class="p">),</span>
            <span class="n">nextButton</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            
            <span class="c1">// 크기 제약</span>
            <span class="n">nextButton</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">50</span><span class="p">),</span>
            <span class="n">nextButton</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">200</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span>
    <span class="kd">func</span> <span class="nf">goNextView</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">secondVC</span> <span class="o">=</span> <span class="kt">SecondViewController</span><span class="p">()</span>
        <span class="n">secondVC</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">secondVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 3</span>
<span class="kd">extension</span> <span class="kt">FirstViewController</span><span class="p">:</span> <span class="kt">CustomTextFieldDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textDidInput</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">myLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">FirstViewController</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="secondviewcontroller">SecondViewController</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  SecondViewController.swift</span>
<span class="c1">//  MyDelegate</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 4/30/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SecondViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    <span class="c1">/// 2</span>
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="kt">CustomTextFieldDelegate</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="c1">// MARK: - UI Components</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">texxtField</span><span class="p">:</span> <span class="kt">UITextField</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">textField</span> <span class="o">=</span> <span class="kt">UITextField</span><span class="p">()</span>
        
        <span class="c1">// placeholder 스타일</span>
        <span class="n">textField</span><span class="o">.</span><span class="n">attributedPlaceholder</span> <span class="o">=</span> <span class="kt">NSAttributedString</span><span class="p">(</span>
            <span class="nv">string</span><span class="p">:</span> <span class="s">"입력해주세요"</span><span class="p">,</span>
            <span class="nv">attributes</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">lightGray</span><span class="p">]</span>
        <span class="p">)</span>
        
        <span class="c1">// 왼쪽 여백</span>
        <span class="n">textField</span><span class="o">.</span><span class="n">leftView</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">textField</span><span class="o">.</span><span class="n">leftViewMode</span> <span class="o">=</span> <span class="o">.</span><span class="n">always</span>
        
        <span class="c1">// 테두리 스타일</span>
        <span class="n">textField</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">borderColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="o">.</span><span class="n">cgColor</span> <span class="c1">// 테두리 색상</span>
        <span class="n">textField</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">borderWidth</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="c1">// 테두리 둑께</span>
        <span class="n">textField</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">10</span> <span class="c1">// 둘글게</span>
        
        <span class="k">return</span> <span class="n">textField</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">endButton</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">()</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"secondView"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitleColor</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemMint</span>
        <span class="n">button</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">goBack</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">darkGray</span>
        <span class="c1">/// print("delegate 상태:", delegate as Any)</span>
        <span class="nf">makeUI</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// MARK: - 뷰 추가</span>
        <span class="p">[</span><span class="n">texxtField</span><span class="p">,</span> <span class="n">endButton</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
        
        <span class="c1">// MARK: - 제약조건 설정</span>
        <span class="c1">// 텍스트필드</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="c1">// 위치</span>
            <span class="n">texxtField</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">texxtField</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
            
            <span class="c1">// 크기</span>
            <span class="n">texxtField</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">50</span><span class="p">),</span>
            <span class="n">texxtField</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
        <span class="p">])</span>
        
        <span class="c1">// 버튼</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="c1">// 위치 제약</span>
            <span class="n">endButton</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">50</span><span class="p">),</span>
            <span class="n">endButton</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            
            <span class="c1">// 크기 제약</span>
            <span class="n">endButton</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">50</span><span class="p">),</span>
            <span class="n">endButton</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">200</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">goBack</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">text</span> <span class="o">=</span> <span class="n">texxtField</span><span class="o">.</span><span class="n">text</span> <span class="p">??</span> <span class="s">""</span>
        <span class="k">self</span><span class="o">.</span><span class="n">delegate</span><span class="p">?</span><span class="o">.</span><span class="nf">textDidInput</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="n">text</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">dismiss</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">FirstViewController</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="3-delegate-pattern-연습">3. Delegate Pattern 연습</h2>
<h3 id="protocol-구현하기">Protocol 구현하기</h3>
<p>구현하고자 하는 method를 Protocol을 생성하고 그 내부에 만들어 주어야 한다. Protocol은 class을 Type으로 가진다. class Type을 가지게 되면 이후 생성할 delegate 인스턴스를 weak 형태로 생성할 수 있다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 프로토콜 정의 (class 전용)</span>
<span class="kd">protocol</span> <span class="kt">ChatDelegate</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">didReceiveMessage</span><span class="p">(</span><span class="n">_</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 2. 메시지를 받는 쪽 (delegate를 호출하는 쪽)</span>
<span class="kd">class</span> <span class="kt">ChatRoom</span> <span class="p">{</span>
    <span class="c1">// 2.1 순환 참조 방지를 위해 반드시 weak 사용</span>
    <span class="c1">// 프로토콜에 AnyObject 또는 class 제약을 반드시 붙여야 함</span>
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="kt">ChatDelegate</span><span class="p">?</span>

    <span class="kd">func</span> <span class="nf">receiveNewMessage</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">message</span> <span class="o">=</span> <span class="s">"안녕하세요!"</span>
        <span class="n">delegate</span><span class="p">?</span><span class="o">.</span><span class="nf">didReceiveMessage</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 3. 메시지를 표시할 화면 (delegate를 구현하는 쪽)</span>
<span class="kd">class</span> <span class="kt">ChatViewController</span><span class="p">:</span> <span class="kt">UIViewController</span><span class="p">,</span> <span class="kt">ChatDelegate</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">chatRoom</span> <span class="o">=</span> <span class="kt">ChatRoom</span><span class="p">()</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">chatRoom</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span> <span class="c1">// 위임 설정</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">didReceiveMessage</span><span class="p">(</span><span class="n">_</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"받은 메시지: </span><span class="se">\(</span><span class="n">message</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이 실습에서는 SecondViewController 의 UITextField 에 입력받은 내용을 FirstViewController 의 UILabel 에 전달해야하므로 우리가 구현할 method 는 String 을 Parameter 로 전달 받는다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">CustomTextFieldDelegate</span><span class="p">:</span> <span class="kt">AnyObject</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textDidInput</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="delegate-인스턴스-생성하기">Delegate 인스턴스 생성하기</h3>
<p>SecondViewController에서 delegate 인스턴스를 생성한다. delegate인스턴스는 CustomTextFieldDelegate를 타입으로 가짐으로서 이 인스턴스에 접근해서 우리가 Protocol 내부에 작성해두었던 함수에 접근할 수 있게 된다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// weak 을 사용해 ARC 가 증가하지 않도록 만들어줌으로서 메모리 Leak 이 발생하지 않도록 방지해주는 것이 중요</span>
<span class="k">weak</span> <span class="k">var</span> <span class="nv">delegate</span><span class="p">:</span> <span class="kt">CustomTextFieldDelegate</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
</code></pre></div></div>

<h3 id="protocol-채택-및-필수-method-구현">Protocol 채택 및 필수 method 구현</h3>
<p>Protocol을 채택시 우리가 생성한 Protocol을 채택하고 method까지 함께 구현한다.<br />
Protocol을 채택할 때는 반드시 Extension으로 주어야 하는 것은 아니지만 필자는 가독성이 좋다고 판단하여 Extension으로 Delegate를 채택하는 것을 선호한다.<br />
Protocol 이 채택되고 나면 경고창이 뜨면서 필수 함수를 구현하라고 나오는데 이 때 Xcode 가 지원하는 자동에러처리를 사용하면 함수 하나가 생성된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 3</span>
<span class="kd">extension</span> <span class="kt">FirstViewController</span><span class="p">:</span> <span class="kt">CustomTextFieldDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">textDidInput</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">myLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="delegate-위임하기">Delegate 위임하기</h3>
<p>delegate 인스턴스를 생성했을 때 Optional 형태로 생성하였다. 이 값에 CustomTextFieldDelegate를 채택한 FirstViewController를 할당해준다.<br />
실제 Input은 SecondViewController에서 이루어지지만 그 값에 대한 처리가 FirstViewController에서 대행하겠다는 일종의 명시이다.<br />
위임 방법은 FirstViewController에서 화면을 present할 때 구현해놓은 nextVC의 delegate에 접근에서 설정할 수 있다</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@objc</span>
<span class="kd">func</span> <span class="nf">goNextView</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">secondVC</span> <span class="o">=</span> <span class="kt">SecondViewController</span><span class="p">()</span>
    <span class="n">secondVC</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">present</span><span class="p">(</span><span class="n">secondVC</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="secondviewcontroller에서-함수가-동작해야하는-시점-설정">SecondViewController에서 함수가 동작해야하는 시점 설정</h2>
<p>우리가 원하는 타이밍에 함수가 작동할 수 있도록 코드 구현. 화면을 전달하면서 값을 전달하면된다. delegate의 textDidInput함수를 호출하는 시점이 결정되었고 이제 버튼이 눌리게 되면 View 가 Dismiss 되기 전 이 함수를 호출하며 FirstViewController 가 값을 전달받게 된다. 이게 가능한 이유는 SecondViewController 가 present 되기 전 우리가 FirstViewController 를 delegate 로 설정해주었기 때문이다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@objc</span>
<span class="kd">private</span> <span class="kd">func</span> <span class="nf">goBack</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">text</span> <span class="o">=</span> <span class="n">texxtField</span><span class="o">.</span><span class="n">text</span> <span class="p">??</span> <span class="s">""</span>
    <span class="k">self</span><span class="o">.</span><span class="n">delegate</span><span class="p">?</span><span class="o">.</span><span class="nf">textDidInput</span><span class="p">(</span><span class="nv">text</span><span class="p">:</span> <span class="n">text</span><span class="p">)</span>
    <span class="k">self</span><span class="o">.</span><span class="nf">dismiss</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://kasroid.github.io/posts/ios/20201010-uikit-delegate-pattern/</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><summary type="html"><![CDATA[1. Delegate 조건 UIKit 클론코딩을 하다 보면 여러가지 상황에서 Delegate Protocol을 채택하고 Protocol 내부에서 제공하는 method를 사용하게 된다. UITextField, UITableView에서도 기능을 구현할 때 흔하게 사용되는 방식이다. Apple에서 우리가 유용하게 사용할 만한 기능들을 함수에 담아 미리 구현해두고 우리가 추가적인 코드를 작성함으로서 우리가 원하는 방식대로 앱이 동작하게 할 수 있다. Delegate Pattern 은 아래의 조건을 총족함으로서 사용할 수 있다. Delegate를 생성하는 뷰 Protocol을 생성하고, 구현하고 싶은 기능을 해당 Protocol의 메서드로 생성 Protocol을 Type으로 갖는 Delegate 인스턴스 생성 생성한 method가 동작해야하는 상황에 코드 작성 Delegate를 위임받는 뷰 ViewController에 Delegate Protocol을 채택 Protocol 필수 method 구현 Delegate 위임 2. 준비 FirstViewController는 결과값을 표시할 Label, 두번째 Controller를 뛰울 Button SecondViewController는 결과값을 입력받을 TextField와 첫번째 Controller로 돌아갈 수 있는 Button을 배치 Protocol /// 1 protocol CustomTextFieldDelegate: AnyObject { func textDidInput(text: String) } FirstViewController // // FirstViewController.swift // MyDelegate // // Created by 김동현 on 4/30/25. // import UIKit final class FirstViewController: UIViewController { // MARK: - UI Components private lazy var myLabel: UILabel = { let label = UILabel() label.text = "hello world" label.textColor = .white return label }() private lazy var nextButton: UIButton = { let button = UIButton() button.setTitle("secondView", for: .normal) button.setTitleColor(.black, for: .normal) button.backgroundColor = .systemMint button.layer.cornerRadius = 20 button.addTarget(self, action: #selector(goNextView), for: .touchUpInside) return button }() override func viewDidLoad() { super.viewDidLoad() makeUI() } func makeUI() { // MARK: - 뷰 추가 [myLabel, nextButton].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } // MARK: - 제약조건 설정 // 레이블 NSLayoutConstraint.activate([ myLabel.centerXAnchor.constraint(equalTo: view.centerXAnchor), myLabel.centerYAnchor.constraint(equalTo: view.centerYAnchor) ]) // 버튼 NSLayoutConstraint.activate([ // 위치 제약 nextButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -50), nextButton.centerXAnchor.constraint(equalTo: view.centerXAnchor), // 크기 제약 nextButton.heightAnchor.constraint(equalToConstant: 50), nextButton.widthAnchor.constraint(equalToConstant: 200) ]) } @objc func goNextView() { let secondVC = SecondViewController() secondVC.delegate = self self.present(secondVC, animated: true) } } /// 3 extension FirstViewController: CustomTextFieldDelegate { func textDidInput(text: String) { myLabel.text = text } } #Preview { FirstViewController() } SecondViewController // // SecondViewController.swift // MyDelegate // // Created by 김동현 on 4/30/25. // import UIKit final class SecondViewController: UIViewController { /// 2 weak var delegate: CustomTextFieldDelegate? = nil // MARK: - UI Components private lazy var texxtField: UITextField = { let textField = UITextField() // placeholder 스타일 textField.attributedPlaceholder = NSAttributedString( string: "입력해주세요", attributes: [.foregroundColor: UIColor.lightGray] ) // 왼쪽 여백 textField.leftView = UIView(frame: CGRect(x: 0, y: 0, width: 10, height: 0)) textField.leftViewMode = .always // 테두리 스타일 textField.layer.borderColor = UIColor.black.cgColor // 테두리 색상 textField.layer.borderWidth = 1.0 // 테두리 둑께 textField.layer.cornerRadius = 10 // 둘글게 return textField }() private lazy var endButton: UIButton = { let button = UIButton() button.setTitle("secondView", for: .normal) button.setTitleColor(.black, for: .normal) button.backgroundColor = .systemMint button.layer.cornerRadius = 20 button.addTarget(self, action: #selector(goBack), for: .touchUpInside) return button }() override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .darkGray /// print("delegate 상태:", delegate as Any) makeUI() } private func makeUI() { // MARK: - 뷰 추가 [texxtField, endButton].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } // MARK: - 제약조건 설정 // 텍스트필드 NSLayoutConstraint.activate([ // 위치 texxtField.centerXAnchor.constraint(equalTo: view.centerXAnchor), texxtField.centerYAnchor.constraint(equalTo: view.centerYAnchor), // 크기 texxtField.heightAnchor.constraint(equalToConstant: 50), texxtField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20) ]) // 버튼 NSLayoutConstraint.activate([ // 위치 제약 endButton.bottomAnchor.constraint(equalTo: view.bottomAnchor, constant: -50), endButton.centerXAnchor.constraint(equalTo: view.centerXAnchor), // 크기 제약 endButton.heightAnchor.constraint(equalToConstant: 50), endButton.widthAnchor.constraint(equalToConstant: 200) ]) } @objc private func goBack() { let text = texxtField.text ?? "" self.delegate?.textDidInput(text: text) self.dismiss(animated: true) } } #Preview { FirstViewController() } 3. Delegate Pattern 연습 Protocol 구현하기 구현하고자 하는 method를 Protocol을 생성하고 그 내부에 만들어 주어야 한다. Protocol은 class을 Type으로 가진다. class Type을 가지게 되면 이후 생성할 delegate 인스턴스를 weak 형태로 생성할 수 있다. // 1. 프로토콜 정의 (class 전용) protocol ChatDelegate: AnyObject { func didReceiveMessage(_ message: String) } // 2. 메시지를 받는 쪽 (delegate를 호출하는 쪽) class ChatRoom { // 2.1 순환 참조 방지를 위해 반드시 weak 사용 // 프로토콜에 AnyObject 또는 class 제약을 반드시 붙여야 함 weak var delegate: ChatDelegate? func receiveNewMessage() { let message = "안녕하세요!" delegate?.didReceiveMessage(message) } } // 3. 메시지를 표시할 화면 (delegate를 구현하는 쪽) class ChatViewController: UIViewController, ChatDelegate { let chatRoom = ChatRoom() override func viewDidLoad() { super.viewDidLoad() chatRoom.delegate = self // 위임 설정 } func didReceiveMessage(_ message: String) { print("받은 메시지: \(message)") } } 이 실습에서는 SecondViewController 의 UITextField 에 입력받은 내용을 FirstViewController 의 UILabel 에 전달해야하므로 우리가 구현할 method 는 String 을 Parameter 로 전달 받는다. protocol CustomTextFieldDelegate: AnyObject { func textDidInput(text: String) } Delegate 인스턴스 생성하기 SecondViewController에서 delegate 인스턴스를 생성한다. delegate인스턴스는 CustomTextFieldDelegate를 타입으로 가짐으로서 이 인스턴스에 접근해서 우리가 Protocol 내부에 작성해두었던 함수에 접근할 수 있게 된다. // weak 을 사용해 ARC 가 증가하지 않도록 만들어줌으로서 메모리 Leak 이 발생하지 않도록 방지해주는 것이 중요 weak var delegate: CustomTextFieldDelegate? = nil Protocol 채택 및 필수 method 구현 Protocol을 채택시 우리가 생성한 Protocol을 채택하고 method까지 함께 구현한다. Protocol을 채택할 때는 반드시 Extension으로 주어야 하는 것은 아니지만 필자는 가독성이 좋다고 판단하여 Extension으로 Delegate를 채택하는 것을 선호한다. Protocol 이 채택되고 나면 경고창이 뜨면서 필수 함수를 구현하라고 나오는데 이 때 Xcode 가 지원하는 자동에러처리를 사용하면 함수 하나가 생성된다. /// 3 extension FirstViewController: CustomTextFieldDelegate { func textDidInput(text: String) { myLabel.text = text } } Delegate 위임하기 delegate 인스턴스를 생성했을 때 Optional 형태로 생성하였다. 이 값에 CustomTextFieldDelegate를 채택한 FirstViewController를 할당해준다. 실제 Input은 SecondViewController에서 이루어지지만 그 값에 대한 처리가 FirstViewController에서 대행하겠다는 일종의 명시이다. 위임 방법은 FirstViewController에서 화면을 present할 때 구현해놓은 nextVC의 delegate에 접근에서 설정할 수 있다 @objc func goNextView() { let secondVC = SecondViewController() secondVC.delegate = self self.present(secondVC, animated: true) } SecondViewController에서 함수가 동작해야하는 시점 설정 우리가 원하는 타이밍에 함수가 작동할 수 있도록 코드 구현. 화면을 전달하면서 값을 전달하면된다. delegate의 textDidInput함수를 호출하는 시점이 결정되었고 이제 버튼이 눌리게 되면 View 가 Dismiss 되기 전 이 함수를 호출하며 FirstViewController 가 값을 전달받게 된다. 이게 가능한 이유는 SecondViewController 가 present 되기 전 우리가 FirstViewController 를 delegate 로 설정해주었기 때문이다. @objc private func goBack() { let text = texxtField.text ?? "" self.delegate?.textDidInput(text: text) self.dismiss(animated: true) } Reference https://kasroid.github.io/posts/ios/20201010-uikit-delegate-pattern/]]></summary></entry><entry><title type="html">[RxSwift] 2. RxSwift개념</title><link href="http://localhost:4000/RxSwift-RxSwift-2/" rel="alternate" type="text/html" title="[RxSwift] 2. RxSwift개념" /><published>2025-04-21T00:00:00+00:00</published><updated>2025-04-21T00:00:00+00:00</updated><id>http://localhost:4000/%5BRxSwift%5D-RxSwift-2</id><content type="html" xml:base="http://localhost:4000/RxSwift-RxSwift-2/"><![CDATA[<p><img src="/assets/img/2025-03-25-[RxSwift]-RxSwift-1/image.png" alt="clean1" style="width: 70%;" /></p>

<h2 id="1-rx란">1. Rx란?</h2>
<p>파이프라인 연결이다</p>

<h2 id="2-구성">2. 구성</h2>
<ul>
  <li>보내는 것 - Observable</li>
  <li>연결 - subScribe</li>
  <li>중간처리 - 연산자</li>
</ul>

<h2 id="3-큰-개념">3. 큰 개념</h2>
<h3 id="보내는-것---옴저버블총알--구독-가능한-것">보내는 것 - 옴저버블(총알 = 구독 가능한 것)</h3>
<ol>
  <li>Observable
    <ul>
      <li>가장 기본 베이스, 생성하자마자 이벤트를 전달한다</li>
      <li>.onNext(), .onError(), .onCompleted()를 통해 이벤트를 받을 수 있다</li>
      <li>.subscribe()를 통해 이벤트를 발행 가능</li>
      <li>이벤트를 정의하고, 정적인 스트림 생성(한방향: 선언 -&gt; 구독)</li>
    </ul>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 1. Observable은 가장 기본적인 Rx 스트림</span>
 <span class="k">let</span> <span class="nv">observable</span> <span class="o">=</span> <span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;.</span><span class="nf">just</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    
 <span class="c1">// 2. subscribe를 통해 값을 받아 처리</span>
 <span class="n">observable</span>
     <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="n">value</span> <span class="k">in</span>
         <span class="nf">print</span><span class="p">(</span><span class="s">"Received: </span><span class="se">\(</span><span class="n">value</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
     <span class="p">})</span>
     <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>Subject
    <ul>
      <li>Observable(구독 가능한 것)이면서 Observer(관찰자)</li>
      <li>일단 연결을 해두고 원하는 시점에 이벤트를 보낸다.</li>
      <li>외부에서 직접 값을 넣고, 동적인 스트림 생성(양방향)</li>
    </ul>
    <ul>
      <li>BehaviorSubject - 상태
        <ul>
          <li>초기값 필수</li>
          <li>구독 시, 가장 최신값 1개를 즉시 전달받음</li>
          <li>이후에는 일반 Observable처럼 .onNext 이벤트를 수신</li>
        </ul>

        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. BehaviorSubject는 초기값을 설정하고, 구독 시 가장 최근 값을 전달</span>
<span class="k">let</span> <span class="nv">behaviorSubject</span> <span class="o">=</span> <span class="kt">BehaviorSubject</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="s">"초기값"</span><span class="p">)</span>
      
<span class="c1">// 2. 구독 설정 → "초기값"이 바로 전달됨</span>
<span class="n">behaviorSubject</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"BehaviorSubject:"</span><span class="p">,</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
    <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
      
<span class="c1">// 3. 새로운 이벤트 전달</span>
<span class="n">behaviorSubject</span><span class="o">.</span><span class="nf">onNext</span><span class="p">(</span><span class="s">"새로운 값"</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>PublishSubjcet - 단방향 이벤트
        <ul>
          <li>구독 이후 이벤트만 받음(초기값 없음)</li>
          <li>주로 이벤트 전달용</li>
        </ul>

        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. PublishSubject는 구독 이후에 발생한 이벤트만 전달</span>
<span class="k">let</span> <span class="nv">publishSubject</span> <span class="o">=</span> <span class="kt">PublishSubject</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">()</span>

<span class="c1">// 2. 구독 설정</span>
<span class="n">publishSubject</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"PublishSubject:"</span><span class="p">,</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
    <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

<span class="c1">// 3. 이벤트 발생 (구독 이후라 전달됨)</span>
<span class="n">publishSubject</span><span class="o">.</span><span class="nf">onNext</span><span class="p">(</span><span class="s">"첫 번째 이벤트"</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>Relay
    <ul>
      <li>Subject의 변형으로, error가 없고 UI바인딩에 최적화</li>
    </ul>
  </li>
</ol>

<ul>
  <li>PublishRelay
    <ul>
      <li>단방향 이벤트 전달(버튼 클릭)</li>
    </ul>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. PublishRelay는 error가 없고 UI에 최적화된 Subject</span>
<span class="k">let</span> <span class="nv">publishRelay</span> <span class="o">=</span> <span class="kt">PublishRelay</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">()</span>

<span class="c1">// 2. 구독 설정</span>
<span class="n">publishRelay</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"PublishRelay:"</span><span class="p">,</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
    <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

<span class="c1">// 3. 이벤트 발생 → accept()로 전달</span>
<span class="n">publishRelay</span><span class="o">.</span><span class="nf">accept</span><span class="p">(</span><span class="s">"이벤트 발생!"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>BehaviorRelay
    <ul>
      <li>상태 저장, 초기값 필수 -&gt; accept() 사용</li>
    </ul>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. BehaviorRelay는 초기값이 필요하며, 상태 저장에 적합</span>
<span class="k">let</span> <span class="nv">behaviorRelay</span> <span class="o">=</span> <span class="kt">BehaviorRelay</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="s">"기본값"</span><span class="p">)</span>

<span class="c1">// 2. 구독 설정 → "기본값"이 바로 전달됨</span>
<span class="n">behaviorRelay</span>
    <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"BehaviorRelay:"</span><span class="p">,</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
    <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

<span class="c1">// 3. 값 업데이트 → accept() 사용</span>
<span class="n">behaviorRelay</span><span class="o">.</span><span class="nf">accept</span><span class="p">(</span><span class="s">"업데이트된 값"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li>Driver
    <ul>
      <li>메인스레드, share(1)</li>
      <li>UI 바인딩 전용으로 사용되는 옵저버블</li>
    </ul>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="c1">// 1. Relay에서 값을 가져와 Driver로 변환</span>
 <span class="k">let</span> <span class="nv">textRelay</span> <span class="o">=</span> <span class="kt">BehaviorRelay</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">value</span><span class="p">:</span> <span class="s">"Hello"</span><span class="p">)</span>

 <span class="c1">// 2. Driver로 변환 (에러 없이, MainThread에서 작동)</span>
 <span class="k">let</span> <span class="nv">textDriver</span> <span class="o">=</span> <span class="n">textRelay</span><span class="o">.</span><span class="nf">asDriver</span><span class="p">()</span>

 <span class="c1">// 3. UI 요소에 drive (drive는 MainThread에서 UI 바인딩 시 사용)</span>
 <span class="n">textDriver</span>
     <span class="o">.</span><span class="nf">drive</span><span class="p">(</span><span class="n">label</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
     <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="구독">구독</h3>
<ol>
  <li>subscribe(onNext:)
    <ul>
      <li>next, error, completed 시퀀스 이벤트를 받을 수 있다</li>
      <li>직점 onError 처리 가능하다</li>
      <li>viewModel 내부, 로직 처리, 이벤트 감지, 에러 대응</li>
      <li>Disposable 반환해야한다</li>
      <li>모든 Observable계열 구독 가능</li>
      <li>bind(onNext:) 보다 범용적, 완료/에러 받을 수 있다</li>
    </ul>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 1. onNext만 사용하는 기본적인 구독</span>
 <span class="k">let</span> <span class="nv">observable</span> <span class="o">=</span> <span class="kt">Observable</span><span class="o">.</span><span class="nf">just</span><span class="p">(</span><span class="s">"Hello, RxSwift!"</span><span class="p">)</span>

 <span class="n">observable</span>
     <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="n">value</span> <span class="k">in</span>
         <span class="nf">print</span><span class="p">(</span><span class="s">"onNext:"</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
     <span class="p">})</span>
     <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

 <span class="c1">// 2. onNext, onError, onCompleted 모두 명시</span>
 <span class="k">let</span> <span class="nv">observable</span> <span class="o">=</span> <span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;.</span><span class="n">create</span> <span class="p">{</span> <span class="n">observer</span> <span class="k">in</span>
     <span class="n">observer</span><span class="o">.</span><span class="nf">onNext</span><span class="p">(</span><span class="s">"첫 번째 이벤트"</span><span class="p">)</span>
     <span class="n">observer</span><span class="o">.</span><span class="nf">onCompleted</span><span class="p">()</span>
     <span class="k">return</span> <span class="kt">Disposables</span><span class="o">.</span><span class="nf">create</span><span class="p">()</span>
 <span class="p">}</span>

 <span class="n">observable</span>
     <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span>
         <span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"onNext:"</span><span class="p">,</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">},</span>
         <span class="nv">onError</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"onError:"</span><span class="p">,</span> <span class="nv">$0</span><span class="o">.</span><span class="n">localizedDescription</span><span class="p">)</span> <span class="p">},</span>
         <span class="nv">onCompleted</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"onCompleted"</span><span class="p">)</span> <span class="p">},</span>
         <span class="nv">onDisposed</span><span class="p">:</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"onDisposed"</span><span class="p">)</span> <span class="p">}</span>
     <span class="p">)</span>
     <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>bind(to:)
    <ul>
      <li>UI 컴포넌트 프로퍼티에 바인딩할 때 사용</li>
      <li>구독과 동시에 값이 특정 속성에 직접 들어가는 방식</li>
      <li>값을 특정UI의 속성에 직접 구독해서 바인딩
        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// label.text = title처럼 자동으로 연결하는 직접 바인딩 방식</span>
  <span class="n">viewModel</span><span class="o">.</span><span class="n">title</span>
   <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">label</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
   <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>bind(onNext:)
    <ul>
      <li>단순히 이벤트를 수신하고 구독 형태</li>
      <li>내부에 명시적으로 처리 로직을 작성해야 함</li>
      <li>값을 받아서 직접 처리(프린트, 로직 실행)하는 방식으로 구독
        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="n">viewModel</span><span class="o">.</span><span class="n">title</span>
   <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="n">text</span> <span class="k">in</span>
   <span class="nf">print</span><span class="p">(</span><span class="s">"값 출력: </span><span class="se">\(</span><span class="n">text</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
   <span class="p">})</span>
   <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>비교</li>
</ol>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 1. 자동 UI 업데이트 (bind to UI)</span>
  <span class="n">viewModel</span><span class="o">.</span><span class="n">username</span> <span class="c1">// Observable&lt;String&gt;</span>
      <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">label</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">text</span><span class="p">)</span> <span class="c1">// 📲 label.text = 값</span>
      <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>

  <span class="c1">// 2. 내가 직접 프린트 (bind with closure)</span>
  <span class="n">viewModel</span><span class="o">.</span><span class="n">username</span>
      <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="n">name</span> <span class="k">in</span>
          <span class="nf">print</span><span class="p">(</span><span class="s">"유저 이름은 </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
      <span class="p">})</span>
      <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBag</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="RxSwift" /><summary type="html"><![CDATA[1. Rx란? 파이프라인 연결이다 2. 구성 보내는 것 - Observable 연결 - subScribe 중간처리 - 연산자 3. 큰 개념 보내는 것 - 옴저버블(총알 = 구독 가능한 것) Observable 가장 기본 베이스, 생성하자마자 이벤트를 전달한다 .onNext(), .onError(), .onCompleted()를 통해 이벤트를 받을 수 있다 .subscribe()를 통해 이벤트를 발행 가능 이벤트를 정의하고, 정적인 스트림 생성(한방향: 선언 -&gt; 구독) // 1. Observable은 가장 기본적인 Rx 스트림 let observable = Observable&lt;Int&gt;.just(1) // 2. subscribe를 통해 값을 받아 처리 observable .subscribe(onNext: { value in print("Received: \(value)") }) .disposed(by: disposeBag) Subject Observable(구독 가능한 것)이면서 Observer(관찰자) 일단 연결을 해두고 원하는 시점에 이벤트를 보낸다. 외부에서 직접 값을 넣고, 동적인 스트림 생성(양방향) BehaviorSubject - 상태 초기값 필수 구독 시, 가장 최신값 1개를 즉시 전달받음 이후에는 일반 Observable처럼 .onNext 이벤트를 수신 // 1. BehaviorSubject는 초기값을 설정하고, 구독 시 가장 최근 값을 전달 let behaviorSubject = BehaviorSubject&lt;String&gt;(value: "초기값") // 2. 구독 설정 → "초기값"이 바로 전달됨 behaviorSubject .subscribe(onNext: { print("BehaviorSubject:", $0) }) .disposed(by: disposeBag) // 3. 새로운 이벤트 전달 behaviorSubject.onNext("새로운 값") PublishSubjcet - 단방향 이벤트 구독 이후 이벤트만 받음(초기값 없음) 주로 이벤트 전달용 // 1. PublishSubject는 구독 이후에 발생한 이벤트만 전달 let publishSubject = PublishSubject&lt;String&gt;() // 2. 구독 설정 publishSubject .subscribe(onNext: { print("PublishSubject:", $0) }) .disposed(by: disposeBag) // 3. 이벤트 발생 (구독 이후라 전달됨) publishSubject.onNext("첫 번째 이벤트") Relay Subject의 변형으로, error가 없고 UI바인딩에 최적화 PublishRelay 단방향 이벤트 전달(버튼 클릭) // 1. PublishRelay는 error가 없고 UI에 최적화된 Subject let publishRelay = PublishRelay&lt;String&gt;() // 2. 구독 설정 publishRelay .subscribe(onNext: { print("PublishRelay:", $0) }) .disposed(by: disposeBag) // 3. 이벤트 발생 → accept()로 전달 publishRelay.accept("이벤트 발생!") BehaviorRelay 상태 저장, 초기값 필수 -&gt; accept() 사용 // 1. BehaviorRelay는 초기값이 필요하며, 상태 저장에 적합 let behaviorRelay = BehaviorRelay&lt;String&gt;(value: "기본값") // 2. 구독 설정 → "기본값"이 바로 전달됨 behaviorRelay .subscribe(onNext: { print("BehaviorRelay:", $0) }) .disposed(by: disposeBag) // 3. 값 업데이트 → accept() 사용 behaviorRelay.accept("업데이트된 값") Driver 메인스레드, share(1) UI 바인딩 전용으로 사용되는 옵저버블 // 1. Relay에서 값을 가져와 Driver로 변환 let textRelay = BehaviorRelay&lt;String&gt;(value: "Hello") // 2. Driver로 변환 (에러 없이, MainThread에서 작동) let textDriver = textRelay.asDriver() // 3. UI 요소에 drive (drive는 MainThread에서 UI 바인딩 시 사용) textDriver .drive(label.rx.text) .disposed(by: disposeBag) 구독 subscribe(onNext:) next, error, completed 시퀀스 이벤트를 받을 수 있다 직점 onError 처리 가능하다 viewModel 내부, 로직 처리, 이벤트 감지, 에러 대응 Disposable 반환해야한다 모든 Observable계열 구독 가능 bind(onNext:) 보다 범용적, 완료/에러 받을 수 있다 // 1. onNext만 사용하는 기본적인 구독 let observable = Observable.just("Hello, RxSwift!") observable .subscribe(onNext: { value in print("onNext:", value) }) .disposed(by: disposeBag) // 2. onNext, onError, onCompleted 모두 명시 let observable = Observable&lt;String&gt;.create { observer in observer.onNext("첫 번째 이벤트") observer.onCompleted() return Disposables.create() } observable .subscribe( onNext: { print("onNext:", $0) }, onError: { print("onError:", $0.localizedDescription) }, onCompleted: { print("onCompleted") }, onDisposed: { print("onDisposed") } ) .disposed(by: disposeBag) bind(to:) UI 컴포넌트 프로퍼티에 바인딩할 때 사용 구독과 동시에 값이 특정 속성에 직접 들어가는 방식 값을 특정UI의 속성에 직접 구독해서 바인딩 // label.text = title처럼 자동으로 연결하는 직접 바인딩 방식 viewModel.title .bind(to: label.rx.text) .disposed(by: disposeBag) bind(onNext:) 단순히 이벤트를 수신하고 구독 형태 내부에 명시적으로 처리 로직을 작성해야 함 값을 받아서 직접 처리(프린트, 로직 실행)하는 방식으로 구독 viewModel.title .bind(onNext: { text in print("값 출력: \(text)") }) .disposed(by: disposeBag) 비교 // 1. 자동 UI 업데이트 (bind to UI) viewModel.username // Observable&lt;String&gt; .bind(to: label.rx.text) // 📲 label.text = 값 .disposed(by: disposeBag) // 2. 내가 직접 프린트 (bind with closure) viewModel.username .bind(onNext: { name in print("유저 이름은 \(name)") }) .disposed(by: disposeBag)]]></summary></entry><entry><title type="html">[ReactiveX] 1. 반응형 프로그래밍이란?</title><link href="http://localhost:4000/ReactiveX-ReactiveX-1/" rel="alternate" type="text/html" title="[ReactiveX] 1. 반응형 프로그래밍이란?" /><published>2025-03-25T00:00:00+00:00</published><updated>2025-03-25T00:00:00+00:00</updated><id>http://localhost:4000/%5BReactiveX%5D-ReactiveX-1</id><content type="html" xml:base="http://localhost:4000/ReactiveX-ReactiveX-1/"><![CDATA[<p><img src="/assets/img/2025-03-25-%5BRxSwift%5D-RxSwift-1/image.png" alt="커스텀셀" width="70%" /></p>

<h2 id="1-반응형-프로그래밍이란">1. 반응형 프로그래밍이란?</h2>
<p>데이터의 흐름 및 변경사항을 전파하는 데 중점을 둔 프로그래밍 패러다임이다.   <br />
이 패러다임을 사용할 경우, 주변 환경/데이터 변화가 생길 때 연결된 실행 모델들이 이 이벤트를 받아 동작하도록 설계하는 방식이다.</p>

<ul>
  <li><strong>선(→)</strong> : 데이터가 흐르는 경로이며, <strong>Observable</strong>이라고 부른다.</li>
  <li><strong>점(●)</strong> : 시간에 따라 발생하는 <strong>이벤트(Event)</strong> 하나를 의미한다.</li>
  <li><strong>debounce 박스</strong> : 이벤트를 필터링하는 <strong>Operator(연산자)</strong>로, 너무 잦은 이벤트를 제어한다.</li>
  <li><strong>아래쪽 선</strong> : <code class="language-plaintext highlighter-rouge">debounce</code> 이후 실제로 <strong>구독자에게 전달되는 결과 흐름</strong>을 보여준다.</li>
</ul>

<h3 id="비유로-설명">비유로 설명</h3>
<p>자동차(Event)들이 도로(Ovservable)를 따라 달리고 있을 때,<br />
교통경찰 역할을 하는 debounce가 너무 많은 차를 제어해준다.  <br />
지나치게 빠르게 지나가는 차들은 걸러내고, 일정 시간 동안 마지막으로 지나간 차(이벤트)만 통과시킨다.  <br />
즉 이벤트가 여러 번 발생하더라도 debounce를 통과한 이벤트만 최종적으로 전달한다.</p>

<h2 id="2-rxswift란">2. RxSwift란?</h2>
<p>Reactive Extension/Programming + Swift로, 관찰 가능한 시퀀스를 사용하여 비동기 및 이벤트 기반 프로그램을 구성하기 위한 라이브러리다.</p>

<p>Swift는 함수형 프로그래밍(Functional Programming) 패러다임을 강조하는 언어이다.   <br />
이에 RxSwift는 반응형 프로그래밍(Reactive Programming)을 더하여, Swift에서 FRP(Functional Reactive Programming)을 따를 수 있도록 한다.  <br />
즉 Swift를 반응형 프로그래밍 하는 것이다.</p>

<h3 id="예시">예시</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Observable</span>
    <span class="o">.</span><span class="nf">combineLatest</span><span class="p">(</span><span class="n">firstName</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">text</span><span class="p">,</span> <span class="n">lastName</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">text</span><span class="p">)</span> <span class="p">{</span>  <span class="nv">$0</span> <span class="o">+</span> <span class="s">" "</span> <span class="nv">$1</span> <span class="p">}</span>
    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="s">"Greetings, </span><span class="se">\(</span><span class="err">#</span><span class="mi">0</span><span class="se">)</span><span class="s">"</span> <span class="p">}</span>
    <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">to</span><span class="p">:</span> <span class="n">greetingLabel</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">text</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="kt">DisposeBag</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>comBineLatest나 map을 RxSwift에서 Operator라고 부른다.</li>
  <li>이러한 연산자를 사용해서 이벤트의 값을 여러 형태로 조합하거나 변경할 수 있다.</li>
  <li>또한 MVVM패턴을 적용할 때 View와 ViewModel을 연결해주는, 데이터 바인딩을 수행해야 한다.  <br />
이때 bind(정확히 말하자면 bind는 RxCocoa이다) 연산자를 사용하여 쉽게 바인딩이 가능하다.   <br />
DisoatchQueue에서 직접 조정해야 했던 작업들을 자동으로 처리해준다.</li>
</ul>

<h2 id="3-rxswift-사용-목적">3. RxSwift 사용 목적</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">doSomethingIncredible</span><span class="p">(</span><span class="nv">forWho</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">IncredibleThing</span>

<span class="c1">// 재시도</span>
<span class="nf">doSomethingIncredible</span><span class="p">(</span><span class="s">"me"</span><span class="p">)</span>
    <span class="o">.</span><span class="nf">retry</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>API 통신을 하다보면, 성공할 때도 있지만 실패할 때도 분명 존재한다.</li>
  <li>실패시 단순히 끝나는게 아니라 3번 정도 재시도 할 수 있다면 좋겠지만 재시도 코드는 많이 복잡하고, 재사용하기도 어렵다.</li>
  <li>RxSwift를 사용하면 retry연산자를 사용해 쉽게 재시도 코드를 작성할 수 있다.</li>
</ul>

<h2 id="4-combine도-같은-개념이다">4. Combine도 같은 개념이다</h2>

<p>Swift에서 RxSwift와 동일한 반응형 프로그래밍을 지원하는 Apple 공식 프레임워크가 Combine이다.<br />
Cimbine은 iOS 13부터 내장되어 있으며, RxSwift와 거의 동일한 비동기 이벤트 스트림을 처리할 수 있다.</p>

<table>
  <thead>
    <tr>
      <th>개념</th>
      <th>RxSwift</th>
      <th>Combine</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>데이터 스트림</td>
      <td><code class="language-plaintext highlighter-rouge">Observable</code></td>
      <td><code class="language-plaintext highlighter-rouge">Publisher</code></td>
    </tr>
    <tr>
      <td>구독</td>
      <td><code class="language-plaintext highlighter-rouge">subscribe()</code></td>
      <td><code class="language-plaintext highlighter-rouge">sink()</code></td>
    </tr>
    <tr>
      <td>데이터 조작</td>
      <td><code class="language-plaintext highlighter-rouge">map</code>, <code class="language-plaintext highlighter-rouge">filter</code>, <code class="language-plaintext highlighter-rouge">flatMap</code>, <code class="language-plaintext highlighter-rouge">combineLatest</code> 등</td>
      <td>동일</td>
    </tr>
    <tr>
      <td>메모리 해제</td>
      <td><code class="language-plaintext highlighter-rouge">DisposeBag</code></td>
      <td><code class="language-plaintext highlighter-rouge">AnyCancellable</code> (store in <code class="language-plaintext highlighter-rouge">Set</code>)</td>
    </tr>
    <tr>
      <td>비동기 이벤트 처리</td>
      <td>가능</td>
      <td>가능</td>
    </tr>
  </tbody>
</table>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Combine</span>

<span class="c1">// 텍스트 필드 두 개를 결합해서 라벨에 표시</span>
<span class="kt">Publishers</span><span class="o">.</span><span class="kt">CombineLatest</span><span class="p">(</span><span class="n">firstNamePublisher</span><span class="p">,</span> <span class="n">lastNamePublisher</span><span class="p">)</span>
    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="s">"Greetings, </span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="nv">$1</span><span class="se">)</span><span class="s">"</span> <span class="p">}</span>
    <span class="o">.</span><span class="n">sink</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span> <span class="k">self</span><span class="p">?</span><span class="o">.</span><span class="n">greetingLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="nv">$0</span> <span class="p">}</span>
    <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">cancellables</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://velog.io/@gnwjd309/RxSwift-1</li>
  <li>https://reactivex.io/intro.html</li>
  <li>https://github.com/ReactiveX/RxSwift</li>
  <li>https://babbab2.tistory.com/182</li>
  <li>https://ios-development.tistory.com/95</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="RxSwift" /><category term="Combine" /><summary type="html"><![CDATA[1. 반응형 프로그래밍이란? 데이터의 흐름 및 변경사항을 전파하는 데 중점을 둔 프로그래밍 패러다임이다. 이 패러다임을 사용할 경우, 주변 환경/데이터 변화가 생길 때 연결된 실행 모델들이 이 이벤트를 받아 동작하도록 설계하는 방식이다. 선(→) : 데이터가 흐르는 경로이며, Observable이라고 부른다. 점(●) : 시간에 따라 발생하는 이벤트(Event) 하나를 의미한다. debounce 박스 : 이벤트를 필터링하는 Operator(연산자)로, 너무 잦은 이벤트를 제어한다. 아래쪽 선 : debounce 이후 실제로 구독자에게 전달되는 결과 흐름을 보여준다. 비유로 설명 자동차(Event)들이 도로(Ovservable)를 따라 달리고 있을 때, 교통경찰 역할을 하는 debounce가 너무 많은 차를 제어해준다. 지나치게 빠르게 지나가는 차들은 걸러내고, 일정 시간 동안 마지막으로 지나간 차(이벤트)만 통과시킨다. 즉 이벤트가 여러 번 발생하더라도 debounce를 통과한 이벤트만 최종적으로 전달한다. 2. RxSwift란? Reactive Extension/Programming + Swift로, 관찰 가능한 시퀀스를 사용하여 비동기 및 이벤트 기반 프로그램을 구성하기 위한 라이브러리다. Swift는 함수형 프로그래밍(Functional Programming) 패러다임을 강조하는 언어이다. 이에 RxSwift는 반응형 프로그래밍(Reactive Programming)을 더하여, Swift에서 FRP(Functional Reactive Programming)을 따를 수 있도록 한다. 즉 Swift를 반응형 프로그래밍 하는 것이다. 예시 Observable .combineLatest(firstName.rx.text, lastName.rx.text) { $0 + " " $1 } .map { "Greetings, \(#0)" } .bind(to: greetingLabel.rx.text) .disposed(by: DisposeBag) comBineLatest나 map을 RxSwift에서 Operator라고 부른다. 이러한 연산자를 사용해서 이벤트의 값을 여러 형태로 조합하거나 변경할 수 있다. 또한 MVVM패턴을 적용할 때 View와 ViewModel을 연결해주는, 데이터 바인딩을 수행해야 한다. 이때 bind(정확히 말하자면 bind는 RxCocoa이다) 연산자를 사용하여 쉽게 바인딩이 가능하다. DisoatchQueue에서 직접 조정해야 했던 작업들을 자동으로 처리해준다. 3. RxSwift 사용 목적 func doSomethingIncredible(forWho: String) throws -&gt; IncredibleThing // 재시도 doSomethingIncredible("me") .retry(3) API 통신을 하다보면, 성공할 때도 있지만 실패할 때도 분명 존재한다. 실패시 단순히 끝나는게 아니라 3번 정도 재시도 할 수 있다면 좋겠지만 재시도 코드는 많이 복잡하고, 재사용하기도 어렵다. RxSwift를 사용하면 retry연산자를 사용해 쉽게 재시도 코드를 작성할 수 있다. 4. Combine도 같은 개념이다 Swift에서 RxSwift와 동일한 반응형 프로그래밍을 지원하는 Apple 공식 프레임워크가 Combine이다. Cimbine은 iOS 13부터 내장되어 있으며, RxSwift와 거의 동일한 비동기 이벤트 스트림을 처리할 수 있다. 개념 RxSwift Combine 데이터 스트림 Observable Publisher 구독 subscribe() sink() 데이터 조작 map, filter, flatMap, combineLatest 등 동일 메모리 해제 DisposeBag AnyCancellable (store in Set) 비동기 이벤트 처리 가능 가능 import Combine // 텍스트 필드 두 개를 결합해서 라벨에 표시 Publishers.CombineLatest(firstNamePublisher, lastNamePublisher) .map { "Greetings, \($0) \($1)" } .sink { [weak self] in self?.greetingLabel.text = $0 } .store(in: &amp;cancellables) Reference https://velog.io/@gnwjd309/RxSwift-1 https://reactivex.io/intro.html https://github.com/ReactiveX/RxSwift https://babbab2.tistory.com/182 https://ios-development.tistory.com/95]]></summary></entry></feed>