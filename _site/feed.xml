<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-15T07:25:14+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[TableView] 10. 테이블뷰 Combine CustomDataSource</title><link href="http://localhost:4000/UIKit-tableView10/" rel="alternate" type="text/html" title="[TableView] 10. 테이블뷰 Combine CustomDataSource" /><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView10</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView10/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="테이블뷰-콤바인-커스텀-데이터-소스">테이블뷰 콤바인 커스텀 데이터 소스</h2>

<p>지난 시간에 Combine을 통해 List를 보여주었는데 이번 포스트에서는 Combine에서 구독을 통해 들어오는 데이터 바로 DataSource로 연결하는 방법을 해보자. 클로저에 대한 개념을 알아야 이해하기 쉽다.</p>

<h3 id="customcombinedatasourceswift">CustomCombineDataSource.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">//</span>
 <span class="c1">//  CustomCombineDataSource.swift</span>
 <span class="c1">//  UITableViewTutorial</span>
 <span class="c1">//</span>
 <span class="c1">//  Created by 김동현 on 5/15/25.</span>
 <span class="c1">//</span>
 
 <span class="kd">import</span> <span class="kt">UIKit</span>
 
 <span class="kd">class</span> <span class="kt">CustomCombineDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
     
     <span class="c1">// 멤버 변수</span>
     <span class="k">var</span> <span class="nv">dataList</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
     
     <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
         <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
     <span class="p">}</span>
     
     <span class="c1">// MARK: - Combine 이벤트로 들어온 데이터랑 테이블뷰랑 연결시켜주는 지점</span>
 
     <span class="c1">/// 변경된 데이터를 받아서 테이블뷰에 적용한다</span>
     <span class="c1">/// - Parameters:</span>
     <span class="c1">///   - updatedDataList: 외부에서 변경된 Combine Publisher로 들어온 데이터를 내 DataSource가 가진 data로 변경하기 위한 매개변수</span>
     <span class="c1">///   - tableView: 리로드 대상 테이블뷰</span>
     <span class="kd">func</span> <span class="nf">pushDataList</span><span class="p">(</span><span class="n">_</span> <span class="nv">updatedDataList</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">],</span> <span class="n">to</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
         <span class="n">tableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
         <span class="k">self</span><span class="o">.</span><span class="n">dataList</span> <span class="o">=</span> <span class="n">updatedDataList</span>
         <span class="n">tableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
     <span class="p">}</span>
     
     <span class="c1">// MARK: - 테이블뷰 데이터 소스 관련(변경이 된 데이터를 데이터소스로 넘겨받아서 reloadData를 하는 목적 </span>
     
     <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
     <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
         <span class="k">return</span> <span class="n">dataList</span><span class="o">.</span><span class="n">count</span>
     <span class="p">}</span>
 
     <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
     <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
     <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
     <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
         <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
         <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
 
         <span class="c1">// [guard let] 방식</span>
         <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
             <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
         <span class="p">}</span>
 
         <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">dataList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
 
         <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
         <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
 
         <span class="c1">/// 셀의 서브 타이틀 설정</span>
         <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
 
         <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
         <span class="k">return</span> <span class="n">cell</span>
     <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div></div>

<p>커스텀 데이터소스를 만든다. 멤버변수로 데이터리스트를 보유하도록 하자. 지금은 DummyData이지만 다음 포스팅에서 제네릭으로 변경할 예정이다.  DataSource에서 변경이 된 데이터와 테이블뷰 리로드를 위한 테이블뷰 접근을 관리하기 위해 pushDataList()를 만들어주자. 그리고 기존 ViewController에서 관리하던 UITableViewDataSource 관련 프로토콜 로직을 CustomCombineDataSource로 그대로 옮겨준다.  왜냐하면 원래 dataSource의 주요 역할이 어떤 셀의 종류를 보여줄지, 리스트 개수가 몇개일지를 관여하기 때문이다. 즉 기존 ViewController의 비즈니스 로직을 CustomDataSource로 옮긴 것이다. 이제 CustomDataSource를 만들었으니 적용하기 위해 클로저를 만들어주자.</p>

<h3 id="uitableviewcombineswift">UITableView+Combine.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  UITableView+Combine.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/15/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Combine</span>

<span class="c1">// MARK: - Sink 정의를 보면 매개변수로 (Self.Output) -&gt; Void) 형태의 클로저를 받는다. 이 형태를 만족하는 로직 함수를 만들자.</span>
<span class="c1">// public func sink(receiveValue: @escaping ((Self.Output) -&gt; Void)) -&gt; AnyCancellable</span>
<span class="kd">extension</span> <span class="kt">UITableView</span> <span class="p">{</span>
    <span class="c1">// 고차함수 - 클로저를 매개변수로 가지거나 반환을 가지는 함수 자체</span>
    <span class="c1">// (Self.Output) -&gt; Void)</span>
    <span class="c1">// ([DummyData]) -&gt; Void</span>
    <span class="c1">// 데이터소스 바인딩</span>
    <span class="kd">func</span> <span class="nf">customItems</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">([</span><span class="kt">DummyData</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">dataSource</span> <span class="o">=</span> <span class="kt">CustomCombineDataSource</span><span class="p">()</span>
        <span class="k">return</span> <span class="p">{</span> <span class="p">(</span><span class="nv">updatedDateLisst</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">])</span> <span class="k">in</span>
            <span class="n">dataSource</span><span class="o">.</span><span class="nf">pushDataList</span><span class="p">(</span><span class="n">updatedDateLisst</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span> <span class="c1">// 리로드</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>기존 ViewController에서 sink로 받는 것을 보면 제네릭 형태인데 Sink로 이벤트(Publisker)가 들어온 데이터를 매개변수로 가지고 반환이 없는 형태의 클로저이다. (Self.Output) -&gt; Void)</p>

<p>이 (Self.Output) -&gt; Void) 형태로 반환을 만족하는 함수를 만들어주자. 지금은 들어오는 형태가 [DummyData] 이므로 func customItems() -&gt; ([DummyData]) -&gt; Void로 해주면 된다.</p>

<p>SInk를 통해 들어오는게 [DummyData]로 들어오게 되고 return { input in } 에 input 부분으로 들어오게 된다.<br />
그럼 pushDataList를 통해 변경이 된 이벤트를 나자신에게 넣어준다.</p>

<h3 id="combinelistviewcontrollerswift">CombineListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CombineListViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/13/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Combine</span>

<span class="kd">class</span> <span class="kt">CombineListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// Combine 메모리 처리를 위해 생성</span>
    <span class="k">var</span> <span class="nv">subscriptions</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">AnyCancellable</span><span class="o">&gt;</span><span class="p">()</span>
    
    <span class="c1">// Published를 하게 되면 dummies 데이터가 추가나 값 변경시 이벤트를 받을 수 있다.</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">dummies</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>

   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
        
        
        <span class="cm">/*
        - sink는 @Published가 수정된 스레드에서 실행된다
        - 그래서 Published변수 수정시 메인 스레드에서 수정해주자
        - @Published 값을 메인 스레드에서 수정하든, 백그라운드에서 수정하든, .receive(on: .main)만 붙이면 sink는 메인에서 실행되고reloadData()도 안전하게 실행된다
         */</span>
        
        <span class="c1">// MARK: - 기존의 데이터를 받는 거를 CombineListViewController에서 다했더라면 이제는 customDataSource으로 따로 뺴두고, 로직은 extension으로 빼서 처리를 한 것이다.</span>
        <span class="c1">// $ 붙이면 데이터 이벤트를 받을 수 있는 상태가 됨</span>
        <span class="c1">// sink는 구독하는 것이다.</span>
        <span class="c1">// AnyCancellable 구독한다고 한다.</span>
        <span class="c1">// store: 구독했던거에 대한 메모리 참조가 들어오게 되는데 이를 관리하기 위해 subscriptions에 넣어준다.</span>
        <span class="n">$dummies</span>
            <span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">customItems</span><span class="p">())</span>
            <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">subscriptions</span><span class="p">)</span>
        
        <span class="cm">/*
         기존 방식
         $dummies
             .receive(on: DispatchQueue.main)
             // 데이터 변경시마다 동작
             .sink(receiveValue: { (changedDummies: [DummyData]) in
                 print("changedDummies: \(changedDummies.count)")
                 
                 // sink는 메인스레드에서 동작해서 Dispatch안해도된다
                 self.myTableView.reloadData()
             })
             .store(in: &amp;subscriptions)
         */</span>
        
        <span class="c1">// 2초 뒤에 더미데이터 10개 추가</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">execute</span><span class="p">:</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">dummies</span> <span class="o">+=</span> <span class="kt">DummyData</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        <span class="c1">// self.myTableView.delegate = self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>결국 Combine 데이터 변경되었을 때 즉 Publisher가 들어올 때 바로 tableview의 dataSource도 설정하고, 바로 데이터를 꽂아줄 수 있다. 하지만 지금 customItems() 형태가 DummyData로 고정되어있기 때문에 제네릭으로 변환하는 포스팅을 작성할 예정이다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[테이블뷰 콤바인 커스텀 데이터 소스 지난 시간에 Combine을 통해 List를 보여주었는데 이번 포스트에서는 Combine에서 구독을 통해 들어오는 데이터 바로 DataSource로 연결하는 방법을 해보자. 클로저에 대한 개념을 알아야 이해하기 쉽다. CustomCombineDataSource.swift // // CustomCombineDataSource.swift // UITableViewTutorial // // Created by 김동현 on 5/15/25. // import UIKit class CustomCombineDataSource: NSObject, UITableViewDataSource { // 멤버 변수 var dataList: [DummyData] = [] override init() { super.init() } // MARK: - Combine 이벤트로 들어온 데이터랑 테이블뷰랑 연결시켜주는 지점 /// 변경된 데이터를 받아서 테이블뷰에 적용한다 /// - Parameters: /// - updatedDataList: 외부에서 변경된 Combine Publisher로 들어온 데이터를 내 DataSource가 가진 data로 변경하기 위한 매개변수 /// - tableView: 리로드 대상 테이블뷰 func pushDataList(_ updatedDataList: [DummyData], to tableView: UITableView) { tableView.dataSource = self self.dataList = updatedDataList tableView.reloadData() } // MARK: - 테이블뷰 데이터 소스 관련(변경이 된 데이터를 데이터소스로 넘겨받아서 reloadData를 하는 목적 /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dataList.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let cellData: DummyData = dataList[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body cell.detailTextLabel?.numberOfLines = 0 return cell } } 커스텀 데이터소스를 만든다. 멤버변수로 데이터리스트를 보유하도록 하자. 지금은 DummyData이지만 다음 포스팅에서 제네릭으로 변경할 예정이다. DataSource에서 변경이 된 데이터와 테이블뷰 리로드를 위한 테이블뷰 접근을 관리하기 위해 pushDataList()를 만들어주자. 그리고 기존 ViewController에서 관리하던 UITableViewDataSource 관련 프로토콜 로직을 CustomCombineDataSource로 그대로 옮겨준다. 왜냐하면 원래 dataSource의 주요 역할이 어떤 셀의 종류를 보여줄지, 리스트 개수가 몇개일지를 관여하기 때문이다. 즉 기존 ViewController의 비즈니스 로직을 CustomDataSource로 옮긴 것이다. 이제 CustomDataSource를 만들었으니 적용하기 위해 클로저를 만들어주자. UITableView+Combine.swift // // UITableView+Combine.swift // UITableViewTutorial // // Created by 김동현 on 5/15/25. // import UIKit import Combine // MARK: - Sink 정의를 보면 매개변수로 (Self.Output) -&gt; Void) 형태의 클로저를 받는다. 이 형태를 만족하는 로직 함수를 만들자. // public func sink(receiveValue: @escaping ((Self.Output) -&gt; Void)) -&gt; AnyCancellable extension UITableView { // 고차함수 - 클로저를 매개변수로 가지거나 반환을 가지는 함수 자체 // (Self.Output) -&gt; Void) // ([DummyData]) -&gt; Void // 데이터소스 바인딩 func customItems() -&gt; ([DummyData]) -&gt; Void { let dataSource = CustomCombineDataSource() return { (updatedDateLisst: [DummyData]) in dataSource.pushDataList(updatedDateLisst, to: self) // 리로드 } } } 기존 ViewController에서 sink로 받는 것을 보면 제네릭 형태인데 Sink로 이벤트(Publisker)가 들어온 데이터를 매개변수로 가지고 반환이 없는 형태의 클로저이다. (Self.Output) -&gt; Void) 이 (Self.Output) -&gt; Void) 형태로 반환을 만족하는 함수를 만들어주자. 지금은 들어오는 형태가 [DummyData] 이므로 func customItems() -&gt; ([DummyData]) -&gt; Void로 해주면 된다. SInk를 통해 들어오는게 [DummyData]로 들어오게 되고 return { input in } 에 input 부분으로 들어오게 된다. 그럼 pushDataList를 통해 변경이 된 이벤트를 나자신에게 넣어준다. CombineListViewController.swift // // CombineListViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/13/25. // import UIKit import Combine class CombineListViewController: UIViewController { // Combine 메모리 처리를 위해 생성 var subscriptions = Set&lt;AnyCancellable&gt;() // Published를 하게 되면 dummies 데이터가 추가나 값 변경시 이벤트를 받을 수 있다. @Published var dummies: [DummyData] = [] @IBOutlet weak var myTableView: UITableView! override func viewDidLoad() { super.viewDidLoad() configureTableView() /* - sink는 @Published가 수정된 스레드에서 실행된다 - 그래서 Published변수 수정시 메인 스레드에서 수정해주자 - @Published 값을 메인 스레드에서 수정하든, 백그라운드에서 수정하든, .receive(on: .main)만 붙이면 sink는 메인에서 실행되고reloadData()도 안전하게 실행된다 */ // MARK: - 기존의 데이터를 받는 거를 CombineListViewController에서 다했더라면 이제는 customDataSource으로 따로 뺴두고, 로직은 extension으로 빼서 처리를 한 것이다. // $ 붙이면 데이터 이벤트를 받을 수 있는 상태가 됨 // sink는 구독하는 것이다. // AnyCancellable 구독한다고 한다. // store: 구독했던거에 대한 메모리 참조가 들어오게 되는데 이를 관리하기 위해 subscriptions에 넣어준다. $dummies .receive(on: DispatchQueue.main) .sink(receiveValue: self.myTableView.customItems()) .store(in: &amp;subscriptions) /* 기존 방식 $dummies .receive(on: DispatchQueue.main) // 데이터 변경시마다 동작 .sink(receiveValue: { (changedDummies: [DummyData]) in print("changedDummies: \(changedDummies.count)") // sink는 메인스레드에서 동작해서 Dispatch안해도된다 self.myTableView.reloadData() }) .store(in: &amp;subscriptions) */ // 2초 뒤에 더미데이터 10개 추가 DispatchQueue.global().asyncAfter(deadline: .now() + 2, execute: { self.dummies += DummyData.getDumies(10) }) } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CodeCell.self, forCellReuseIdentifier: CodeCell.reuseIdentifier) // self.myTableView.delegate = self } } 결국 Combine 데이터 변경되었을 때 즉 Publisher가 들어올 때 바로 tableview의 dataSource도 설정하고, 바로 데이터를 꽂아줄 수 있다. 하지만 지금 customItems() 형태가 DummyData로 고정되어있기 때문에 제네릭으로 변환하는 포스팅을 작성할 예정이다.]]></summary></entry><entry><title type="html">[Swift] Closure</title><link href="http://localhost:4000/Swift-closure/" rel="alternate" type="text/html" title="[Swift] Closure" /><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><id>http://localhost:4000/%5BSwift%5D-closure</id><content type="html" xml:base="http://localhost:4000/Swift-closure/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="클로저">클로저</h2>

<p>클로저 표현식</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="p">{(</span><span class="n">parameters</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">returnType</span> <span class="k">in</span>
    <span class="n">실행구문</span>
 <span class="p">}</span>
</code></pre></div></div>

<p>클로저 종류</p>
<ul>
  <li>Named Closure = 함수</li>
  <li>Unnamed Closure</li>
</ul>

<h2 id="클로저는-argument-label을-사용하지-않는다"><strong>클로저는 Argument Label을 사용하지 않는다.</strong></h2>

<ul>
  <li>클로저는 둘다 포함하지만 보통 Unnamed Closure를 말한다.</li>
  <li>클로저도 익명이긴 하지만 함수이기 때문에, 함수형 프로그래밍이 가능하다.</li>
  <li>Swift의 함수와 클로저는 <strong>1급 객체(First-Class Citizen)</strong>로 동작한다.</li>
</ul>

<p>1급 객체</p>
<ul>
  <li>프로그래밍 언어에서 값처럼 다룰 수 있는 객체를 의미한다.</li>
  <li>1등 시민처럼, 많은 권한을 부여 받은 것</li>
</ul>

<p>권한</p>
<ul>
  <li>변수 또는 상수에 <code class="language-plaintext highlighter-rouge">함수/클로저</code>를 담을 수 있다.</li>
  <li>인자(파라미터)로 <code class="language-plaintext highlighter-rouge">함수/클로저</code>를 전달할 수 있다.</li>
  <li>반환값(리턴벨류)으로 <code class="language-plaintext highlighter-rouge">함수/클로저</code>를 전달할 수 있다.</li>
</ul>

<p>클로저와 함수 차이</p>
<ul>
  <li>클로저는 상위 스코프 변수 캡처 가능</li>
  <li>함수는 캡처 기본 제공 x</li>
</ul>

<p>용도</p>
<ul>
  <li>클로저 - 일회성 로직 전달(ex. 콜백)</li>
  <li>함수 - 명시적 로직 분리</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">doSomething</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">closuredoSomething</span> <span class="o">=</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">)</span> <span class="p">}</span>



<span class="kd">func</span> <span class="nf">doSomething2</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"hello world </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">closuredoSomething2</span> <span class="o">=</span> <span class="p">{</span> <span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="k">in</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"hello world </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">closuredoSomething22</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span> <span class="o">=</span> <span class="p">{</span> <span class="n">name</span> <span class="k">in</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">doSomething3</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">name</span>
<span class="p">}</span>
<span class="k">let</span> <span class="nv">closuredoSomethihg3</span><span class="p">:</span> <span class="p">(</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">=</span> <span class="p">{</span> <span class="n">name</span> <span class="k">in</span>
    <span class="k">return</span> <span class="n">name</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">doSomething4</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">())</span> <span class="p">{</span>
    <span class="nf">closure</span><span class="p">()</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">closuredoSomethihg4</span><span class="p">:</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="p">()</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="s">"test"</span><span class="p">)</span>
<span class="p">}</span>


<span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">Main</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// doSomething()</span>
        <span class="c1">// closuredoSomething()</span>
        <span class="nf">doSomething2</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"인덱스"</span><span class="p">)</span>
        <span class="nf">closuredoSomething2</span><span class="p">(</span><span class="s">"인덱스2"</span><span class="p">)</span>
        
        <span class="nf">doSomething4</span><span class="p">(</span><span class="nv">closure</span><span class="p">:</span> <span class="n">closuredoSomethihg4</span><span class="p">)</span>
        
        <span class="c1">// MARK: - 마지막 매개변수가 클로저이면 후행 클로저를 사용할 수 있다.</span>
        <span class="n">doSomething4</span> <span class="p">{</span>
            <span class="nf">closuredoSomethihg4</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>## reference</p>

<p>- https://babbab2.tistory.com/81</p>]]></content><author><name>Dong Hyeon</name></author><category term="Swift" /><summary type="html"><![CDATA[클로저 클로저 표현식 {(parameters) -&gt; returnType in 실행구문 } 클로저 종류 Named Closure = 함수 Unnamed Closure 클로저는 Argument Label을 사용하지 않는다. 클로저는 둘다 포함하지만 보통 Unnamed Closure를 말한다. 클로저도 익명이긴 하지만 함수이기 때문에, 함수형 프로그래밍이 가능하다. Swift의 함수와 클로저는 1급 객체(First-Class Citizen)로 동작한다. 1급 객체 프로그래밍 언어에서 값처럼 다룰 수 있는 객체를 의미한다. 1등 시민처럼, 많은 권한을 부여 받은 것 권한 변수 또는 상수에 함수/클로저를 담을 수 있다. 인자(파라미터)로 함수/클로저를 전달할 수 있다. 반환값(리턴벨류)으로 함수/클로저를 전달할 수 있다. 클로저와 함수 차이 클로저는 상위 스코프 변수 캡처 가능 함수는 캡처 기본 제공 x 용도 클로저 - 일회성 로직 전달(ex. 콜백) 함수 - 명시적 로직 분리 func doSomething() { print("hello world") } let closuredoSomething = { print("hello world") } func doSomething2(name: String) { print("hello world \(name)") } let closuredoSomething2 = { (name: String) -&gt; Void in print("hello world \(name)") } let closuredoSomething22: (String) -&gt; Void = { name in print("hello world") } func doSomething3(name: String) -&gt; String { return name } let closuredoSomethihg3: (String) -&gt; String = { name in return name } func doSomething4(closure: () -&gt; ()) { closure() } let closuredoSomethihg4: () -&gt; () = { print("test") } @main struct Main { static func main() { // doSomething() // closuredoSomething() doSomething2(name: "인덱스") closuredoSomething2("인덱스2") doSomething4(closure: closuredoSomethihg4) // MARK: - 마지막 매개변수가 클로저이면 후행 클로저를 사용할 수 있다. doSomething4 { closuredoSomethihg4() } } } ## reference - https://babbab2.tistory.com/81]]></summary></entry><entry><title type="html">[Recommendation System] 1. 추천시스템 소개</title><link href="http://localhost:4000/Recommendation-System-Section1/" rel="alternate" type="text/html" title="[Recommendation System] 1. 추천시스템 소개" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BRecommendation%20System%5D-Section1</id><content type="html" xml:base="http://localhost:4000/Recommendation-System-Section1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="추천-시스템이란">추천 시스템이란</h1>
<p>추천 시스템이란 사용자의 과거 행동 데이터를 바탕으로 사용자에게 필요한 정보나 제품을 제시하는 시스템이다.</p>

<h1 id="추천-시스템의-여러-기술">추천 시스템의 여러 기술</h1>
<ul>
  <li>협업 필터링(Collaborative Filtering)</li>
  <li>내용 기반 필터링(Content-Based Filtering)</li>
  <li>지식 기반 필터링(Knowledge-Based Filtering)</li>
  <li>딥러닝(Deep Learning)</li>
  <li>하이브리드 필터링(협업필터링 &amp; 딥러닝)</li>
</ul>

<h1 id="11-협업-필터링-collaborative-filtering">1.1 협업 필터링 (Collaborative Filtering)</h1>
<p>구매 및 소비한 제품에 대한 소비자의 평가 패턴이 비슷한 집단 속에서 서로 접하지 않은 제품을 추천하는 기술이다.<br />
한계 - 소비자의 평가정보를 구하기 어렵다 ex)신규/휴먼 고객<br />
해결책 - 구매가 아니라 클릭, 체류시간으로 간접적인 데이터로 협업 필터링 가능</p>

<h1 id="12-내용-기반-필터링content-based-filtering">1.2 내용 기반 필터링(Content-Based Filtering)</h1>
<p>제품의 내용을 분석해서 추천하는 기술이다.</p>

<h1 id="14-지식-기반-필터링knowledge-based-filtering">1.4 지식 기반 필터링(Knowledge-Based Filtering)</h1>
<p>특정 분야 전문가의 도움을 받아서 그 분야에 대한 전체적인 지식 구조를 만들어서 활용하는 방법이다.</p>

<h1 id="15-딥러닝deep-learning">1.5 딥러닝(Deep Learning)</h1>
<p>AI 알고리즘 중 현재 가장 많이 사용되는 딥러닝 방법이다.</p>

<h1 id="16-하이브리드-필터링협업필터링--딥러닝">1.6 하이브리드 필터링(협업필터링 &amp; 딥러닝)</h1>
<p>두가지 이상의 알고리즘 혼합을 통한 하이브리드 형태이다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="Recommendation System" /><summary type="html"><![CDATA[추천 시스템이란 추천 시스템이란 사용자의 과거 행동 데이터를 바탕으로 사용자에게 필요한 정보나 제품을 제시하는 시스템이다. 추천 시스템의 여러 기술 협업 필터링(Collaborative Filtering) 내용 기반 필터링(Content-Based Filtering) 지식 기반 필터링(Knowledge-Based Filtering) 딥러닝(Deep Learning) 하이브리드 필터링(협업필터링 &amp; 딥러닝) 1.1 협업 필터링 (Collaborative Filtering) 구매 및 소비한 제품에 대한 소비자의 평가 패턴이 비슷한 집단 속에서 서로 접하지 않은 제품을 추천하는 기술이다. 한계 - 소비자의 평가정보를 구하기 어렵다 ex)신규/휴먼 고객 해결책 - 구매가 아니라 클릭, 체류시간으로 간접적인 데이터로 협업 필터링 가능 1.2 내용 기반 필터링(Content-Based Filtering) 제품의 내용을 분석해서 추천하는 기술이다. 1.4 지식 기반 필터링(Knowledge-Based Filtering) 특정 분야 전문가의 도움을 받아서 그 분야에 대한 전체적인 지식 구조를 만들어서 활용하는 방법이다. 1.5 딥러닝(Deep Learning) AI 알고리즘 중 현재 가장 많이 사용되는 딥러닝 방법이다. 1.6 하이브리드 필터링(협업필터링 &amp; 딥러닝) 두가지 이상의 알고리즘 혼합을 통한 하이브리드 형태이다.]]></summary></entry><entry><title type="html">[Docker] Docker?</title><link href="http://localhost:4000/Docker-docker1/" rel="alternate" type="text/html" title="[Docker] Docker?" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BDocker%5D-docker1</id><content type="html" xml:base="http://localhost:4000/Docker-docker1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="docker">Docker</h2>
<p>이식성 - 명령어 한 줄로 어떤 컴퓨터에서든 동일한 환경설정이 가능해 에러를 피할 수 있다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="Docker" /><summary type="html"><![CDATA[Docker 이식성 - 명령어 한 줄로 어떤 컴퓨터에서든 동일한 환경설정이 가능해 에러를 피할 수 있다.]]></summary></entry><entry><title type="html">[CodeLounge] Admob</title><link href="http://localhost:4000/CodeLounge-Admob/" rel="alternate" type="text/html" title="[CodeLounge] Admob" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BCodeLounge%5D-Admob</id><content type="html" xml:base="http://localhost:4000/CodeLounge-Admob/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="swiftui에-admob-광고-적용하기">SwiftUI에 Admob 광고 적용하기</h2>

<h2 id="1-admob-설정-및-테스트-광고-id">1. Admob 설정 및 테스트 광고 ID</h2>

<h3 id="httpsadmobgooglecomv2home">https://admob.google.com/v2/home</h3>

<ul>
  <li>Admob 계정 생성(필수)</li>
  <li>애플 앱스토어 등록(선택)
    <ul>
      <li>어플을 앱스토어에 등록 후 Admob 작업을 진행하는 게 훨 씬 수월하다.</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514222826541.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223016444.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223225011.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223435839.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223505826.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223554014.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223724779.png" alt="이미지" width="100%" /><br />
ca-app-pub-xxxxx와 같은 형태의 App ID가 발급된다.</p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223858027.png" alt="이미지" width="100%" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SKAdNetworkItems - IDFA 없이도 광고 성과 추적 (Apple 정책 대응)</span>
<span class="c1">// NSUserTrackingUsageDescription - 사용자에게 추적 허용 요청 팝업 표시</span>
<span class="c1">// requestTrackingAuthorization() - 실제로 권한 요청하는 코드</span>
<span class="c1">// 기타 옵션들 - 광고 관련 기능(예: SKOverlay 등) 자동 지원 목적</span>

<span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">GADApplicationIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ca</span><span class="o">-</span><span class="n">app</span><span class="o">-</span><span class="n">pub</span><span class="o">-</span><span class="n">xxxxxxxxxxxxxxxx</span><span class="o">~</span><span class="n">yyyyyyyyyy</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkItems</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">cstr6suwn9</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4</span><span class="n">fzdc2evr5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4</span><span class="n">pfyvq9l8r</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">2</span><span class="n">fnua5tdw4</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ydx93a7ass</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">5</span><span class="n">a6flpkh64</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">p78axxw29g</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v72qych5uu</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ludvb6z3bs</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">cp8zw746q7</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">sh42y64q3</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">c6k4g5qg8m</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">s39g8k73mm</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">qy4746246</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">f38h382jlk</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">hs6bdukanm</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v4nxqhlyqp</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">wzmmz9fp6w</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">yclnxrl5pm</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">t38b2kh725</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">7</span><span class="n">ug5zh24hu</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">gta9lk7p23</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">vutu7akeur</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">y5ghdn5j9k</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">n6fk4nfna4</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v9wttpbfk9</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">n38lu8286q</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">47</span><span class="n">vhws6wlr</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">kbd757ywx3</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">9</span><span class="n">t245vhmpl</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">eh6m2bh4zr</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">a2p9lx4jpn</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">22</span><span class="n">mmun2rn5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4468</span><span class="n">km3ulz</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">2</span><span class="n">u9pt9hc89</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">8</span><span class="n">s468mfl3y</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">klf5c3l5u5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ppxm28t8ap</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ecpz2srf59</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">uw77j35x4d</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">pwa73g5rt2</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">mlmmfzh3r3</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">578</span><span class="n">prtvx9j</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4</span><span class="n">dzt52r2t5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">e5fvkxwrpn</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">8</span><span class="n">c4e2ghe7u</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">zq492l623r</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">rd42ekr43</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">qcr597p9d</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>발급된 App ID를 Info.plist에 추가한다.</p>

<h2 id="2-google-mobile-ads-설치spm">2. Google Mobile Ads 설치(SPM)</h2>

<ol>
  <li>Xcode -&gt; File -&gt; Add Package</li>
  <li>입력 URL
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> https://github.com/googleads/swift-package-manager-google-mobile-ads.git
</code></pre></div>    </div>
  </li>
  <li>버전: 최신 선택</li>
  <li>메인 앱 타겟만 체크 -&gt; Extension이 포함된 앱이더라도, 메인 앱에만 적용이 가능하다고 한다.</li>
</ol>

<h2 id="3-appdelegate설정광고-초기화">3. AppDelegate설정(광고 초기화)</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// AppDelegate.swift</span>
<span class="kd">import</span> <span class="kt">GoogleMobileAds</span>

<span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
                     <span class="n">didFinishLaunchingWithOptions</span> <span class="nv">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIApplication</span><span class="o">.</span><span class="kt">LaunchOptionsKey</span> <span class="p">:</span> <span class="kt">Any</span><span class="p">]?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
		<span class="kt">MobileAds</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">start</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// 추가</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://royzero.tistory.com/entry/SwiftUI-AdMob-적용하기</li>
  <li>https://velog.io/@heejin62/SwiftUI-앱에-AdMob-적용하기-근데-이제-Trouble-Shooting을-곁들인</li>
  <li>https://developers.google.com/admob/ios/test-ads?hl=ko</li>
  <li>https://actumn.tistory.com/99</li>
  <li>https://developers.google.com/admob/ios/privacy/strategies?hl=ko#skadnetwork</li>
  <li>https://dev-apple.tistory.com/30</li>
  <li>https://developers.google.com/admob/ios/test-ads?hl=ko#swift</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CodeLounge" /><summary type="html"><![CDATA[SwiftUI에 Admob 광고 적용하기 1. Admob 설정 및 테스트 광고 ID https://admob.google.com/v2/home Admob 계정 생성(필수) 애플 앱스토어 등록(선택) 어플을 앱스토어에 등록 후 Admob 작업을 진행하는 게 훨 씬 수월하다. ca-app-pub-xxxxx와 같은 형태의 App ID가 발급된다. // SKAdNetworkItems - IDFA 없이도 광고 성과 추적 (Apple 정책 대응) // NSUserTrackingUsageDescription - 사용자에게 추적 허용 요청 팝업 표시 // requestTrackingAuthorization() - 실제로 권한 요청하는 코드 // 기타 옵션들 - 광고 관련 기능(예: SKOverlay 등) 자동 지원 목적 &lt;key&gt;GADApplicationIdentifier&lt;/key&gt; &lt;string&gt;ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy&lt;/string&gt; &lt;key&gt;SKAdNetworkItems&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;cstr6suwn9.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4fzdc2evr5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4pfyvq9l8r.skadnetwork&lt;/string&gt; &lt;/dict &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;2fnua5tdw4.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ydx93a7ass.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;5a6flpkh64.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;p78axxw29g.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;v72qych5uu.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ludvb6z3bs.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;cp8zw746q7.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3sh42y64q3.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;c6k4g5qg8m.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;s39g8k73mm.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3qy4746246.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;f38h382jlk.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;hs6bdukanm.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;v4nxqhlyqp.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;wzmmz9fp6w.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;yclnxrl5pm.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;t38b2kh725.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;7ug5zh24hu.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;gta9lk7p23.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;vutu7akeur.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;y5ghdn5j9k.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;n6fk4nfna4.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;v9wttpbfk9.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;n38lu8286q.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;47vhws6wlr.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;kbd757ywx3.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;9t245vhmpl.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;eh6m2bh4zr.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;a2p9lx4jpn.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;22mmun2rn5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4468km3ulz.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;2u9pt9hc89.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;8s468mfl3y.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;klf5c3l5u5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ppxm28t8ap.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ecpz2srf59.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;uw77j35x4d.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;pwa73g5rt2.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;mlmmfzh3r3.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;578prtvx9j.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4dzt52r2t5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;e5fvkxwrpn.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;8c4e2ghe7u.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;zq492l623r.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3rd42ekr43.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3qcr597p9d.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;/array&gt; 발급된 App ID를 Info.plist에 추가한다. 2. Google Mobile Ads 설치(SPM) Xcode -&gt; File -&gt; Add Package 입력 URL https://github.com/googleads/swift-package-manager-google-mobile-ads.git 버전: 최신 선택 메인 앱 타겟만 체크 -&gt; Extension이 포함된 앱이더라도, 메인 앱에만 적용이 가능하다고 한다. 3. AppDelegate설정(광고 초기화) // AppDelegate.swift import GoogleMobileAds class AppDelegate: NSObject, UIApplicationDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&gt; Bool { MobileAds.shared.start(completionHandler: nil) // 추가 return true } } Reference https://royzero.tistory.com/entry/SwiftUI-AdMob-적용하기 https://velog.io/@heejin62/SwiftUI-앱에-AdMob-적용하기-근데-이제-Trouble-Shooting을-곁들인 https://developers.google.com/admob/ios/test-ads?hl=ko https://actumn.tistory.com/99 https://developers.google.com/admob/ios/privacy/strategies?hl=ko#skadnetwork https://dev-apple.tistory.com/30 https://developers.google.com/admob/ios/test-ads?hl=ko#swift]]></summary></entry><entry><title type="html">[Xcode] 프로젝트 개발 환경 세팅 자동화</title><link href="http://localhost:4000/Xcode-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85-%EC%9E%90%EB%8F%99%ED%99%94/" rel="alternate" type="text/html" title="[Xcode] 프로젝트 개발 환경 세팅 자동화" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94</id><content type="html" xml:base="http://localhost:4000/Xcode-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD-%EC%84%B8%ED%8C%85-%EC%9E%90%EB%8F%99%ED%99%94/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="1-프로젝트-개발-환경-자동화-배경">1. 프로젝트 개발 환경 자동화 배경</h2>
<p>팀 프로젝트르를 진행하면서 *.xcconfig, *.plist와 와 같은 숨겨야 하는 파일들이 생기게 된다. 이러한 파일들은 .gitignore에 추가하여 Git에 포함하지 않도록 한다. 이러한 Git의 관리를 받지 않는 파일은 팀원간 파일 공유를 수작업으로 진행해야 한다. 초기에는 카톡으로 주고 받았는데 수정하고 공유하는 과정이 매번 번거로웠다. 팀원에게 공유하는 것을 까먹게 되면 서로 다른 환경 속에서 프로젝트를 빌드, 개발하는 불상사가 발생할 수 있다.</p>

<h2 id="2-개발-환경-세팅을-한줄로-끝내는-명령어를-완성해보자">2. 개발 환경 세팅을 한줄로 끝내는 명령어를 완성해보자</h2>
<h3 id="필요-기능">필요 기능</h3>
<ol>
  <li>private files 다운로드</li>
  <li>Homebrew 설치 자동화</li>
  <li>fastlane 설치 인증서 다운로드</li>
  <li>모든 작업 통합</li>
  <li>make로 명령어 실행</li>
</ol>

<h3 id="1-private-files-다운로드">1. private files 다운로드</h3>
<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515011923853.png" alt="이미지" width="100%" /><br />
우선 Private Repository를 만들어준다.</p>

<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515012312124.png" alt="이미지" width="100%" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"# CodeLounge-Private"</span> <span class="o">&gt;&gt;</span> README.md
git init
git add README.md
git commit <span class="nt">-m</span> <span class="s2">"first commit"</span>
git branch <span class="nt">-M</span> main
git remote add origin https://github.com/team-GitDeulida/CodeLounge-Private.git
git push <span class="nt">-u</span> origin main
</code></pre></div></div>

<p>VScode에서 프로젝트 생성후 방금 만든 레포지토리를 설정한다.</p>

<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515012700826.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515012737339.png" alt="이미지" width="100%" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Config.xcconfig파일 생성 후 Hello World 작성</span>
<span class="n">git</span> <span class="n">add</span> <span class="o">.</span>
<span class="n">git</span> <span class="n">commit</span> <span class="o">-</span><span class="n">m</span> <span class="s">"upload"</span>
<span class="n">git</span> <span class="n">push</span> <span class="n">origin</span> <span class="n">main</span>
</code></pre></div></div>

<p>Config.xcconfig 테스트 파일을 생성하고 push 해준다. 그러면 레포지토리에서 Config.xcconfig가 업로드된것이 보인다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Makefile
</span>
<span class="c"># -----------------------------
# 📁 Privates 파일 다운로드 설정
# -----------------------------
</span>
<span class="c"># GitHub에서 private 파일을 가져올 repository 경로 (팀명/저장소명/브랜치)
</span><span class="nv">Private_Repository</span><span class="o">=</span>team-GitDeulida/CodeLounge-Private/main

<span class="c"># GitHub Raw URL 기본 경로
</span><span class="nv">BASE_URL</span><span class="o">=</span>https://raw.githubusercontent.com/<span class="p">$(</span>Private_Repository<span class="p">)</span>

<span class="c"># ✅ 파일 다운로드 함수 정의
# $(1): 디렉토리 경로
# $(2): GitHub Access Token
# $(3): 파일 이름
</span><span class="k">define</span> <span class="nv">download_file</span>
	<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">$(1)</span>
	<span class="nl">curl -H "Authorization</span><span class="o">:</span> <span class="nf">token $(2)" -o $(1)/$(3) $(BASE_URL)/$(1)/$(3)</span>
<span class="k">endef</span>

<span class="c"># 🏁 진입 지점: download-privates 명령 실행 시 동작
</span><span class="nl">download-privates</span><span class="o">:</span>

	<span class="c"># .env 파일이 없으면 GitHub Access Token을 사용자에게 입력받아 저장
</span>	<span class="c"># Get GitHub Access Token
</span>	<span class="err">@if</span> <span class="err">[</span> <span class="err">!</span> <span class="err">-f</span> <span class="err">.env</span> <span class="err">];</span> <span class="err">then</span> <span class="err">\</span>
		<span class="nl">read -p "Enter your GitHub access token</span><span class="o">:</span> <span class="nf">" token; </span>\
<span class="nf">		echo "GITHUB_ACCESS_TOKEN=$$token" &gt; .env; </span>\
<span class="nf">	else </span>\
<span class="nf">		/bin/bash -c "source .env; make _download-privates"; </span>\
<span class="nf">		exit 0; </span>\
<span class="nf">	fi</span>

	<span class="c"># 실제 다운로드 수행
</span>	<span class="err">make</span> <span class="err">_download-privates</span>

<span class="c"># 🔽 내부 명령: 다운로드 로직 수행
</span><span class="nl">_download-privates</span><span class="o">:</span>

	<span class="c"># .env 파일에서 GITHUB_ACCESS_TOKEN을 읽어 환경 변수로 설정
</span>	<span class="nf">$(</span><span class="nb">eval</span> <span class="nb">export</span> <span class="p">$(</span>shell <span class="nb">cat</span> .env<span class="p">))</span>

	<span class="c"># 레포지토리의 최상위 디렉토리에서 Config.xcconfig 다운로드
</span>	<span class="nf">$(</span><span class="nb">call</span> download_file,.,<span class="nv">$$</span>GITHUB_ACCESS_TOKEN,Config.xcconfig<span class="p">)</span>
</code></pre></div></div>

<p>최초 코드를 실행하면 .env파일이 없기 때문에 GitHub Access Token을 입력하라고 요청한다. 입력해주자. GitHub Access Token은 Personal access tokens -&gt; Fine-grained tokens에서 생성할 수 있다.</p>

<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515014155060.png" alt="이미지" width="100%" /><br />
실제 프로젝트에서 실행시 Config.xcconfig 파일이 다운로드된것을 확인할 수 있다. 이를 활용하여 여러 파일을 Private 레포지토리에 두고 make 명령어 한줄로 ignore 파일들을 가져올 수 있다.</p>

<h3 id="2-homebrew-설치-자동화">2. Homebrew 설치 자동화</h3>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># -------------------------
# Homebrew 설치 확인 및 설치
# -------------------------
</span>
<span class="nl">install_homebrew</span><span class="o">:</span>
	<span class="p">@</span><span class="k">if</span> <span class="o">!</span> <span class="nb">command</span> <span class="nt">-v</span> brew <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span> <span class="se">\</span>
		<span class="nb">echo</span> <span class="s2">"Homebrew가 설치되어 있지 않습니다. 설치를 진행합니다..."</span><span class="p">;</span> <span class="se">\</span>
		/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="p">$$(</span><span class="s2">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</span><span class="p">)</span><span class="s2">"</span><span class="p">;</span> <span class="se">\</span>
	<span class="k">else</span> <span class="se">\</span>
		<span class="nb">echo</span> <span class="s2">"Homebrew가 이미 설치되어 있습니다."</span><span class="p">;</span> <span class="se">\</span>
	<span class="k">fi</span>
</code></pre></div></div>

<h3 id="3-fastlane-및-인증서-관련-작업추가작업-진행예정">3. fastlane 및 인증서 관련 작업(추가작업 진행예정)</h3>

<p>이제 Private 레포지토리에 프로비저닝 프로파일을 저장해두고 팀원이 쉽게 가져올 수 있게 해보자.<br />
<img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515020058955.png" alt="이미지" width="100%" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fastlane</span> <span class="n">match</span> <span class="kd">init</span>         <span class="c1">// git 선택 -&gt; Private레포지토리 주소 입력	</span>
<span class="n">fastlane</span> <span class="n">match</span> <span class="n">appstore</span>	    <span class="c1">// Apple Id 입력 -&gt; 앱 번들Id 입력</span>
<span class="n">fastlane</span> <span class="n">match</span> <span class="n">development</span>	<span class="c1">// Apple Id 입력 -&gt; 앱 번들Id 입력</span>
</code></pre></div></div>

<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515020458828.png" alt="이미지" width="100%" /><br />
이렇게 하게 되면 Private 레포지토리에 master브랜치가 생성되고 프로비저닝 관련 파일들이 생성된다.</p>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># -------------------------
# fastlane 및 인증서 관련 작업
# -------------------------
</span>
<span class="c"># Automatically manage signing 체크 해제해야함!!
# Homebrew로 fastlane 설치 (설치되어 있으면 업데이트)
</span><span class="nl">install_fastlane</span><span class="o">:</span> <span class="nf">install_homebrew</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Updating Homebrew..."</span>
	<span class="p">@</span>brew update
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Installing fastlane via Homebrew..."</span>
	<span class="p">@</span>brew <span class="nb">install </span>fastlane <span class="o">||</span> <span class="nb">true</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"✅ fastlane 설치 완료 (Homebrew 사용)"</span>
	
<span class="c"># 인증서 다운로드 (readonly 모드)
</span><span class="nl">fetch_certs</span><span class="o">:</span> <span class="nf">install_fastlane</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Fetching development certificates..."</span>
	<span class="p">@</span>fastlane match development <span class="nt">--readonly</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Fetching appstore certificates..."</span>
	<span class="p">@</span>fastlane match appstore <span class="nt">--readonly</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"✅ 인증서 가져오기 완료"</span>
</code></pre></div></div>

<p>fastlane match로 인증서를 다운로드 한 후, Xcode에서 Automatically manage signing”이 꺼져 있다면, 해당 팀 ID와 Bundle ID에 맞는 프로비저닝 프로파일을 수동으로 선택할 수 있다.</p>

<h2 id="최종-makefile">최종 Makefile</h2>

<div class="language-makefile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 터미널에 make 입력시 실행됨
</span><span class="nv">.DEFAULT_GOAL</span> <span class="o">:=</span> all

<span class="c"># -----------------------------
# 📁 Privates 파일 다운로드 설정
# -----------------------------
</span>
<span class="c"># GitHub에서 private 파일을 가져올 repository 경로 (팀명/저장소명/브랜치)
</span><span class="nv">Private_Repository</span><span class="o">=</span>team-GitDeulida/CodeLounge-Private/main

<span class="c"># GitHub Raw URL 기본 경로
</span><span class="nv">BASE_URL</span><span class="o">=</span>https://raw.githubusercontent.com/<span class="p">$(</span>Private_Repository<span class="p">)</span>

<span class="c"># ✅ 파일 다운로드 함수 정의
# $(1): 디렉토리 경로
# $(2): GitHub Access Token
# $(3): 파일 이름
</span><span class="k">define</span> <span class="nv">download_file</span>
	<span class="err">mkdir</span> <span class="err">-p</span> <span class="err">$(1)</span>
	<span class="nl">curl -H "Authorization</span><span class="o">:</span> <span class="nf">token $(2)" -o $(1)/$(3) $(BASE_URL)/$(1)/$(3)</span>
<span class="k">endef</span>

<span class="c"># 🏁 진입 지점: download-privates 명령 실행 시 동작
</span><span class="nl">download-privates</span><span class="o">:</span>

	<span class="c"># .env 파일이 없으면 GitHub Access Token을 사용자에게 입력받아 저장
</span>	<span class="c"># Get GitHub Access Token
</span>	<span class="err">@if</span> <span class="err">[</span> <span class="err">!</span> <span class="err">-f</span> <span class="err">.env</span> <span class="err">];</span> <span class="err">then</span> <span class="err">\</span>
		<span class="nl">read -p "Enter your GitHub access token</span><span class="o">:</span> <span class="nf">" token; </span>\
<span class="nf">		echo "GITHUB_ACCESS_TOKEN=$$token" &gt; .env; </span>\
<span class="nf">	else </span>\
<span class="nf">		echo "Homebrew가 이미 설치되어 있습니다."; </span>\
<span class="nf">	fi</span>

	<span class="c"># 실제 다운로드 수행
</span>	<span class="err">make</span> <span class="err">_download-privates</span>

<span class="c"># 🔽 내부 명령: 다운로드 로직 수행
</span><span class="nl">_download-privates</span><span class="o">:</span>

	<span class="c"># .env 파일에서 GITHUB_ACCESS_TOKEN을 읽어 환경 변수로 설정
</span>	<span class="nf">$(</span><span class="nb">eval</span> <span class="nb">export</span> <span class="p">$(</span>shell <span class="nb">cat</span> .env<span class="p">))</span>

	<span class="c"># 레포지토리의 최상위 디렉토리에서 Config.xcconfig 다운로드
</span>	<span class="nf">$(</span><span class="nb">call</span> download_file,.,<span class="nv">$$</span>GITHUB_ACCESS_TOKEN,Config.xcconfig<span class="p">)</span>

<span class="c"># -------------------------
# Homebrew 설치 확인 및 설치
# -------------------------
</span>
<span class="nl">install_homebrew</span><span class="o">:</span>
	<span class="p">@</span><span class="k">if</span> <span class="o">!</span> <span class="nb">command</span> <span class="nt">-v</span> brew <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span> <span class="se">\</span>
		<span class="nb">echo</span> <span class="s2">"Homebrew가 설치되어 있지 않습니다. 설치를 진행합니다..."</span><span class="p">;</span> <span class="se">\</span>
		/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="p">$$(</span><span class="s2">curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh</span><span class="p">)</span><span class="s2">"</span><span class="p">;</span> <span class="se">\</span>
	<span class="k">else</span> <span class="se">\</span>
		<span class="nb">echo</span> <span class="s2">"Homebrew가 이미 설치되어 있습니다."</span><span class="p">;</span> <span class="se">\</span>
	<span class="k">fi</span>

<span class="c"># -------------------------
# fastlane 및 인증서 관련 작업
# -------------------------
</span>
<span class="c"># Automatically manage signing 체크 해제해야함!!
# Homebrew로 fastlane 설치 (설치되어 있으면 업데이트)
</span><span class="nl">install_fastlane</span><span class="o">:</span> <span class="nf">install_homebrew</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Updating Homebrew..."</span>
	<span class="p">@</span>brew update
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Installing fastlane via Homebrew..."</span>
	<span class="p">@</span>brew <span class="nb">install </span>fastlane <span class="o">||</span> <span class="nb">true</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"✅ fastlane 설치 완료 (Homebrew 사용)"</span>
	
<span class="c"># 인증서 다운로드 (readonly 모드)
</span><span class="nl">fetch_certs</span><span class="o">:</span> <span class="nf">install_fastlane</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Fetching development certificates..."</span>
	<span class="p">@</span>fastlane match development <span class="nt">--readonly</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"Fetching appstore certificates..."</span>
	<span class="p">@</span>fastlane match appstore <span class="nt">--readonly</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"✅ 인증서 가져오기 완료"</span>

<span class="c"># -------------------------
# 통합 기본 타겟: 필요한 경우 Private 파일과 인증서 모두 다운로드
# -------------------------
</span><span class="nl">all</span><span class="o">:</span> <span class="nf">download-privates fetch_certs</span>
	<span class="p">@</span><span class="nb">echo</span> <span class="s2">"✅ 모든 작업 완료"</span>
</code></pre></div></div>

<p>실행시 Private 레포지토리 2~3번 주소 요청시 입력해준다.<br />
그리고 Xcode 재실행하면 사진처럼 프로비저닝 파일이 보이게 된다.</p>

<p><img src="/assets/img/2025-05-14-%5BXcode%5D-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B0%9C%EB%B0%9C%20%ED%99%98%EA%B2%BD%20%EC%84%B8%ED%8C%85%20%EC%9E%90%EB%8F%99%ED%99%94/image-20250515022743846.png" alt="이미지" width="100%" /><br />
이제 팀원이 프로비저닝 관련 해서 문제가 생긴다면 make명령어 실행해주세요~ 라고 멋있게 말해주면 된다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="Recommendation System" /><summary type="html"><![CDATA[1. 프로젝트 개발 환경 자동화 배경 팀 프로젝트르를 진행하면서 *.xcconfig, *.plist와 와 같은 숨겨야 하는 파일들이 생기게 된다. 이러한 파일들은 .gitignore에 추가하여 Git에 포함하지 않도록 한다. 이러한 Git의 관리를 받지 않는 파일은 팀원간 파일 공유를 수작업으로 진행해야 한다. 초기에는 카톡으로 주고 받았는데 수정하고 공유하는 과정이 매번 번거로웠다. 팀원에게 공유하는 것을 까먹게 되면 서로 다른 환경 속에서 프로젝트를 빌드, 개발하는 불상사가 발생할 수 있다. 2. 개발 환경 세팅을 한줄로 끝내는 명령어를 완성해보자 필요 기능 private files 다운로드 Homebrew 설치 자동화 fastlane 설치 인증서 다운로드 모든 작업 통합 make로 명령어 실행 1. private files 다운로드 우선 Private Repository를 만들어준다. echo "# CodeLounge-Private" &gt;&gt; README.md git init git add README.md git commit -m "first commit" git branch -M main git remote add origin https://github.com/team-GitDeulida/CodeLounge-Private.git git push -u origin main VScode에서 프로젝트 생성후 방금 만든 레포지토리를 설정한다. // Config.xcconfig파일 생성 후 Hello World 작성 git add . git commit -m "upload" git push origin main Config.xcconfig 테스트 파일을 생성하고 push 해준다. 그러면 레포지토리에서 Config.xcconfig가 업로드된것이 보인다. # Makefile # ----------------------------- # 📁 Privates 파일 다운로드 설정 # ----------------------------- # GitHub에서 private 파일을 가져올 repository 경로 (팀명/저장소명/브랜치) Private_Repository=team-GitDeulida/CodeLounge-Private/main # GitHub Raw URL 기본 경로 BASE_URL=https://raw.githubusercontent.com/$(Private_Repository) # ✅ 파일 다운로드 함수 정의 # $(1): 디렉토리 경로 # $(2): GitHub Access Token # $(3): 파일 이름 define download_file mkdir -p $(1) curl -H "Authorization: token $(2)" -o $(1)/$(3) $(BASE_URL)/$(1)/$(3) endef # 🏁 진입 지점: download-privates 명령 실행 시 동작 download-privates: # .env 파일이 없으면 GitHub Access Token을 사용자에게 입력받아 저장 # Get GitHub Access Token @if [ ! -f .env ]; then \ read -p "Enter your GitHub access token: " token; \ echo "GITHUB_ACCESS_TOKEN=$$token" &gt; .env; \ else \ /bin/bash -c "source .env; make _download-privates"; \ exit 0; \ fi # 실제 다운로드 수행 make _download-privates # 🔽 내부 명령: 다운로드 로직 수행 _download-privates: # .env 파일에서 GITHUB_ACCESS_TOKEN을 읽어 환경 변수로 설정 $(eval export $(shell cat .env)) # 레포지토리의 최상위 디렉토리에서 Config.xcconfig 다운로드 $(call download_file,.,$$GITHUB_ACCESS_TOKEN,Config.xcconfig) 최초 코드를 실행하면 .env파일이 없기 때문에 GitHub Access Token을 입력하라고 요청한다. 입력해주자. GitHub Access Token은 Personal access tokens -&gt; Fine-grained tokens에서 생성할 수 있다. 실제 프로젝트에서 실행시 Config.xcconfig 파일이 다운로드된것을 확인할 수 있다. 이를 활용하여 여러 파일을 Private 레포지토리에 두고 make 명령어 한줄로 ignore 파일들을 가져올 수 있다. 2. Homebrew 설치 자동화 # ------------------------- # Homebrew 설치 확인 및 설치 # ------------------------- install_homebrew: @if ! command -v brew &gt;/dev/null 2&gt;&amp;1; then \ echo "Homebrew가 설치되어 있지 않습니다. 설치를 진행합니다..."; \ /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; \ else \ echo "Homebrew가 이미 설치되어 있습니다."; \ fi 3. fastlane 및 인증서 관련 작업(추가작업 진행예정) 이제 Private 레포지토리에 프로비저닝 프로파일을 저장해두고 팀원이 쉽게 가져올 수 있게 해보자. fastlane match init // git 선택 -&gt; Private레포지토리 주소 입력 fastlane match appstore // Apple Id 입력 -&gt; 앱 번들Id 입력 fastlane match development // Apple Id 입력 -&gt; 앱 번들Id 입력 이렇게 하게 되면 Private 레포지토리에 master브랜치가 생성되고 프로비저닝 관련 파일들이 생성된다. # ------------------------- # fastlane 및 인증서 관련 작업 # ------------------------- # Automatically manage signing 체크 해제해야함!! # Homebrew로 fastlane 설치 (설치되어 있으면 업데이트) install_fastlane: install_homebrew @echo "Updating Homebrew..." @brew update @echo "Installing fastlane via Homebrew..." @brew install fastlane || true @echo "✅ fastlane 설치 완료 (Homebrew 사용)" # 인증서 다운로드 (readonly 모드) fetch_certs: install_fastlane @echo "Fetching development certificates..." @fastlane match development --readonly @echo "Fetching appstore certificates..." @fastlane match appstore --readonly @echo "✅ 인증서 가져오기 완료" fastlane match로 인증서를 다운로드 한 후, Xcode에서 Automatically manage signing”이 꺼져 있다면, 해당 팀 ID와 Bundle ID에 맞는 프로비저닝 프로파일을 수동으로 선택할 수 있다. 최종 Makefile # 터미널에 make 입력시 실행됨 .DEFAULT_GOAL := all # ----------------------------- # 📁 Privates 파일 다운로드 설정 # ----------------------------- # GitHub에서 private 파일을 가져올 repository 경로 (팀명/저장소명/브랜치) Private_Repository=team-GitDeulida/CodeLounge-Private/main # GitHub Raw URL 기본 경로 BASE_URL=https://raw.githubusercontent.com/$(Private_Repository) # ✅ 파일 다운로드 함수 정의 # $(1): 디렉토리 경로 # $(2): GitHub Access Token # $(3): 파일 이름 define download_file mkdir -p $(1) curl -H "Authorization: token $(2)" -o $(1)/$(3) $(BASE_URL)/$(1)/$(3) endef # 🏁 진입 지점: download-privates 명령 실행 시 동작 download-privates: # .env 파일이 없으면 GitHub Access Token을 사용자에게 입력받아 저장 # Get GitHub Access Token @if [ ! -f .env ]; then \ read -p "Enter your GitHub access token: " token; \ echo "GITHUB_ACCESS_TOKEN=$$token" &gt; .env; \ else \ echo "Homebrew가 이미 설치되어 있습니다."; \ fi # 실제 다운로드 수행 make _download-privates # 🔽 내부 명령: 다운로드 로직 수행 _download-privates: # .env 파일에서 GITHUB_ACCESS_TOKEN을 읽어 환경 변수로 설정 $(eval export $(shell cat .env)) # 레포지토리의 최상위 디렉토리에서 Config.xcconfig 다운로드 $(call download_file,.,$$GITHUB_ACCESS_TOKEN,Config.xcconfig) # ------------------------- # Homebrew 설치 확인 및 설치 # ------------------------- install_homebrew: @if ! command -v brew &gt;/dev/null 2&gt;&amp;1; then \ echo "Homebrew가 설치되어 있지 않습니다. 설치를 진행합니다..."; \ /bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; \ else \ echo "Homebrew가 이미 설치되어 있습니다."; \ fi # ------------------------- # fastlane 및 인증서 관련 작업 # ------------------------- # Automatically manage signing 체크 해제해야함!! # Homebrew로 fastlane 설치 (설치되어 있으면 업데이트) install_fastlane: install_homebrew @echo "Updating Homebrew..." @brew update @echo "Installing fastlane via Homebrew..." @brew install fastlane || true @echo "✅ fastlane 설치 완료 (Homebrew 사용)" # 인증서 다운로드 (readonly 모드) fetch_certs: install_fastlane @echo "Fetching development certificates..." @fastlane match development --readonly @echo "Fetching appstore certificates..." @fastlane match appstore --readonly @echo "✅ 인증서 가져오기 완료" # ------------------------- # 통합 기본 타겟: 필요한 경우 Private 파일과 인증서 모두 다운로드 # ------------------------- all: download-privates fetch_certs @echo "✅ 모든 작업 완료" 실행시 Private 레포지토리 2~3번 주소 요청시 입력해준다. 그리고 Xcode 재실행하면 사진처럼 프로비저닝 파일이 보이게 된다. 이제 팀원이 프로비저닝 관련 해서 문제가 생긴다면 make명령어 실행해주세요~ 라고 멋있게 말해주면 된다.]]></summary></entry><entry><title type="html">[TableView] 9. 테이블뷰 콤바인 적용</title><link href="http://localhost:4000/UIKit-tableView9/" rel="alternate" type="text/html" title="[TableView] 9. 테이블뷰 콤바인 적용" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView9</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView9/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="테이블뷰-콤바인-적용">테이블뷰 콤바인 적용</h2>

<h2 id="combine이란">Combine이란?</h2>

<ul>
  <li>iOS 13 이상부터 지원한다.</li>
  <li>데이터를 리액티브 흐름으로 만들어서 데이터가 변경되면 이벤트 처리를 받을 수 있도록 설정할 수 있는데 보내는쪽을Publisher,  받는쪽을 Subscribe라고 한다.</li>
  <li>기존 테이블뷰에서는 데이터를 dataSource에서 처리하였는데 ViewController에서 데이터 변경이 일어나면 dataSource와 연결시켜서 바로 테이블뷰에 보여줄 수 있다.</li>
</ul>

<p><img src="/assets/img/2025-05-13-%5BUIKit%5D-tableView9/image-20250513181643441.png" alt="이미지" width="70%" /><br />
우선 CombineList.storyboard라는 이름으로 파일을 생성하고 테이블뷰를 만들어준다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Combine</span>

<span class="kd">class</span> <span class="kt">CombineListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// Combine 메모리 처리를 위해 생성</span>
    <span class="k">var</span> <span class="nv">subscriptions</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">AnyCancellable</span><span class="o">&gt;</span><span class="p">()</span>
    
    <span class="c1">// Published를 하게 되면 dummies 데이터가 추가나 값 변경시 이벤트를 받을 수 있다.</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">dummies</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>

   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
        
        
        <span class="cm">/*
        - sink는 @Published가 수정된 스레드에서 실행된다
        - 그래서 Published변수 수정시 메인 스레드에서 수정해주자
        - @Published 값을 메인 스레드에서 수정하든, 백그라운드에서 수정하든, .receive(on: .main)만 붙이면 sink는 메인에서 실행되고reloadData()도 안전하게 실행된다
         */</span>
        
        <span class="c1">// $ 붙이면 데이터 이벤트를 받을 수 있는 상태가 됨</span>
        <span class="c1">// sink는 구독하는 것이다.</span>
        <span class="c1">// AnyCancellable 구독한다고 한다.</span>
        <span class="c1">// store: 구독했던거에 대한 메모리 참조가 들어오게 되는데 이를 관리하기 위해 subscriptions에 넣어준다.</span>
        <span class="n">$dummies</span>
            <span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="p">)</span>
            <span class="c1">// 데이터 변경시마다 동작</span>
            <span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">changedDummies</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">])</span> <span class="k">in</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"changedDummies: </span><span class="se">\(</span><span class="n">changedDummies</span><span class="o">.</span><span class="n">count</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                
                <span class="c1">// sink는 메인스레드에서 동작해서 Dispatch안해도된다</span>
                <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">subscriptions</span><span class="p">)</span>
        
        <span class="c1">// 2초 뒤에 더미데이터 10개 추가</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">execute</span><span class="p">:</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">dummies</span> <span class="o">+=</span> <span class="kt">DummyData</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
<span class="c1">//        self.myTableView.delegate = self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CombineListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>

    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummies</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>

    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>

        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">dummies</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>

        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>

        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>

        <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 연결할 CombineListViewController를 만들어준다.</p>

<p><img src="/assets/img/2025-05-13-%5BUIKit%5D-tableView9/image-20250513183738608.png" alt="이미지" width="70%" /><br />
Main.storyboard에서 Combine버튼 생성 후 reference 생성하고 Stoayboard이름과 Referenced ID도 추가해준다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[테이블뷰 콤바인 적용 Combine이란? iOS 13 이상부터 지원한다. 데이터를 리액티브 흐름으로 만들어서 데이터가 변경되면 이벤트 처리를 받을 수 있도록 설정할 수 있는데 보내는쪽을Publisher, 받는쪽을 Subscribe라고 한다. 기존 테이블뷰에서는 데이터를 dataSource에서 처리하였는데 ViewController에서 데이터 변경이 일어나면 dataSource와 연결시켜서 바로 테이블뷰에 보여줄 수 있다. 우선 CombineList.storyboard라는 이름으로 파일을 생성하고 테이블뷰를 만들어준다. import UIKit import Combine class CombineListViewController: UIViewController { // Combine 메모리 처리를 위해 생성 var subscriptions = Set&lt;AnyCancellable&gt;() // Published를 하게 되면 dummies 데이터가 추가나 값 변경시 이벤트를 받을 수 있다. @Published var dummies: [DummyData] = [] @IBOutlet weak var myTableView: UITableView! override func viewDidLoad() { super.viewDidLoad() configureTableView() /* - sink는 @Published가 수정된 스레드에서 실행된다 - 그래서 Published변수 수정시 메인 스레드에서 수정해주자 - @Published 값을 메인 스레드에서 수정하든, 백그라운드에서 수정하든, .receive(on: .main)만 붙이면 sink는 메인에서 실행되고reloadData()도 안전하게 실행된다 */ // $ 붙이면 데이터 이벤트를 받을 수 있는 상태가 됨 // sink는 구독하는 것이다. // AnyCancellable 구독한다고 한다. // store: 구독했던거에 대한 메모리 참조가 들어오게 되는데 이를 관리하기 위해 subscriptions에 넣어준다. $dummies .receive(on: DispatchQueue.main) // 데이터 변경시마다 동작 .sink(receiveValue: { (changedDummies: [DummyData]) in print("changedDummies: \(changedDummies.count)") // sink는 메인스레드에서 동작해서 Dispatch안해도된다 self.myTableView.reloadData() }) .store(in: &amp;subscriptions) // 2초 뒤에 더미데이터 10개 추가 DispatchQueue.global().asyncAfter(deadline: .now() + 2, execute: { self.dummies += DummyData.getDumies(10) }) } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CodeCell.self, forCellReuseIdentifier: CodeCell.reuseIdentifier) self.myTableView.dataSource = self // self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CombineListViewController: UITableViewDataSource { /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummies.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let cellData: DummyData = dummies[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body cell.detailTextLabel?.numberOfLines = 0 return cell } } 그리고 연결할 CombineListViewController를 만들어준다. Main.storyboard에서 Combine버튼 생성 후 reference 생성하고 Stoayboard이름과 Referenced ID도 추가해준다.]]></summary></entry><entry><title type="html">[TableView] 7. UITableViewCell 확장을 통해 셀 식별자 코드 재사용</title><link href="http://localhost:4000/UIKit-tableView7/" rel="alternate" type="text/html" title="[TableView] 7. UITableViewCell 확장을 통해 셀 식별자 코드 재사용" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView7</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView7/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="코드-재사용">코드 재사용</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
<span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
<span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
    <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>

    <span class="c1">// [guard let] 방식</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"StoryBoardCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>

    <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>

    <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>

    <span class="c1">/// 셀의 서브 타이틀 설정</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>

    <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<p>지금까지 재사용되는 셀은 고유한 식별자를 상수로 넣어주는데 보통 클래스 명을 써주었다. <br />
프로그래밍 하면서 상수가 있는 부분은 최대한 피하는게 좋다. 이유는 상수를 재사용할 수도 있고 오타가 발생할 수 있기 때문이다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 변수로</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"StoryboardCell"</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그래서 셀에서 static으로 상수로 추가해둔다. 이 방법도 충분하지만 조금 더 편하게 할 수 있다.<br />
UITableviewCell 자체가 전부 reuseIdentifier라는 static변수를 가질 수 있게 하면 더 편리해질 수 있다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>참고로 확장에서는 저장 속성을 정의할 수 없음으로 계산 속성으로 변경해준다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UICollectionView</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 이 방식도 UItableView, UICollectionVIew각각마다 만들어줘야하는 불편함이 있다.  반복을 더 줄일 수 있다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ReuseIdentifiable 채택</span>
<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="p">,</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>프로토콜을 활용해서 해결하자. 프로토콜 이름은 아래 컨벤션을 따르면 좋다.<br />
https://www.swift.org/documentation/api-design-guidelines/<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이를 활용하면 Nib파일을 등록할때도 적용할 수 있다. NibCell을 상수로 사용하지 않고 프로토로 해결해보자.<br />
<br /></p>

<h2 id="최종-코드">최종 코드</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">protocol</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">),</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UITableViewCell</span><span class="p">:</span> <span class="kt">Nibbed</span><span class="p">,</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{}</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="c1">// let cellNib = UINib(nibName: "NibCell", bundle: nil)</span>
        
        <span class="c1">// self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell")</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[코드 재사용 /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } 지금까지 재사용되는 셀은 고유한 식별자를 상수로 넣어주는데 보통 클래스 명을 써주었다. 프로그래밍 하면서 상수가 있는 부분은 최대한 피하는게 좋다. 이유는 상수를 재사용할 수도 있고 오타가 발생할 수 있기 때문이다. class StoryboardCell: UITableViewCell { // 변수로 static let reuseIdentifier: String = "StoryboardCell" @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } 그래서 셀에서 static으로 상수로 추가해둔다. 이 방법도 충분하지만 조금 더 편하게 할 수 있다. UITableviewCell 자체가 전부 reuseIdentifier라는 static변수를 가질 수 있게 하면 더 편리해질 수 있다. extension UITableViewCell { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } 참고로 확장에서는 저장 속성을 정의할 수 없음으로 계산 속성으로 변경해준다. extension UITableViewCell { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } extension UICollectionView { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } 하지만 이 방식도 UItableView, UICollectionVIew각각마다 만들어줘야하는 불편함이 있다. 반복을 더 줄일 수 있다. protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } // ReuseIdentifiable 채택 class StoryboardCell: UITableViewCell, ReuseIdentifiable { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } 프로토콜을 활용해서 해결하자. 프로토콜 이름은 아래 컨벤션을 따르면 좋다. https://www.swift.org/documentation/api-design-guidelines/ class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } 이를 활용하면 Nib파일을 등록할때도 적용할 수 있다. NibCell을 상수로 사용하지 않고 프로토로 해결해보자. 최종 코드 import UIKit protocol Nibbed { static var uinib: UINib { get } } extension Nibbed { static var uinib: UINib { return UINib(nibName: String(describing: Self.self), bundle: nil) } } protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } extension UITableViewCell: Nibbed, ReuseIdentifiable {} class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. // let cellNib = UINib(nibName: "NibCell", bundle: nil) // self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) self.myTableView.dataSource = self self.myTableView.delegate = self } }]]></summary></entry><entry><title type="html">[TableView] 8. 데이터 소스 이해, 따로써보기</title><link href="http://localhost:4000/UIKit-tableView8/" rel="alternate" type="text/html" title="[TableView] 8. 데이터 소스 이해, 따로써보기" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView8</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView8/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="8-데이터-소스-이해-따로써보기">8. 데이터 소스 이해, 따로써보기</h2>

<h2 id="테이블-뷰-만들기list">테이블 뷰 만들기(List)</h2>

<ul>
  <li>테이블뷰 컨트롤러로 만들기(기능이 한정적) vs 일반 뷰 컨트롤러로 만들기</li>
  <li>우리는 일반 뷰 컨트롤러를 주로 쓰자</li>
  <li>구성
    <ul>
      <li>
        <p>데이터 소스 - 데이터와 연관, 셀의 종류를 정하기, 보여줄 셀의 개수가 몇개인지 정하기</p>

        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{}</span>
        
  <span class="kd">extension</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
      <span class="c1">/// 섹션 내의 셀 개수를 반환하는 메서드</span>
      <span class="c1">/// - Parameters:</span>
      <span class="c1">///   - tableView: 데이터를 표시할 테이블 뷰</span>
      <span class="c1">///   - section: 현재 섹션 인덱스</span>
      <span class="c1">/// - Returns: 해당 섹션에 표시할 행(row)의 개수</span>
      <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
          <span class="c1">// 예: return items.count</span>
      <span class="p">}</span>
            
      <span class="c1">/// 각 행에 표시될 셀을 반환하는 메서드</span>
      <span class="c1">/// - Parameters:</span>
      <span class="c1">///   - tableView: 셀을 표시할 테이블 뷰</span>
      <span class="c1">///   - indexPath: 현재 행의 위치 정보 (섹션, row)</span>
      <span class="c1">/// - Returns: 구성된 UITableViewCell 객체</span>
      <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
          <span class="c1">// 예:</span>
          <span class="c1">// let cell = tableView.dequeueReusableCell(withIdentifier: "CellIdentifier", for: indexPath)</span>
          <span class="c1">// cell.textLabel?.text = items[indexPath.row]</span>
          <span class="c1">// return cell</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>델리겟 - 이벤트 처리(특정 셀 선택) = 테이블뷰에 대한 액션</li>
      <li>셀 - 테이블뷰에 들어가는 알맹이</li>
    </ul>
  </li>
</ul>

<h2 id="datasource를-따로-빼보기">DataSource를 따로 빼보기</h2>

<h3 id="기존-코드">기존 코드</h3>

<p>Cell 파일은 수정 x</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">),</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UITableViewCell</span><span class="p">:</span> <span class="kt">Nibbed</span> <span class="p">{}</span>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">:</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span> <span class="p">}</span>
<span class="kd">extension</span> <span class="kt">UITableViewHeaderFooterView</span> <span class="p">:</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{}</span>

<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 변수로</span>
    <span class="c1">//static let reuseIdentifier: String = "StoryboardCell"</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="수정된-코드">수정된 코드</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MyDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dataSource</span><span class="p">:</span> <span class="kt">MyDataSource</span> <span class="o">=</span> <span class="kt">MyDataSource</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="niblistviewcontroller도-mydatasource로수정-가능">NibListViewController도 MyDataSource로수정 가능</h2>

<h3 id="기존-코드-1">기존 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="c1">// let cellNib = UINib(nibName: "NibCell", bundle: nil)</span>
        
        <span class="c1">// self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell")</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="수정된-코드-1">수정된 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MyDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="kd">enum</span> <span class="kt">ListType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">storyboard</span>
        <span class="k">case</span> <span class="n">nib</span>
        <span class="k">case</span> <span class="n">code</span>
        <span class="k">case</span> <span class="n">cellConfig</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">listType</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">listType</span> <span class="o">=</span> <span class="n">type</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 셀을 등록하는 소스 관련</span>
    <span class="c1">/// 셀을 등록</span>
    <span class="c1">/// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다</span>
    <span class="c1">/// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell")</span>
    <span class="c1">/// - Parameter tableView: 등록할 테이블뷰</span>
    <span class="kd">func</span> <span class="nf">registerCells</span><span class="p">(</span><span class="n">with</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: -  테이블뷰 데이터 소스 관련</span>
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        
        <span class="k">switch</span> <span class="n">listType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">storyboard</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">nib</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">code</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">cellConfig</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dataSource</span><span class="p">:</span> <span class="kt">MyDataSource</span> <span class="o">=</span> <span class="kt">MyDataSource</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">nib</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier)</span>
        
        <span class="c1">// 셀을 등록</span>
        <span class="k">self</span><span class="o">.</span><span class="n">dataSource</span><span class="o">.</span><span class="nf">registerCells</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cellconfigurationlistviewcontroller도-mydatasource로수정-가능">CellConfigurationListViewController도 MyDataSource로수정 가능</h2>

<h3 id="기존-코드-2">기존 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="c1">// cell.titleLabel.text = cellData.title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="c1">// cell.bodyLabel.text = cellData.body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        
        <span class="c1">// 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="수정된-코드-2">수정된 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MyDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="kd">enum</span> <span class="kt">ListType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">storyboard</span>
        <span class="k">case</span> <span class="n">nib</span>
        <span class="k">case</span> <span class="n">code</span>
        <span class="k">case</span> <span class="n">cellConfig</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">listType</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">listType</span> <span class="o">=</span> <span class="n">type</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 셀을 등록하는 소스 관련</span>
    <span class="c1">/// 셀을 등록</span>
    <span class="c1">/// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다</span>
    <span class="c1">/// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell")</span>
    <span class="c1">/// - Parameter tableView: 등록할 테이블뷰</span>
    <span class="kd">func</span> <span class="nf">registerCells</span><span class="p">(</span><span class="n">with</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">/// Nib 방식으로 만든 셀(NibCell.xib 파일)을 테이블 뷰에 등록</span>
        <span class="c1">/// - NibCell.uinib : UINib(nibName: "NibCell", bundle: nil) 을 반환</span>
        <span class="c1">/// - NibCell.reuseIdentifier : "NibCell" 문자열을 반환 (보통 클래스명을 기반으로 자동 생성)</span>
        <span class="c1">/// → 이후 dequeue 시 이 identifier로 셀을 재사용할 수 있게 됨</span>
        <span class="c1">/// tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier)</span>
        
        <span class="c1">/// 코드로만 구현된 셀 클래스를 테이블 뷰에 등록</span>
        <span class="c1">/// - CellConfigTableViewCell.self : 클래스 자체를 등록</span>
        <span class="c1">/// - reuseIdentifier : "CellConfigTableViewCell" 문자열</span>
        <span class="c1">/// → register(class:) 방식은 .xib 없이 순수 코드로 UI 구성한 셀에 사용</span>
        <span class="c1">/// tableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: CellConfigTableViewCell.reuseIdentifier)</span>
        <span class="k">switch</span> <span class="n">listType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">nib</span><span class="p">:</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
            
        <span class="k">case</span> <span class="o">.</span><span class="nv">code</span><span class="p">:</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
            
        <span class="k">case</span> <span class="o">.</span><span class="nv">cellConfig</span><span class="p">:</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
            
        <span class="k">case</span> <span class="o">.</span><span class="nv">storyboard</span><span class="p">:</span>
            <span class="c1">// ❌ 스토리보드는 register 필요 없음!</span>
            <span class="k">break</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: -  테이블뷰 데이터 소스 관련</span>
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        
        <span class="k">switch</span> <span class="n">listType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">storyboard</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">nib</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">code</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">cellConfig</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="k">var</span> <span class="nv">dataSource</span><span class="p">:</span> <span class="kt">MyDataSource</span> <span class="o">=</span> <span class="kt">MyDataSource</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">cellConfig</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
<span class="c1">//        self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell")</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">dataSource</span><span class="o">.</span><span class="nf">registerCells</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[8. 데이터 소스 이해, 따로써보기 테이블 뷰 만들기(List) 테이블뷰 컨트롤러로 만들기(기능이 한정적) vs 일반 뷰 컨트롤러로 만들기 우리는 일반 뷰 컨트롤러를 주로 쓰자 구성 데이터 소스 - 데이터와 연관, 셀의 종류를 정하기, 보여줄 셀의 개수가 몇개인지 정하기 class viewController: UIViewController {} extension viewController: UITableViewDataSource { /// 섹션 내의 셀 개수를 반환하는 메서드 /// - Parameters: /// - tableView: 데이터를 표시할 테이블 뷰 /// - section: 현재 섹션 인덱스 /// - Returns: 해당 섹션에 표시할 행(row)의 개수 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { // 예: return items.count } /// 각 행에 표시될 셀을 반환하는 메서드 /// - Parameters: /// - tableView: 셀을 표시할 테이블 뷰 /// - indexPath: 현재 행의 위치 정보 (섹션, row) /// - Returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { // 예: // let cell = tableView.dequeueReusableCell(withIdentifier: "CellIdentifier", for: indexPath) // cell.textLabel?.text = items[indexPath.row] // return cell } } 델리겟 - 이벤트 처리(특정 셀 선택) = 테이블뷰에 대한 액션 셀 - 테이블뷰에 들어가는 알맹이 DataSource를 따로 빼보기 기존 코드 Cell 파일은 수정 x protocol Nibbed { static var uinib: UINib { get } } extension Nibbed { static var uinib: UINib { return UINib(nibName: String(describing: Self.self), bundle: nil) } } protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } extension UITableViewCell: Nibbed {} extension UITableViewCell : ReuseIdentifiable { } extension UITableViewHeaderFooterView : ReuseIdentifiable {} class StoryboardCell: UITableViewCell { // 변수로 //static let reuseIdentifier: String = "StoryboardCell" @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } import UIKit class StoryboardListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) override func viewDidLoad() { super.viewDidLoad() self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension StoryboardListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension StoryboardListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 수정된 코드 import UIKit class MyDataSource: NSObject, UITableViewDataSource { var dummySections: [DummySection] = DummySection.getDummies() override init() { super.init() } /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } } import UIKit class StoryboardListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dataSource: MyDataSource = MyDataSource() override func viewDidLoad() { super.viewDidLoad() self.myTableView.dataSource = dataSource self.myTableView.delegate = self } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension StoryboardListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } NibListViewController도 MyDataSource로수정 가능 기존 코드 import UIKit class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. // let cellNib = UINib(nibName: "NibCell", bundle: nil) // self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension NibListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "NibCell", for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension NibListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 수정된 코드 import UIKit class MyDataSource: NSObject, UITableViewDataSource { enum ListType { case storyboard case nib case code case cellConfig } var listType: ListType = .storyboard var dummySections: [DummySection] = DummySection.getDummies() override init() { super.init() } convenience init(type: ListType = .storyboard) { self.init() self.listType = type } // MARK: - 셀을 등록하는 소스 관련 /// 셀을 등록 /// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다 /// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell") /// - Parameter tableView: 등록할 테이블뷰 func registerCells(with tableView: UITableView) { tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) } // MARK: - 테이블뷰 데이터 소스 관련 /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 switch listType { case .storyboard: guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .nib: guard let cell = tableView.dequeueReusableCell(withIdentifier: NibCell.reuseIdentifier, for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .code: guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .cellConfig: guard let cell = tableView.dequeueReusableCell(withIdentifier: CellConfigTableViewCell.reuseIdentifier, for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } } } import UIKit class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dataSource: MyDataSource = MyDataSource(type: .nib) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) // 셀을 등록 self.dataSource.registerCells(with: myTableView) self.myTableView.dataSource = dataSource self.myTableView.delegate = self } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension NibListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } CellConfigurationListViewController도 MyDataSource로수정 가능 기존 코드 import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CellConfigurationListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 // cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 // cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 // 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근 cell.title = cellData.title cell.body = cellData.body return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 수정된 코드 import UIKit class MyDataSource: NSObject, UITableViewDataSource { enum ListType { case storyboard case nib case code case cellConfig } var listType: ListType = .storyboard var dummySections: [DummySection] = DummySection.getDummies(10) override init() { super.init() } convenience init(type: ListType = .storyboard) { self.init() self.listType = type } // MARK: - 셀을 등록하는 소스 관련 /// 셀을 등록 /// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다 /// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell") /// - Parameter tableView: 등록할 테이블뷰 func registerCells(with tableView: UITableView) { /// Nib 방식으로 만든 셀(NibCell.xib 파일)을 테이블 뷰에 등록 /// - NibCell.uinib : UINib(nibName: "NibCell", bundle: nil) 을 반환 /// - NibCell.reuseIdentifier : "NibCell" 문자열을 반환 (보통 클래스명을 기반으로 자동 생성) /// → 이후 dequeue 시 이 identifier로 셀을 재사용할 수 있게 됨 /// tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) /// 코드로만 구현된 셀 클래스를 테이블 뷰에 등록 /// - CellConfigTableViewCell.self : 클래스 자체를 등록 /// - reuseIdentifier : "CellConfigTableViewCell" 문자열 /// → register(class:) 방식은 .xib 없이 순수 코드로 UI 구성한 셀에 사용 /// tableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: CellConfigTableViewCell.reuseIdentifier) switch listType { case .nib: tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) case .code: tableView.register(CodeCell.self, forCellReuseIdentifier: CodeCell.reuseIdentifier) case .cellConfig: tableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: CellConfigTableViewCell.reuseIdentifier) case .storyboard: // ❌ 스토리보드는 register 필요 없음! break } } // MARK: - 테이블뷰 데이터 소스 관련 /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 switch listType { case .storyboard: guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .nib: guard let cell = tableView.dequeueReusableCell(withIdentifier: NibCell.reuseIdentifier, for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .code: guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .cellConfig: guard let cell = tableView.dequeueReusableCell(withIdentifier: CellConfigTableViewCell.reuseIdentifier, for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } } } import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) var dataSource: MyDataSource = MyDataSource(type: .cellConfig) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 // self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.dataSource.registerCells(with: myTableView) self.myTableView.dataSource = dataSource self.myTableView.delegate = self } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 6. Cell Configuration</title><link href="http://localhost:4000/UIKit-tableView6/" rel="alternate" type="text/html" title="[TableView] 6. Cell Configuration" /><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView6</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView6/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="cell-configuration-알아보기">Cell Configuration 알아보기</h2>

<p>Cell Configuration은 iOS 14+부터 도입된 기능으로, 셀의 UI 구성과 데이터 설정을 <strong>보다 선언적으로 처리</strong>할 수 있도록 도와준다.</p>

<p>기존에는 셀마다 <code class="language-plaintext highlighter-rouge">IBOutlet</code>을 연결하거나, <code class="language-plaintext highlighter-rouge">cell.textLabel.text = ...</code> 방식으로 직접 설정했지만,  <br />
Cell Configuration은 UI와 데이터를 분리하고 <strong>설정 구조체를 통해 셀 내부 뷰를 생성 및 업데이트</strong>하는 구조다.</p>

<hr />
<h3 id="화면-구성-예시">화면 구성 예시</h3>

<p><img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160118427.png" alt="셀1" width="80%" /></p>

<ul>
  <li>테이블뷰를 스토리보드에서 추가하고, 상하좌우 제약을 0으로 설정한다</li>
</ul>

<div style="display: flex; justify-content: center; gap: 20px;">
  <img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160616153.png" alt="셀1" width="80%" />
  <img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160715945.png" alt="셀2" width="80%" />
</div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Storyboard ID</code>는 <code class="language-plaintext highlighter-rouge">CellConfigurationListViewController</code>로 지정</li>
  <li><code class="language-plaintext highlighter-rouge">Reference ID</code>도 동일하게 맞춰야 코드에서 호출 가능</li>
</ul>

<hr />

<h2 id="구성">구성</h2>

<p><code class="language-plaintext highlighter-rouge">Cell Configuration</code>을 구성하는 핵심 요소는 다음과 같다:</p>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIContentConfiguration</code></td>
      <td>데이터 설정을 위한 구조체 역할 (예: <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIContentView</code></td>
      <td>실제 UI를 그리는 뷰 (예: <code class="language-plaintext highlighter-rouge">CellConfigurationView</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UITableViewCell</code></td>
      <td>시스템이 자동으로 <code class="language-plaintext highlighter-rouge">UIContentView</code>를 삽입해주는 셀 컨테이너 (<code class="language-plaintext highlighter-rouge">CellConfigTableViewCell</code>)</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="1-mycellconfigurationswift">1. MyCellConfiguration.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">MyCellConfiguration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>

    <span class="kd">func</span> <span class="nf">makeContentView</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">UIView</span> <span class="o">&amp;</span> <span class="kt">UIContentView</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">updated</span><span class="p">(</span><span class="k">for</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UIConfigurationState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">updated</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">state</span> <span class="o">=</span> <span class="n">state</span> <span class="k">as?</span> <span class="kt">UICellConfigurationState</span><span class="p">,</span> <span class="n">state</span><span class="o">.</span><span class="n">isSelected</span> <span class="p">{</span>
            <span class="n">updated</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"선택됨: "</span> <span class="o">+</span> <span class="n">updated</span><span class="o">.</span><span class="n">title</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">updated</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>데이터(title, body)를 담고 있고, 상태(state)에 따라 동적으로 내용도 바꿀 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">makeContentView()</code>를 통해 실제 UIContentView (<code class="language-plaintext highlighter-rouge">CellConfigurationView</code>) 생성</li>
</ul>

<hr />

<h3 id="2-cellconfigurationviewswift">2. CellConfigurationView.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CellConfigurationView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">UIContentView</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">customConfiguration</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="n">newValue</span> <span class="k">as?</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
                <span class="nf">applyConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">configureUI</span><span class="p">()</span>
        <span class="nf">applyConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyConfig</span><span class="p">(</span><span class="n">_</span> <span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customConfiguration</span> <span class="o">=</span> <span class="n">config</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">title</span>
        <span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UIView</code>이자 <code class="language-plaintext highlighter-rouge">UIContentView</code>를 채택</li>
  <li>외부에서 전달받은 <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>을 적용해서 <code class="language-plaintext highlighter-rouge">UILabel</code>에 반영</li>
  <li>내부적으로 <code class="language-plaintext highlighter-rouge">titleLabel</code>, <code class="language-plaintext highlighter-rouge">bodyLabel</code>을 AutoLayout으로 배치</li>
</ul>

<hr />

<h3 id="3-cellconfigtableviewcellswift">3. CellConfigTableViewCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CellConfigTableViewCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span> <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span> <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">updateConfiguration</span><span class="p">(</span><span class="n">using</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UICellConfigurationState</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">MyCellConfiguration</span><span class="p">()</span><span class="o">.</span><span class="nf">updated</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        <span class="n">config</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">config</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentConfiguration</span> <span class="o">=</span> <span class="n">config</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">setNeedsUpdateConfiguration()</code> 호출 시 시스템이 <code class="language-plaintext highlighter-rouge">updateConfiguration(using:)</code>을 호출</li>
  <li><code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">body</code>를 가지고 <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>을 만든 뒤 <code class="language-plaintext highlighter-rouge">contentConfiguration</code>에 설정</li>
  <li>시스템은 이 설정을 보고 자동으로 <code class="language-plaintext highlighter-rouge">CellConfigurationView</code>를 생성 및 삽입</li>
</ul>

<hr />

<h3 id="4-cellconfigurationlistviewcontrollerswift">4. CellConfigurationListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">cellData</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>더미 데이터를 불러와 <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">body</code>만 할당하면 자동으로 UI가 구성된다</li>
  <li>직접적으로 <code class="language-plaintext highlighter-rouge">UILabel</code>에 접근하거나 <code class="language-plaintext highlighter-rouge">cell.subviews</code>를 조작하지 않아도 된다</li>
</ul>

<hr />

<h2 id="전체-예제-코드">전체 예제 코드</h2>

<h3 id="1-mycellconfigurationswift-1">1. MyCellConfiguration.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 커스텀 셀에 대한 설정</span>
<span class="kd">struct</span> <span class="kt">MyCellConfiguration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    
    <span class="c1">// 보여줄 화면</span>
    <span class="c1">// UIView이면서 UIContentView인 애를 반화내라</span>
    <span class="kd">func</span> <span class="nf">makeContentView</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kd">any</span> <span class="kt">UIView</span> <span class="o">&amp;</span> <span class="kt">UIContentView</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
    
    
    <span class="c1">/// 셀 상태가 변경되면 발동</span>
    <span class="c1">/// - Parameter state: 셀 상태</span>
    <span class="c1">/// - Returns: 셀 설정 자체</span>
    <span class="kd">func</span> <span class="nf">updated</span><span class="p">(</span><span class="k">for</span> <span class="nv">state</span><span class="p">:</span> <span class="kd">any</span> <span class="kt">UIConfigurationState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">state</span> <span class="o">=</span> <span class="n">state</span> <span class="k">as?</span> <span class="kt">UICellConfigurationState</span> <span class="p">{</span>
            <span class="k">var</span> <span class="nv">updatedConfig</span> <span class="o">=</span> <span class="k">self</span>
            
            <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">isSelected</span> <span class="p">{</span>
                <span class="n">updatedConfig</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"선택됨: "</span> <span class="o">+</span> <span class="n">updatedConfig</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">updatedConfig</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-cellconfigurationviewswift-1">2. CellConfigurationView.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 뷰 안에 컨텐츠 Config를 가지고 있는 뷰</span>
<span class="kd">class</span> <span class="kt">CellConfigurationView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">UIContentView</span> <span class="p">{</span>
    
    <span class="c1">// 여러 데이터를 가진 덩어리</span>
    <span class="kd">fileprivate</span> <span class="k">var</span> <span class="nv">customConfiguration</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="o">!</span>
    
    <span class="c1">// 데이터와 UI를 연결</span>
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">_</span> <span class="nv">newConfiguration</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customConfiguration</span> <span class="o">=</span> <span class="n">newConfiguration</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newConfiguration</span><span class="o">.</span><span class="n">title</span>
        <span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newConfiguration</span><span class="o">.</span><span class="n">body</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">customConfiguration</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">newConfiguration</span> <span class="o">=</span> <span class="n">newValue</span> <span class="k">as?</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
                <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">newConfiguration</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
   
    <span class="nf">init</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">configureUI</span><span class="p">()</span>
        <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemBlue</span>
        
        <span class="c1">// 타이틀 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
        
        <span class="c1">// 바디 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">bodyLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CellConfigurationView_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"오늘도 코딩"</span><span class="p">,</span> <span class="nv">body</span><span class="p">:</span> <span class="s">"바디부분"</span><span class="p">))</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<h3 id="3-cellconfigtableviewcellswift-1">3. CellConfigTableViewCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 기존 테이블뷰 셀은 데이터만 신경쓰면 됨</span>
<span class="kd">class</span> <span class="kt">CellConfigTableViewCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 데이터 변경시 UI 변경해라</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">updateConfiguration</span><span class="p">(</span><span class="n">using</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UICellConfigurationState</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">updateConfiguration</span><span class="p">(</span><span class="nv">using</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        
        <span class="k">var</span> <span class="nv">contentConfig</span> <span class="o">=</span> <span class="kt">MyCellConfiguration</span><span class="p">()</span><span class="o">.</span><span class="nf">updated</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        <span class="n">contentConfig</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">contentConfig</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentConfiguration</span> <span class="o">=</span> <span class="n">contentConfig</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CellConfigTableViewCell_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CodeCell</span><span class="p">()</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<h3 id="4-cellconfigurationlistviewcontrollerswift-1">4. CellConfigurationListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="c1">// cell.titleLabel.text = cellData.title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="c1">// cell.bodyLabel.text = cellData.body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        
        <span class="c1">// 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[Cell Configuration 알아보기 Cell Configuration은 iOS 14+부터 도입된 기능으로, 셀의 UI 구성과 데이터 설정을 보다 선언적으로 처리할 수 있도록 도와준다. 기존에는 셀마다 IBOutlet을 연결하거나, cell.textLabel.text = ... 방식으로 직접 설정했지만, Cell Configuration은 UI와 데이터를 분리하고 설정 구조체를 통해 셀 내부 뷰를 생성 및 업데이트하는 구조다. 화면 구성 예시 테이블뷰를 스토리보드에서 추가하고, 상하좌우 제약을 0으로 설정한다 Storyboard ID는 CellConfigurationListViewController로 지정 Reference ID도 동일하게 맞춰야 코드에서 호출 가능 구성 Cell Configuration을 구성하는 핵심 요소는 다음과 같다: 요소 설명 UIContentConfiguration 데이터 설정을 위한 구조체 역할 (예: MyCellConfiguration) UIContentView 실제 UI를 그리는 뷰 (예: CellConfigurationView) UITableViewCell 시스템이 자동으로 UIContentView를 삽입해주는 셀 컨테이너 (CellConfigTableViewCell) 1. MyCellConfiguration.swift struct MyCellConfiguration: UIContentConfiguration, Hashable { var title: String = "" var body: String = "" func makeContentView() -&gt; UIView &amp; UIContentView { return CellConfigurationView(config: self) } func updated(for state: UIConfigurationState) -&gt; MyCellConfiguration { var updated = self if let state = state as? UICellConfigurationState, state.isSelected { updated.title = "선택됨: " + updated.title } return updated } } 데이터(title, body)를 담고 있고, 상태(state)에 따라 동적으로 내용도 바꿀 수 있다. makeContentView()를 통해 실제 UIContentView (CellConfigurationView) 생성 2. CellConfigurationView.swift class CellConfigurationView: UIView, UIContentView { var configuration: UIContentConfiguration { get { customConfiguration } set { if let config = newValue as? MyCellConfiguration { applyConfig(config) } } } init(config: MyCellConfiguration) { super.init(frame: .zero) configureUI() applyConfig(config) } fileprivate func applyConfig(_ config: MyCellConfiguration) { self.customConfiguration = config titleLabel.text = config.title bodyLabel.text = config.body } } UIView이자 UIContentView를 채택 외부에서 전달받은 MyCellConfiguration을 적용해서 UILabel에 반영 내부적으로 titleLabel, bodyLabel을 AutoLayout으로 배치 3. CellConfigTableViewCell.swift class CellConfigTableViewCell: UITableViewCell { var title: String = "" { didSet { setNeedsUpdateConfiguration() } } var body: String = "" { didSet { setNeedsUpdateConfiguration() } } override func updateConfiguration(using state: UICellConfigurationState) { var config = MyCellConfiguration().updated(for: state) config.title = title config.body = body self.contentConfiguration = config } } setNeedsUpdateConfiguration() 호출 시 시스템이 updateConfiguration(using:)을 호출 title, body를 가지고 MyCellConfiguration을 만든 뒤 contentConfiguration에 설정 시스템은 이 설정을 보고 자동으로 CellConfigurationView를 생성 및 삽입 4. CellConfigurationListViewController.swift func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let cellData = dummySections[indexPath.section].rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } 더미 데이터를 불러와 title, body만 할당하면 자동으로 UI가 구성된다 직접적으로 UILabel에 접근하거나 cell.subviews를 조작하지 않아도 된다 전체 예제 코드 1. MyCellConfiguration.swift import UIKit // 커스텀 셀에 대한 설정 struct MyCellConfiguration: UIContentConfiguration, Hashable { var title: String = "" var body: String = "" // 보여줄 화면 // UIView이면서 UIContentView인 애를 반화내라 func makeContentView() -&gt; any UIView &amp; UIContentView { return CellConfigurationView(config: self) } /// 셀 상태가 변경되면 발동 /// - Parameter state: 셀 상태 /// - Returns: 셀 설정 자체 func updated(for state: any UIConfigurationState) -&gt; MyCellConfiguration { if let state = state as? UICellConfigurationState { var updatedConfig = self if state.isSelected { updatedConfig.title = "선택됨: " + updatedConfig.title } return updatedConfig } return self } } 2. CellConfigurationView.swift import UIKit // 뷰 안에 컨텐츠 Config를 가지고 있는 뷰 class CellConfigurationView: UIView, UIContentView { // 여러 데이터를 가진 덩어리 fileprivate var customConfiguration: MyCellConfiguration! // 데이터와 UI를 연결 fileprivate func applyConfigAndChangeUI(_ newConfiguration: MyCellConfiguration) { self.customConfiguration = newConfiguration titleLabel.text = newConfiguration.title bodyLabel.text = newConfiguration.body } var configuration: UIContentConfiguration { get { customConfiguration } set { if let newConfiguration = newValue as? MyCellConfiguration { applyConfigAndChangeUI(newConfiguration) } } } init(config: MyCellConfiguration) { super.init(frame: .zero) configureUI() applyConfigAndChangeUI(config) } lazy var titleLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨" label.numberOfLines = 1 label.textColor = .white label.font = UIFont.systemFont(ofSize: 14, weight: .bold) return label }() lazy var bodyLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨" label.numberOfLines = 0 label.textColor = .white label.font = UIFont.systemFont(ofSize: 12, weight: .regular) return label }() fileprivate func configureUI() { self.backgroundColor = .systemBlue // 타이틀 라벨 설정 self.addSubview(self.titleLabel) NSLayoutConstraint.activate([ titleLabel.topAnchor.constraint(equalTo: self.topAnchor, constant: 10), titleLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 10), titleLabel.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -10), ]) // 바디 라벨 설정 self.addSubview(self.bodyLabel) NSLayoutConstraint.activate([ bodyLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: 10), bodyLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 10), bodyLabel.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -10), bodyLabel.bottomAnchor.constraint(equalTo: self.bottomAnchor, constant: -10) ]) } required init?(coder: NSCoder) { super.init(coder: coder) } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI struct CellConfigurationView_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CellConfigurationView(config: MyCellConfiguration(title: "오늘도 코딩", body: "바디부분")).getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif 3. CellConfigTableViewCell.swift import UIKit // 기존 테이블뷰 셀은 데이터만 신경쓰면 됨 class CellConfigTableViewCell: UITableViewCell { // 데이터 변경시 UI 변경해라 var title: String = "" { didSet { setNeedsUpdateConfiguration() } } var body: String = "" { didSet { setNeedsUpdateConfiguration() } } override func updateConfiguration(using state: UICellConfigurationState) { super.updateConfiguration(using: state) var contentConfig = MyCellConfiguration().updated(for: state) contentConfig.title = title contentConfig.body = body self.contentConfiguration = contentConfig } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI struct CellConfigTableViewCell_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CodeCell().getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif 4. CellConfigurationListViewController.swift import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CellConfigurationListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 // cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 // cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 // 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근 cell.title = cellData.title cell.body = cellData.body return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry></feed>