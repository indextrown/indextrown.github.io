<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-15T07:02:34+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[TableView] 14. DiffableDataSource</title><link href="http://localhost:4000/UIKit-tableView14/" rel="alternate" type="text/html" title="[TableView] 14. DiffableDataSource" /><published>2025-06-14T00:00:00+00:00</published><updated>2025-06-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView14</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView14/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="diffabledatasource">DiffableDataSource</h2>

<p>Diffable</p>
<ul>
  <li>다른 이라는 뜻이다.</li>
  <li>아이템들간의 서로 다름을 알게 되는 것이다.</li>
  <li>애니메이션 처리가 자연스럽게 되는 데이터소스이다.</li>
</ul>

<p>datasource</p>
<ul>
  <li>cellProvider - 셀 만들기 가능하다.</li>
</ul>

<p>snapshot(사진 찍어둠)</p>
<ul>
  <li>테이블뷰 로드방식이 기존 테이블뷰와 다르다.</li>
  <li>dataSource.apply(스냅샷) -&gt; 이런 데이터를 보여줄거라고 스냅샷이라는 사진을 찍어두고 찍어둔 사진을 반영한다.</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[DiffableDataSource Diffable 다른 이라는 뜻이다. 아이템들간의 서로 다름을 알게 되는 것이다. 애니메이션 처리가 자연스럽게 되는 데이터소스이다. datasource cellProvider - 셀 만들기 가능하다. snapshot(사진 찍어둠) 테이블뷰 로드방식이 기존 테이블뷰와 다르다. dataSource.apply(스냅샷) -&gt; 이런 데이터를 보여줄거라고 스냅샷이라는 사진을 찍어두고 찍어둔 사진을 반영한다.]]></summary></entry><entry><title type="html">[CustomView] Segmented Control 커스텀 with PageViewController</title><link href="http://localhost:4000/CustomView-Segmented-Control2/" rel="alternate" type="text/html" title="[CustomView] Segmented Control 커스텀 with PageViewController" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BCustomView%5D-Segmented%20Control2</id><content type="html" xml:base="http://localhost:4000/CustomView-Segmented-Control2/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<div style="display: flex; justify-content: center; gap: 20px;">
  <img src="/assets/img/2025-05-30-%5BCustomView%5D-Segmented%20Control2/image-20250603015019716.png" alt="셀1" width="50%" />
  <img src="/assets/img/2025-05-30-%5BCustomView%5D-Segmented%20Control2/image-20250603015140369.png" alt="셀2" width="50%" />
</div>

<h1 id="uikit-세그먼-컨트롤-커스텀-사용법">UIKit 세그먼 컨트롤 커스텀 사용법</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CustomSegmentControlVC.swift</span>
<span class="c1">//  UIComponentTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 6/2/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomSegmentControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span> <span class="p">{</span>

    <span class="c1">// MARK: - UI</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">underlineLeadingConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">underlineWidthConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineHeight</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mf">4.0</span> <span class="c1">// 원하는 두께로 변경</span>

    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">setup</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="kt">Any</span><span class="p">]?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="n">items</span><span class="p">)</span>
        <span class="nf">setup</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">removeBackgroundAndDivider</span><span class="p">()</span>

        <span class="n">underlineView</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">underlineView</span><span class="p">)</span>
        
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            
        <span class="p">])</span>
        

        <span class="c1">// 초기 제약조건</span>
        <span class="k">let</span> <span class="nv">width</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">numberOfSegments</span><span class="p">)</span> <span class="p">:</span> <span class="mi">0</span>
        <span class="n">underlineLeadingConstraint</span> <span class="o">=</span> <span class="n">underlineView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">leadingAnchor</span><span class="p">)</span>
        <span class="n">underlineWidthConstraint</span> <span class="o">=</span> <span class="n">underlineView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="n">width</span><span class="p">)</span>

        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">underlineLeadingConstraint</span><span class="p">,</span>
            <span class="n">underlineWidthConstraint</span><span class="p">,</span>
            <span class="n">underlineView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">bottomAnchor</span><span class="p">),</span>
            <span class="n">underlineView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
        <span class="c1">// 항상 최신 크기/위치 반영</span>
        <span class="nf">updateUnderlinePosition</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">updateUnderlinePosition</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">width</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">numberOfSegments</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">leading</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">selectedSegmentIndex</span><span class="p">)</span> <span class="o">*</span> <span class="n">width</span>

        <span class="n">underlineWidthConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">width</span>
        <span class="n">underlineLeadingConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">leading</span>

        <span class="k">if</span> <span class="n">animated</span> <span class="p">{</span>
            <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.15</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">removeBackgroundAndDivider</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">highlighted</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="nf">setDividerImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>



<span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomSegmentControlVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">segmentedControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segment</span> <span class="o">=</span> <span class="kt">UISegmentedControl</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="s">"첫번째"</span><span class="p">,</span> <span class="s">"두번째"</span><span class="p">,</span> <span class="s">"세번째"</span><span class="p">])</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1">// 스타일 커스텀</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">gray</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">invertedSystemBackground</span><span class="p">,</span>
            <span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentTintColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">clear</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">highlighted</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setDividerImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">segment</span>
    <span class="p">}()</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">invertedSystemBackground</span>
        <span class="n">view</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">vc1</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">red</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">vc2</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">blue</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">vc3</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">green</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>
    <span class="k">var</span> <span class="nv">dataViewControllers</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIViewController</span><span class="p">]</span> <span class="p">{</span> <span class="p">[</span><span class="n">vc1</span><span class="p">,</span> <span class="n">vc2</span><span class="p">,</span> <span class="n">vc3</span><span class="p">]</span> <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIPageViewController</span><span class="p">(</span><span class="nv">transitionStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">scroll</span><span class="p">,</span> <span class="nv">navigationOrientation</span><span class="p">:</span> <span class="o">.</span><span class="n">horizontal</span><span class="p">)</span>
        <span class="n">vc</span><span class="o">.</span><span class="nf">setViewControllers</span><span class="p">([</span><span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="nv">direction</span><span class="p">:</span> <span class="o">.</span><span class="n">forward</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>

    <span class="k">var</span> <span class="nv">currentPage</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">direction</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="o">.</span><span class="kt">NavigationDirection</span> <span class="o">=</span> <span class="n">oldValue</span> <span class="o">&lt;=</span> <span class="k">self</span><span class="o">.</span><span class="n">currentPage</span> <span class="p">?</span> <span class="o">.</span><span class="nv">forward</span> <span class="p">:</span> <span class="o">.</span><span class="n">reverse</span>
            <span class="k">self</span><span class="o">.</span><span class="n">pageViewController</span><span class="o">.</span><span class="nf">setViewControllers</span><span class="p">(</span>
                <span class="p">[</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="k">self</span><span class="o">.</span><span class="n">currentPage</span><span class="p">]],</span>
                <span class="nv">direction</span><span class="p">:</span> <span class="n">direction</span><span class="p">,</span>
                <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span>
            <span class="p">)</span>
            <span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">segmentedControl</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">underlineView</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="p">)</span>

        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">80</span><span class="p">),</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">50</span><span class="p">),</span>

            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentedControl</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>

        <span class="c1">// 언더라인의 높이와 최초 위치 설정 (width, x는 viewDidLayoutSubviews에서)</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>

        <span class="n">segmentedControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">changeValue</span><span class="p">(</span><span class="nv">control</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="n">segmentedControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="nf">changeValue</span><span class="p">(</span><span class="nv">control</span><span class="p">:</span> <span class="n">segmentedControl</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLayoutSubviews</span><span class="p">()</span>
        <span class="c1">// 최초 렌더링 시 언더라인 위치 정확히 세팅</span>
        <span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="c1">// 언더라인의 y위치를 세그먼트 하단에 맞추기</span>
        <span class="k">let</span> <span class="nv">segFrame</span> <span class="o">=</span> <span class="n">segmentedControl</span><span class="o">.</span><span class="n">frame</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">maxY</span> <span class="o">-</span> <span class="mi">4</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="p">}</span>

    <span class="kd">@objc</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">changeValue</span><span class="p">(</span><span class="nv">control</span><span class="p">:</span> <span class="kt">UISegmentedControl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentPage</span> <span class="o">=</span> <span class="n">control</span><span class="o">.</span><span class="n">selectedSegmentIndex</span>
    <span class="p">}</span>

    <span class="c1">/// 언더라인 이동 (frame 연산)</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segFrame</span> <span class="o">=</span> <span class="n">segmentedControl</span><span class="o">.</span><span class="n">frame</span>
        <span class="k">let</span> <span class="nv">segmentCount</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentedControl</span><span class="o">.</span><span class="n">numberOfSegments</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">segmentWidth</span> <span class="o">=</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">segmentCount</span>
        <span class="k">let</span> <span class="nv">targetX</span> <span class="o">=</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">minX</span> <span class="o">+</span> <span class="n">segmentWidth</span> <span class="o">*</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentedControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">newFrame</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">targetX</span><span class="p">,</span>
                              <span class="nv">y</span><span class="p">:</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">maxY</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span>
                              <span class="nv">width</span><span class="p">:</span> <span class="n">segmentWidth</span><span class="p">,</span>
                              <span class="nv">height</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">animated</span> <span class="p">{</span>
            <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">CustomSegmentControlVC</span><span class="p">:</span> <span class="kt">UIPageViewControllerDataSource</span><span class="p">,</span> <span class="kt">UIPageViewControllerDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">pageViewController</span><span class="p">(</span><span class="n">_</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="p">,</span> <span class="n">viewControllerBefore</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UIViewController</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">viewController</span><span class="p">),</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">pageViewController</span><span class="p">(</span><span class="n">_</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="p">,</span> <span class="n">viewControllerAfter</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UIViewController</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">viewController</span><span class="p">),</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="n">count</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">pageViewController</span><span class="p">(</span><span class="n">_</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="p">,</span> <span class="n">didFinishAnimating</span> <span class="nv">finished</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">,</span> <span class="nv">previousViewControllers</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIViewController</span><span class="p">],</span> <span class="n">transitionCompleted</span> <span class="nv">completed</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">viewController</span> <span class="o">=</span> <span class="n">pageViewController</span><span class="o">.</span><span class="n">viewControllers</span><span class="p">?[</span><span class="mi">0</span><span class="p">],</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">viewController</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentPage</span> <span class="o">=</span> <span class="n">index</span>
        <span class="k">self</span><span class="o">.</span><span class="n">segmentedControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="n">index</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">CustomSegmentControlVC</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UIColor</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">invertedSystemBackground</span><span class="p">:</span> <span class="kt">UIColor</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UIColor</span> <span class="p">{</span> <span class="n">traitCollection</span> <span class="k">in</span>
            <span class="k">switch</span> <span class="n">traitCollection</span><span class="o">.</span><span class="n">userInterfaceStyle</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">dark</span><span class="p">:</span>
                <span class="c1">// 다크 모드에서는 밝은 배경색</span>
                <span class="k">return</span> <span class="o">.</span><span class="n">white</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="c1">// 라이트 모드에서는 어두운 배경색</span>
                <span class="k">return</span> <span class="o">.</span><span class="n">black</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://ios-development.tistory.com/963</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CustomView" /><summary type="html"><![CDATA[UIKit 세그먼 컨트롤 커스텀 사용법 // // CustomSegmentControlVC.swift // UIComponentTutorial // // Created by 김동현 on 6/2/25. // import UIKit final class CustomSegmentControl: UISegmentedControl { // MARK: - UI private let underlineView: UIView = { let view = UIView() view.backgroundColor = .black return view }() private var underlineLeadingConstraint: NSLayoutConstraint! private var underlineWidthConstraint: NSLayoutConstraint! private let underlineHeight: CGFloat = 4.0 // 원하는 두께로 변경 override init(frame: CGRect) { super.init(frame: frame) setup() } override init(items: [Any]?) { super.init(items: items) setup() } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } private func setup() { self.removeBackgroundAndDivider() underlineView.backgroundColor = .black underlineView.translatesAutoresizingMaskIntoConstraints = false underlineView.layer.cornerRadius = 0 addSubview(underlineView) NSLayoutConstraint.activate([ ]) // 초기 제약조건 let width = bounds.width &gt; 0 ? bounds.width / CGFloat(numberOfSegments) : 0 underlineLeadingConstraint = underlineView.leadingAnchor.constraint(equalTo: leadingAnchor) underlineWidthConstraint = underlineView.widthAnchor.constraint(equalToConstant: width) NSLayoutConstraint.activate([ underlineLeadingConstraint, underlineWidthConstraint, underlineView.bottomAnchor.constraint(equalTo: bottomAnchor), underlineView.heightAnchor.constraint(equalToConstant: 20) ]) } override func layoutSubviews() { super.layoutSubviews() // 항상 최신 크기/위치 반영 updateUnderlinePosition(animated: false) } func updateUnderlinePosition(animated: Bool = true) { let width = bounds.width / CGFloat(numberOfSegments) let leading = CGFloat(selectedSegmentIndex) * width underlineWidthConstraint.constant = width underlineLeadingConstraint.constant = leading if animated { UIView.animate(withDuration: 0.15) { self.layoutIfNeeded() } } else { self.layoutIfNeeded() } } private func removeBackgroundAndDivider() { let image = UIImage() setBackgroundImage(image, for: .normal, barMetrics: .default) setBackgroundImage(image, for: .selected, barMetrics: .default) setBackgroundImage(image, for: .highlighted, barMetrics: .default) setDividerImage(image, forLeftSegmentState: .selected, rightSegmentState: .normal, barMetrics: .default) } } final class CustomSegmentControlVC: UIViewController { private let segmentedControl: UISegmentedControl = { let segment = UISegmentedControl(items: ["첫번째", "두번째", "세번째"]) segment.translatesAutoresizingMaskIntoConstraints = false segment.selectedSegmentIndex = 0 // 스타일 커스텀 segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.gray ], for: .normal) segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.invertedSystemBackground, .font: UIFont.systemFont(ofSize: 15, weight: .bold) ], for: .selected) segment.selectedSegmentTintColor = .clear let image = UIImage() segment.setBackgroundImage(image, for: .normal, barMetrics: .default) segment.setBackgroundImage(image, for: .selected, barMetrics: .default) segment.setBackgroundImage(image, for: .highlighted, barMetrics: .default) segment.setDividerImage(image, forLeftSegmentState: .selected, rightSegmentState: .normal, barMetrics: .default) return segment }() private let underlineView: UIView = { let view = UIView() view.backgroundColor = .invertedSystemBackground view.layer.cornerRadius = 0 return view }() private let vc1: UIViewController = { let vc = UIViewController() vc.view.backgroundColor = .red return vc }() private let vc2: UIViewController = { let vc = UIViewController() vc.view.backgroundColor = .blue return vc }() private let vc3: UIViewController = { let vc = UIViewController() vc.view.backgroundColor = .green return vc }() var dataViewControllers: [UIViewController] { [vc1, vc2, vc3] } private lazy var pageViewController: UIPageViewController = { let vc = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal) vc.setViewControllers([self.dataViewControllers[0]], direction: .forward, animated: true) vc.delegate = self vc.dataSource = self vc.view.translatesAutoresizingMaskIntoConstraints = false return vc }() var currentPage: Int = 0 { didSet { let direction: UIPageViewController.NavigationDirection = oldValue &lt;= self.currentPage ? .forward : .reverse self.pageViewController.setViewControllers( [dataViewControllers[self.currentPage]], direction: direction, animated: true, completion: nil ) moveUnderline(animated: true) } } override func viewDidLoad() { super.viewDidLoad() self.view.addSubview(self.segmentedControl) self.view.addSubview(self.underlineView) self.view.addSubview(self.pageViewController.view) NSLayoutConstraint.activate([ segmentedControl.leadingAnchor.constraint(equalTo: view.leadingAnchor), segmentedControl.trailingAnchor.constraint(equalTo: view.trailingAnchor), segmentedControl.topAnchor.constraint(equalTo: view.topAnchor, constant: 80), segmentedControl.heightAnchor.constraint(equalToConstant: 50), pageViewController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor), pageViewController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor), pageViewController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor), pageViewController.view.topAnchor.constraint(equalTo: segmentedControl.bottomAnchor), ]) // 언더라인의 높이와 최초 위치 설정 (width, x는 viewDidLayoutSubviews에서) underlineView.frame = CGRect(x: 0, y: 0, width: 0, height: 4) segmentedControl.addTarget(self, action: #selector(changeValue(control:)), for: .valueChanged) segmentedControl.selectedSegmentIndex = 0 changeValue(control: segmentedControl) } override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() // 최초 렌더링 시 언더라인 위치 정확히 세팅 moveUnderline(animated: false) // 언더라인의 y위치를 세그먼트 하단에 맞추기 let segFrame = segmentedControl.frame underlineView.frame.origin.y = segFrame.maxY - 4 underlineView.frame.size.height = 4 } @objc private func changeValue(control: UISegmentedControl) { self.currentPage = control.selectedSegmentIndex } /// 언더라인 이동 (frame 연산) private func moveUnderline(animated: Bool) { let segFrame = segmentedControl.frame let segmentCount = CGFloat(segmentedControl.numberOfSegments) let segmentWidth = segFrame.width / segmentCount let targetX = segFrame.minX + segmentWidth * CGFloat(segmentedControl.selectedSegmentIndex) let newFrame = CGRect(x: targetX, y: segFrame.maxY - 4, width: segmentWidth, height: 4) if animated { UIView.animate(withDuration: 0.2) { self.underlineView.frame = newFrame } } else { self.underlineView.frame = newFrame } } } extension CustomSegmentControlVC: UIPageViewControllerDataSource, UIPageViewControllerDelegate { func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -&gt; UIViewController? { guard let index = self.dataViewControllers.firstIndex(of: viewController), index - 1 &gt;= 0 else { return nil } return self.dataViewControllers[index - 1] } func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -&gt; UIViewController? { guard let index = self.dataViewControllers.firstIndex(of: viewController), index + 1 &lt; self.dataViewControllers.count else { return nil } return self.dataViewControllers[index + 1] } func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) { guard let viewController = pageViewController.viewControllers?[0], let index = self.dataViewControllers.firstIndex(of: viewController) else { return } self.currentPage = index self.segmentedControl.selectedSegmentIndex = index self.moveUnderline(animated: true) } } #Preview { CustomSegmentControlVC() } extension UIColor { static var invertedSystemBackground: UIColor { return UIColor { traitCollection in switch traitCollection.userInterfaceStyle { case .dark: // 다크 모드에서는 밝은 배경색 return .white default: // 라이트 모드에서는 어두운 배경색 return .black } } } } Reference https://ios-development.tistory.com/963]]></summary></entry><entry><title type="html">[CustomView] Segmented Control 기본</title><link href="http://localhost:4000/CustomView-Segmented-Control/" rel="alternate" type="text/html" title="[CustomView] Segmented Control 기본" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BCustomView%5D-Segmented%20Control</id><content type="html" xml:base="http://localhost:4000/CustomView-Segmented-Control/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="uikit-세그먼-컨트롤-커스텀-사용법">UIKit 세그먼 컨트롤 커스텀 사용법</h1>

<div style="display: flex; justify-content: center; gap: 20px;">
  <img src="/assets/img/2025-05-30-%5BCustomView%5D-Segmented%20Control/image-20250602141034002.png" alt="셀1" width="50%" />
  <img src="/assets/img/2025-05-30-%5BCustomView%5D-Segmented%20Control/image-20250602141057458.png" alt="셀2" width="50%" />
</div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SegmentControlVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">segmentControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segment</span> <span class="o">=</span> <span class="kt">UISegmentedControl</span><span class="p">()</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">insertSegment</span><span class="p">(</span><span class="nv">withTitle</span><span class="p">:</span> <span class="s">"피드"</span><span class="p">,</span> <span class="nv">at</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">insertSegment</span><span class="p">(</span><span class="nv">withTitle</span><span class="p">:</span> <span class="s">"캘린더"</span><span class="p">,</span> <span class="nv">at</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="c1">/// 탭의 글자 색상 및 폰트 커스텀 (일반/선택 상태별로 다르게)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">systemGray2</span><span class="p">,</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">preferredFont</span><span class="p">(</span><span class="nv">forTextStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">caption1</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="p">,</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">preferredFont</span><span class="p">(</span><span class="nv">forTextStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">caption1</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">)</span>
        
        <span class="c1">/// Segment 선택되었을 때 변하는 tintColor 제거</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentTintColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">clear</span>
        
        <span class="c1">/// divider 제거</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setDividerImage</span><span class="p">(</span><span class="kt">UIImage</span><span class="p">(),</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        
        <span class="c1">/// 값이 변경될 때 underline 애니메이션을 위한 타겟 액션 등록</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">changeUnderLinePosition</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">segment</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underLineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        
        <span class="p">[</span><span class="n">segmentControl</span><span class="p">,</span> <span class="n">underLineView</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
        
        <span class="c1">// 세그먼트 회색 이미지를 흰색으로 설정</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="nf">imageWithColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="c1">/// segmentControl: 화면 중앙, 가로 폭은 safeArea의 40%, 높이 20</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">widthAnchor</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            
            <span class="c1">/// underLineView: 세그먼트 하단에 배치, 가로폭은 세그먼트의 50% (즉, 한 탭과 크기 동일), 높이 2</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">widthAnchor</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">),</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">changeUnderLinePosition</span><span class="p">(</span><span class="n">_</span> <span class="nv">segment</span><span class="p">:</span> <span class="kt">UISegmentedControl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">halfWidth</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="k">let</span> <span class="nv">xPosition</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">halfWidth</span> <span class="o">*</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span><span class="p">))</span>
                
        <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">underLineView</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">xPosition</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">SegmentControlVC</span> <span class="p">{</span>
    <span class="c1">// 흰색 배경 이미지를 만들어주는 함수</span>
    <span class="c1">/// 원하는 색의 1x32 사이즈 이미지를 만드는 함수 (세그먼트 배경 이미지용)</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">imageWithColor</span><span class="p">(</span><span class="n">_</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">CGSize</span> <span class="o">=</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">32</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span> <span class="p">{</span>
        <span class="kt">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">color</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="kt">UIRectFill</span><span class="p">(</span><span class="kt">CGRect</span><span class="p">(</span><span class="nv">origin</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="n">size</span><span class="p">))</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span> <span class="p">??</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="kt">UIGraphicsEndImageContext</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">image</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview  {</span>
    <span class="kt">SegmentControlVC</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SegmentControlVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">segmentControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segment</span> <span class="o">=</span> <span class="kt">UISegmentedControl</span><span class="p">()</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">insertSegment</span><span class="p">(</span><span class="nv">withTitle</span><span class="p">:</span> <span class="s">"피드"</span><span class="p">,</span> <span class="nv">at</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">insertSegment</span><span class="p">(</span><span class="nv">withTitle</span><span class="p">:</span> <span class="s">"캘린더"</span><span class="p">,</span> <span class="nv">at</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="c1">/// 탭의 글자 색상 및 폰트 커스텀 (일반/선택 상태별로 다르게)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">systemGray2</span><span class="p">,</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">preferredFont</span><span class="p">(</span><span class="nv">forTextStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">caption1</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">black</span><span class="p">,</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">preferredFont</span><span class="p">(</span><span class="nv">forTextStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">caption1</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">)</span>
        
        <span class="c1">/// Segment 선택되었을 때 변하는 tintColor 제거</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentTintColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">clear</span>
        
        <span class="c1">/// divider 제거</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setDividerImage</span><span class="p">(</span><span class="kt">UIImage</span><span class="p">(),</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        
        <span class="c1">/// 값이 변경될 때 underline 애니메이션을 위한 타겟 액션 등록</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">changeUnderLinePosition</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">segmentChanged</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">segment</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underLineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">aView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemTeal</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">bView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    
    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">updateViewForSelectedSegment</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        
        <span class="p">[</span><span class="n">segmentControl</span><span class="p">,</span> <span class="n">underLineView</span><span class="p">,</span> <span class="n">aView</span><span class="p">,</span> <span class="n">bView</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
        
        <span class="c1">// 세그먼트 회색 이미지를 흰색으로 설정</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="nf">imageWithColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="c1">/// segmentControl: 화면 중앙, 가로 폭은 safeArea의 40%, 높이 20</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">widthAnchor</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            
            <span class="c1">/// underLineView: 세그먼트 하단에 배치, 가로폭은 세그먼트의 50% (즉, 한 탭과 크기 동일), 높이 2</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">widthAnchor</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">),</span>
            <span class="n">underLineView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">2</span><span class="p">),</span>
            
            <span class="c1">// aView</span>
            <span class="n">aView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">underLineView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="n">aView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">aView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">aView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
            
            <span class="c1">// bView</span>
            <span class="n">bView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">underLineView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="n">bView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">bView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">bView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
            
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">SegmentControlVC</span> <span class="p">{</span>
    
    
    <span class="c1">/// 세그먼트 값 변경 시 언더라인(Indicator) 이동 애니메이션</span>
    <span class="kd">@objc</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">changeUnderLinePosition</span><span class="p">(</span><span class="n">_</span> <span class="nv">segment</span><span class="p">:</span> <span class="kt">UISegmentedControl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">halfWidth</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
        <span class="k">let</span> <span class="nv">xPosition</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="p">(</span><span class="n">halfWidth</span> <span class="o">*</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span><span class="p">))</span>
                
        <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">underLineView</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">xPosition</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 흰색 배경 이미지를 만들어주는 함수</span>
    <span class="c1">/// 원하는 색의 1x32 사이즈 이미지를 만드는 함수 (세그먼트 배경 이미지용)</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">imageWithColor</span><span class="p">(</span><span class="n">_</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">CGSize</span> <span class="o">=</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">32</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span> <span class="p">{</span>
        <span class="kt">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">color</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="kt">UIRectFill</span><span class="p">(</span><span class="kt">CGRect</span><span class="p">(</span><span class="nv">origin</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="n">size</span><span class="p">))</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span> <span class="p">??</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="kt">UIGraphicsEndImageContext</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">image</span>
    <span class="p">}</span>
    
    <span class="c1">// 세그먼트 탭 전환시 뷰 보이기 /숨기기</span>
    <span class="kd">@objc</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">segmentChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">segment</span><span class="p">:</span> <span class="kt">UISegmentedControl</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">updateViewForSelectedSegment</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 현재 선택된 인덱스에 따라 aView/bView만 보이도록 처리</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">updateViewForSelectedSegment</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">aView</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">!=</span> <span class="mi">0</span>
        <span class="n">bView</span><span class="o">.</span><span class="n">isHidden</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">!=</span> <span class="mi">1</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview  {</span>
    <span class="kt">SegmentControlVC</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="커스텀view">커스텀View</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 상단 탭바+Indicator 커스텀 UIView (재사용 가능)</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SegmentedTabBarView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>

    <span class="c1">// MARK: - Properties</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">segmentControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">mainWhite</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">underlineLeadingConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>

    <span class="c1">// 선택된 인덱스 콜백</span>
    <span class="k">var</span> <span class="nv">onIndexChanged</span><span class="p">:</span> <span class="p">((</span><span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span>

    <span class="c1">// MARK: - Init</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">])</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">segmentControl</span> <span class="o">=</span> <span class="kt">UISegmentedControl</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="n">items</span><span class="p">)</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">setSelected</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span> <span class="nf">fatalError</span><span class="p">()</span> <span class="p">}</span>

    <span class="c1">// MARK: - UI</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 커스텀 스타일</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        
        <span class="c1">// 미선택시</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">systemGray2</span><span class="p">,</span>
            <span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">hcFont</span><span class="p">(</span><span class="o">.</span><span class="n">light</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">20</span><span class="o">.</span><span class="n">scaled</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        
        <span class="c1">// 선택시</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">mainWhite</span><span class="p">,</span>
            <span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">hcFont</span><span class="p">(</span><span class="o">.</span><span class="n">bold</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">20</span><span class="o">.</span><span class="n">scaled</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">)</span>
        
        <span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentTintColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">clear</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setDividerImage</span><span class="p">(</span><span class="kt">UIImage</span><span class="p">(),</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="nf">imageWithColor</span><span class="p">(</span><span class="o">.</span><span class="n">mainBlack</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>

        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">segmentChanged</span><span class="p">(</span><span class="nv">_</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">segmentControl</span><span class="p">)</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">underlineView</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>

        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">segmentControl</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">bottomAnchor</span><span class="p">),</span>

            <span class="n">underlineView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">5</span><span class="p">),</span>
            <span class="n">underlineView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">2</span><span class="p">),</span>
            <span class="n">underlineView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">widthAnchor</span><span class="p">,</span> <span class="nv">multiplier</span><span class="p">:</span> <span class="mi">1</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentControl</span><span class="o">.</span><span class="n">numberOfSegments</span><span class="p">))</span>
        <span class="p">])</span>
        <span class="c1">// 밑줄의 leading 제약조건은 따로 저장해 이동시킨다</span>
        <span class="n">underlineLeadingConstraint</span> <span class="o">=</span> <span class="n">underlineView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">)</span>
        <span class="n">underlineLeadingConstraint</span><span class="o">.</span><span class="n">isActive</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">}</span>

    <span class="c1">// MARK: - Action</span>
    <span class="kd">@objc</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">segmentChanged</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UISegmentedControl</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">setSelected</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="n">sender</span><span class="o">.</span><span class="n">selectedSegmentIndex</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="nf">onIndexChanged</span><span class="p">?(</span><span class="n">sender</span><span class="o">.</span><span class="n">selectedSegmentIndex</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// 인덱스 바꾸기 + 밑줄 이동</span>
    <span class="kd">func</span> <span class="nf">setSelected</span><span class="p">(</span><span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segmentWidth</span> <span class="o">=</span> <span class="n">segmentControl</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentControl</span><span class="o">.</span><span class="n">numberOfSegments</span><span class="p">)</span>
        <span class="n">underlineLeadingConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">segmentWidth</span> <span class="o">*</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">animated</span> <span class="p">{</span>
            <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">)</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span> <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="n">index</span>
    <span class="p">}</span>

    <span class="c1">// 유틸: 흰색 배경 이미지 만들기</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">imageWithColor</span><span class="p">(</span><span class="n">_</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">CGSize</span> <span class="o">=</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">32</span><span class="p">))</span> <span class="o">-&gt;</span> <span class="kt">UIImage</span> <span class="p">{</span>
        <span class="kt">UIGraphicsBeginImageContextWithOptions</span><span class="p">(</span><span class="n">size</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">color</span><span class="o">.</span><span class="nf">setFill</span><span class="p">()</span>
        <span class="kt">UIRectFill</span><span class="p">(</span><span class="kt">CGRect</span><span class="p">(</span><span class="nv">origin</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="n">size</span><span class="p">))</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">()</span> <span class="p">??</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="kt">UIGraphicsEndImageContext</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">image</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// SegmentedTabBarView.swift</span>
<span class="kd">extension</span> <span class="kt">SegmentedTabBarView</span> <span class="p">{</span>
    <span class="c1">/// 원하는 segment의 title을 동적으로 변경</span>
    <span class="kd">func</span> <span class="nf">setSegmentTitle</span><span class="p">(</span><span class="n">_</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="n">at</span> <span class="nv">index</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">segmentControl</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="nv">forSegmentAt</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="reference">Reference</h1>
<ul>
  <li>https://chokotingchock.tistory.com/entry/스위프트-UIKit-custom-segmented-control</li>
  <li>https://velog.io/@panther222128/UISegmentedControl-and-UITableView</li>
  <li>https://ios-development.tistory.com/962</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CustomView" /><summary type="html"><![CDATA[UIKit 세그먼 컨트롤 커스텀 사용법 import UIKit final class SegmentControlVC: UIViewController { // MARK: - UI Component private lazy var segmentControl: UISegmentedControl = { let segment = UISegmentedControl() segment.insertSegment(withTitle: "피드", at: 0, animated: true) segment.insertSegment(withTitle: "캘린더", at: 1, animated: true) segment.selectedSegmentIndex = 0 /// 탭의 글자 색상 및 폰트 커스텀 (일반/선택 상태별로 다르게) segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.systemGray2, NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1) ], for: .normal) segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.black, NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1) ], for: .selected) /// Segment 선택되었을 때 변하는 tintColor 제거 segment.selectedSegmentTintColor = .clear /// divider 제거 segment.setDividerImage(UIImage(), forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default) /// 값이 변경될 때 underline 애니메이션을 위한 타겟 액션 등록 segment.addTarget(self, action: #selector(changeUnderLinePosition), for: .valueChanged) return segment }() private let underLineView: UIView = { let view = UIView() view.backgroundColor = .black return view }() override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() } private func makeUI() { view.backgroundColor = .white [segmentControl, underLineView].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } // 세그먼트 회색 이미지를 흰색으로 설정 segmentControl.setBackgroundImage(imageWithColor(.white), for: .normal, barMetrics: .default) } private func constraints() { NSLayoutConstraint.activate([ /// segmentControl: 화면 중앙, 가로 폭은 safeArea의 40%, 높이 20 segmentControl.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), segmentControl.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor), segmentControl.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: 0.4), segmentControl.heightAnchor.constraint(equalToConstant: 20), /// underLineView: 세그먼트 하단에 배치, 가로폭은 세그먼트의 50% (즉, 한 탭과 크기 동일), 높이 2 underLineView.topAnchor.constraint(equalTo: segmentControl.bottomAnchor, constant: 10), underLineView.leadingAnchor.constraint(equalTo: segmentControl.leadingAnchor), underLineView.widthAnchor.constraint(equalTo: segmentControl.widthAnchor, multiplier: 0.5), underLineView.heightAnchor.constraint(equalToConstant: 2) ]) } @objc private func changeUnderLinePosition(_ segment: UISegmentedControl) { let halfWidth = segmentControl.frame.width / 2 let xPosition = segmentControl.frame.origin.x + (halfWidth * CGFloat(segmentControl.selectedSegmentIndex)) UIView.animate(withDuration: 0.2) { self.underLineView.frame.origin.x = xPosition } } } extension SegmentControlVC { // 흰색 배경 이미지를 만들어주는 함수 /// 원하는 색의 1x32 사이즈 이미지를 만드는 함수 (세그먼트 배경 이미지용) private func imageWithColor(_ color: UIColor, size: CGSize = CGSize(width: 1, height: 32)) -&gt; UIImage { UIGraphicsBeginImageContextWithOptions(size, false, 0) color.setFill() UIRectFill(CGRect(origin: .zero, size: size)) let image = UIGraphicsGetImageFromCurrentImageContext() ?? UIImage() UIGraphicsEndImageContext() return image } } #Preview { SegmentControlVC() } import UIKit final class SegmentControlVC: UIViewController { // MARK: - UI Component private lazy var segmentControl: UISegmentedControl = { let segment = UISegmentedControl() segment.insertSegment(withTitle: "피드", at: 0, animated: true) segment.insertSegment(withTitle: "캘린더", at: 1, animated: true) segment.selectedSegmentIndex = 0 /// 탭의 글자 색상 및 폰트 커스텀 (일반/선택 상태별로 다르게) segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.systemGray2, NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1) ], for: .normal) segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.black, NSAttributedString.Key.font: UIFont.preferredFont(forTextStyle: .caption1) ], for: .selected) /// Segment 선택되었을 때 변하는 tintColor 제거 segment.selectedSegmentTintColor = .clear /// divider 제거 segment.setDividerImage(UIImage(), forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default) /// 값이 변경될 때 underline 애니메이션을 위한 타겟 액션 등록 segment.addTarget(self, action: #selector(changeUnderLinePosition), for: .valueChanged) segment.addTarget(self, action: #selector(segmentChanged), for: .valueChanged) return segment }() private let underLineView: UIView = { let view = UIView() view.backgroundColor = .black return view }() private let aView: UIView = { let view = UIView() view.backgroundColor = .systemTeal return view }() private let bView: UIView = { let view = UIView() view.backgroundColor = .systemYellow return view }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() updateViewForSelectedSegment() } private func makeUI() { view.backgroundColor = .white [segmentControl, underLineView, aView, bView].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } // 세그먼트 회색 이미지를 흰색으로 설정 segmentControl.setBackgroundImage(imageWithColor(.white), for: .normal, barMetrics: .default) } private func constraints() { NSLayoutConstraint.activate([ /// segmentControl: 화면 중앙, 가로 폭은 safeArea의 40%, 높이 20 segmentControl.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), segmentControl.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor), segmentControl.widthAnchor.constraint(equalTo: view.safeAreaLayoutGuide.widthAnchor, multiplier: 0.4), segmentControl.heightAnchor.constraint(equalToConstant: 20), /// underLineView: 세그먼트 하단에 배치, 가로폭은 세그먼트의 50% (즉, 한 탭과 크기 동일), 높이 2 underLineView.topAnchor.constraint(equalTo: segmentControl.bottomAnchor, constant: 10), underLineView.leadingAnchor.constraint(equalTo: segmentControl.leadingAnchor), underLineView.widthAnchor.constraint(equalTo: segmentControl.widthAnchor, multiplier: 0.5), underLineView.heightAnchor.constraint(equalToConstant: 2), // aView aView.topAnchor.constraint(equalTo: underLineView.bottomAnchor, constant: 0), aView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor), aView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor), aView.bottomAnchor.constraint(equalTo: view.bottomAnchor), // bView bView.topAnchor.constraint(equalTo: underLineView.bottomAnchor, constant: 0), bView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor), bView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor), bView.bottomAnchor.constraint(equalTo: view.bottomAnchor), ]) } } extension SegmentControlVC { /// 세그먼트 값 변경 시 언더라인(Indicator) 이동 애니메이션 @objc private func changeUnderLinePosition(_ segment: UISegmentedControl) { let halfWidth = segmentControl.frame.width / 2 let xPosition = segmentControl.frame.origin.x + (halfWidth * CGFloat(segmentControl.selectedSegmentIndex)) UIView.animate(withDuration: 0.2) { self.underLineView.frame.origin.x = xPosition } } // 흰색 배경 이미지를 만들어주는 함수 /// 원하는 색의 1x32 사이즈 이미지를 만드는 함수 (세그먼트 배경 이미지용) private func imageWithColor(_ color: UIColor, size: CGSize = CGSize(width: 1, height: 32)) -&gt; UIImage { UIGraphicsBeginImageContextWithOptions(size, false, 0) color.setFill() UIRectFill(CGRect(origin: .zero, size: size)) let image = UIGraphicsGetImageFromCurrentImageContext() ?? UIImage() UIGraphicsEndImageContext() return image } // 세그먼트 탭 전환시 뷰 보이기 /숨기기 @objc private func segmentChanged(_ segment: UISegmentedControl) { updateViewForSelectedSegment() } /// 현재 선택된 인덱스에 따라 aView/bView만 보이도록 처리 private func updateViewForSelectedSegment() { aView.isHidden = segmentControl.selectedSegmentIndex != 0 bView.isHidden = segmentControl.selectedSegmentIndex != 1 } } #Preview { SegmentControlVC() } 커스텀View /// 상단 탭바+Indicator 커스텀 UIView (재사용 가능) final class SegmentedTabBarView: UIView { // MARK: - Properties private let segmentControl: UISegmentedControl private let underlineView: UIView = { let view = UIView() view.backgroundColor = .mainWhite return view }() private var underlineLeadingConstraint: NSLayoutConstraint! // 선택된 인덱스 콜백 var onIndexChanged: ((Int) -&gt; Void)? // MARK: - Init init(items: [String]) { self.segmentControl = UISegmentedControl(items: items) super.init(frame: .zero) makeUI() constraints() setSelected(index: 0, animated: false) } required init?(coder: NSCoder) { fatalError() } // MARK: - UI private func makeUI() { // 커스텀 스타일 segmentControl.selectedSegmentIndex = 0 // 미선택시 segmentControl.setTitleTextAttributes([ .foregroundColor: UIColor.systemGray2, .font: UIFont.hcFont(.light, size: 20.scaled) ], for: .normal) // 선택시 segmentControl.setTitleTextAttributes([ .foregroundColor: UIColor.mainWhite, .font: UIFont.hcFont(.bold, size: 20.scaled) ], for: .selected) segmentControl.selectedSegmentTintColor = .clear segmentControl.setDividerImage(UIImage(), forLeftSegmentState: .normal, rightSegmentState: .normal, barMetrics: .default) segmentControl.setBackgroundImage(imageWithColor(.mainBlack), for: .normal, barMetrics: .default) segmentControl.addTarget(self, action: #selector(segmentChanged(_:)), for: .valueChanged) addSubview(segmentControl) addSubview(underlineView) } private func constraints() { segmentControl.translatesAutoresizingMaskIntoConstraints = false underlineView.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ segmentControl.topAnchor.constraint(equalTo: topAnchor), segmentControl.leadingAnchor.constraint(equalTo: leadingAnchor), segmentControl.trailingAnchor.constraint(equalTo: trailingAnchor), segmentControl.bottomAnchor.constraint(equalTo: bottomAnchor), underlineView.topAnchor.constraint(equalTo: segmentControl.bottomAnchor, constant: 5), underlineView.heightAnchor.constraint(equalToConstant: 2), underlineView.widthAnchor.constraint(equalTo: segmentControl.widthAnchor, multiplier: 1 / CGFloat(segmentControl.numberOfSegments)) ]) // 밑줄의 leading 제약조건은 따로 저장해 이동시킨다 underlineLeadingConstraint = underlineView.leadingAnchor.constraint(equalTo: segmentControl.leadingAnchor) underlineLeadingConstraint.isActive = true } // MARK: - Action @objc private func segmentChanged(_ sender: UISegmentedControl) { setSelected(index: sender.selectedSegmentIndex, animated: true) onIndexChanged?(sender.selectedSegmentIndex) } // 인덱스 바꾸기 + 밑줄 이동 func setSelected(index: Int, animated: Bool) { let segmentWidth = segmentControl.frame.width / CGFloat(segmentControl.numberOfSegments) underlineLeadingConstraint.constant = segmentWidth * CGFloat(index) if animated { UIView.animate(withDuration: 0.2) { self.layoutIfNeeded() } } else { self.layoutIfNeeded() } segmentControl.selectedSegmentIndex = index } // 유틸: 흰색 배경 이미지 만들기 private func imageWithColor(_ color: UIColor, size: CGSize = CGSize(width: 1, height: 32)) -&gt; UIImage { UIGraphicsBeginImageContextWithOptions(size, false, 0) color.setFill() UIRectFill(CGRect(origin: .zero, size: size)) let image = UIGraphicsGetImageFromCurrentImageContext() ?? UIImage() UIGraphicsEndImageContext() return image } } // SegmentedTabBarView.swift extension SegmentedTabBarView { /// 원하는 segment의 title을 동적으로 변경 func setSegmentTitle(_ title: String, at index: Int) { segmentControl.setTitle(title, forSegmentAt: index) } } Reference https://chokotingchock.tistory.com/entry/스위프트-UIKit-custom-segmented-control https://velog.io/@panther222128/UISegmentedControl-and-UITableView https://ios-development.tistory.com/962]]></summary></entry><entry><title type="html">[CustomView] 커스텀 캘린더뷰 만들기</title><link href="http://localhost:4000/CustomView-CalendarView/" rel="alternate" type="text/html" title="[CustomView] 커스텀 캘린더뷰 만들기" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BCustomView%5D-CalendarView</id><content type="html" xml:base="http://localhost:4000/CustomView-CalendarView/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="ios-16부터-기본-제공되는-캘린더">iOS 16부터 기본 제공되는 캘린더</h1>

<h3 id="기본-캘린더">기본 캘린더</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">BasicCalendarViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Conponent</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">UICalendarView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UICalendarView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="c1">/// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성</span>
        <span class="n">view</span><span class="o">.</span><span class="n">wantsDateDecorations</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">calendarView</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">calendarViewConstraints</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">(</span><span class="n">calendarViewConstraints</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="uicalendarselectionsingledatedelegate를-설정하여-날짜-선택시-이모지-표시">UICalendarSelectionSingleDateDelegate를 설정하여 날짜 선택시 이모지 표시</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">BasicCalendarViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">/// 현재 선택된 날짜</span>
    <span class="k">var</span> <span class="nv">selectedDate</span><span class="p">:</span> <span class="kt">DateComponents</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="c1">// MARK: - UI Conponent</span>
    <span class="c1">/// 날짜별 데코레이션(점, 이모지 등)을 지원하는 캘린더 뷰</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">UICalendarView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UICalendarView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="kt">Locale</span><span class="p">(</span><span class="nv">identifier</span><span class="p">:</span> <span class="s">"ko_KR"</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="c1">/// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성</span>
        <span class="n">view</span><span class="o">.</span><span class="n">wantsDateDecorations</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="k">self</span><span class="o">.</span><span class="nf">makeUI</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">constraints</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">setCalendar</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 캘린더 delegate 및 날짜 선택 동작 설정</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setCalendar</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">calendarView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        
        <span class="c1">/// 한 번에 한 날짜만 선택 가능</span>
        <span class="k">let</span> <span class="nv">dateSection</span> <span class="o">=</span> <span class="kt">UICalendarSelectionSingleDate</span><span class="p">(</span><span class="nv">delegate</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
        <span class="c1">/// 선택 이벤트(날짜 선택 시 콜백)를 BasicCalendarViewController에서 직접 처리하겠다</span>
        <span class="n">calendarView</span><span class="o">.</span><span class="n">selectionBehavior</span> <span class="o">=</span> <span class="n">dateSection</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">calendarView</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">calendarViewConstraints</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">(</span><span class="n">calendarViewConstraints</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">/// 특정 날짜 셀만 데코레이션 새로고침(이모지 추가)</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">reloadDateView</span><span class="p">(</span><span class="nv">date</span><span class="p">:</span> <span class="kt">Date</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">date</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="k">let</span> <span class="nv">calendar</span> <span class="o">=</span> <span class="kt">Calendar</span><span class="o">.</span><span class="n">current</span>
        <span class="n">calendarView</span><span class="o">.</span><span class="nf">reloadDecorations</span><span class="p">(</span><span class="nv">forDateComponents</span><span class="p">:</span> <span class="p">[</span><span class="n">calendar</span><span class="o">.</span><span class="nf">dateComponents</span><span class="p">([</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="o">.</span><span class="n">month</span><span class="p">,</span> <span class="o">.</span><span class="n">year</span><span class="p">],</span> <span class="nv">from</span><span class="p">:</span> <span class="n">date</span><span class="o">!</span><span class="p">)],</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// MARK: - 캘린더 Delegate</span>
<span class="kd">extension</span> <span class="kt">BasicCalendarViewController</span><span class="p">:</span> <span class="kt">UICalendarViewDelegate</span><span class="p">,</span> <span class="kt">UICalendarSelectionSingleDateDelegate</span> <span class="p">{</span>
    
    <span class="c1">/// 날짜별 데코레이션 표시 커스텀(필요시 구현)</span>
    <span class="c1">/// 선택된 날자의 셀에 이모지로 커스텀 데코레이션을 보여준다</span>
    <span class="kd">func</span> <span class="nf">calendarView</span><span class="p">(</span><span class="n">_</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">UICalendarView</span><span class="p">,</span> <span class="n">decorationFor</span> <span class="nv">dateComponents</span><span class="p">:</span> <span class="kt">DateComponents</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UICalendarView</span><span class="o">.</span><span class="kt">Decoration</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">selectedDate</span> <span class="o">=</span> <span class="n">selectedDate</span><span class="p">,</span> <span class="n">selectedDate</span> <span class="o">==</span> <span class="n">dateComponents</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">.</span><span class="n">customView</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
                <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"🐶"</span>
                <span class="n">label</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
                <span class="k">return</span> <span class="n">label</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
    
    <span class="c1">/// 날짜 선택 시 동작</span>
    <span class="kd">func</span> <span class="nf">dateSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">selection</span><span class="p">:</span> <span class="kt">UICalendarSelectionSingleDate</span><span class="p">,</span> <span class="n">didSelectDate</span> <span class="nv">dateComponents</span><span class="p">:</span> <span class="kt">DateComponents</span><span class="p">?)</span> <span class="p">{</span>
        <span class="c1">/// selection 객체에 저장</span>
        <span class="n">selection</span><span class="o">.</span><span class="nf">setSelected</span><span class="p">(</span><span class="n">dateComponents</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="c1">/// selectedDate 프로퍼티를 업데이트</span>
        <span class="n">selectedDate</span> <span class="o">=</span> <span class="n">dateComponents</span>
        <span class="c1">/// 선택한 날짜 셀의 데코레이션만 새로고침(🐶 이모지가 바로 반영되게)</span>
        <span class="nf">reloadDateView</span><span class="p">(</span><span class="nv">date</span><span class="p">:</span> <span class="kt">Calendar</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="nf">date</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">dateComponents</span><span class="o">!</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/img/2025-05-30-%5BCustomView%5D-CalendarView/image-20250530145103523.png" alt="이미지" width="50%" /></p>

<div align="center">참고: 한국어로 설정해도 시뮬레이터에서는 요일이 영어로 보이는 버그가 있다.
</div>

<p><img src="/assets/img/2025-05-30-%5BCustomView%5D-CalendarView/image-20250604141453258.png" alt="이미지" width="50%" /></p>

<h3 id="커스텀-캘린더">커스텀 캘린더</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  1. CustomCalendar.swift</span>
<span class="c1">//  UIComponentTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 6/4/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FSCalendar</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomCalendarVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">FSCalendar</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">calendar</span> <span class="o">=</span> <span class="kt">FSCalendar</span><span class="p">()</span>
        
        <span class="c1">// 첫 열을 월요일로 설정</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">firstWeekday</span> <span class="o">=</span> <span class="mi">2</span>
        
        <span class="c1">// week 또는 month 가능</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="o">.</span><span class="n">month</span>
        
        <span class="n">calendar</span><span class="o">.</span><span class="n">scrollEnabled</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="kt">Locale</span><span class="p">(</span><span class="nv">identifier</span><span class="p">:</span> <span class="s">"ko_KR"</span><span class="p">)</span>
        
        <span class="c1">// 현재 달의 날짜들만 표기하도록 설정</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">placeholderType</span> <span class="o">=</span> <span class="o">.</span><span class="k">none</span>
        
        <span class="c1">// 헤더뷰 설정</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">headerHeight</span> <span class="o">=</span> <span class="mi">55</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">headerDateFormat</span> <span class="o">=</span> <span class="s">"MM월"</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">headerTitleColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        
        <span class="c1">// 요일 UI 설정</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">weekdayFont</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">17</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">light</span><span class="p">)</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">weekdayTextColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        
        <span class="c1">// 날짜별 UI 설정</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">titleTodayColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">titleFont</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">light</span><span class="p">)</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">subtitleFont</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">light</span><span class="p">)</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">subtitleTodayColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">appearance</span><span class="o">.</span><span class="n">todayColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">gray</span>
        
        <span class="c1">// 일요일 라벨의 textColor는 red로 설정</span>
        <span class="n">calendar</span><span class="o">.</span><span class="n">calendarWeekdayView</span><span class="o">.</span><span class="n">weekdayLabels</span><span class="o">.</span><span class="n">last</span><span class="o">!.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">red</span>
        <span class="k">return</span> <span class="n">calendar</span>
    <span class="p">}()</span>
    
    <span class="c1">// MARK: - Life Cycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">calendarView</span><span class="p">)</span>
        <span class="n">calendarView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">0</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">500</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">CustomCalendarVC</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://ohwhatisthis.tistory.com/23</li>
  <li>https://maramincho.tistory.com/106</li>
  <li>https://dongdida.tistory.com/128</li>
  <li>https://velog.io/@xanxnu/iOSSwift-UICalendarView-사용해-보기</li>
  <li>https://lsj8706.tistory.com/4</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CustomView" /><summary type="html"><![CDATA[iOS 16부터 기본 제공되는 캘린더 기본 캘린더 import UIKit final class BasicCalendarViewController: UIViewController { // MARK: - UI Conponent private lazy var calendarView: UICalendarView = { let view = UICalendarView() view.translatesAutoresizingMaskIntoConstraints = false /// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성 view.wantsDateDecorations = true return view }() override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() } private func makeUI() { view.backgroundColor = .white view.addSubview(calendarView) } private func constraints() { let calendarViewConstraints = [ calendarView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), calendarView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20), calendarView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -20) ] NSLayoutConstraint.activate(calendarViewConstraints) } } UICalendarSelectionSingleDateDelegate를 설정하여 날짜 선택시 이모지 표시 import UIKit final class BasicCalendarViewController: UIViewController { /// 현재 선택된 날짜 var selectedDate: DateComponents? = nil // MARK: - UI Conponent /// 날짜별 데코레이션(점, 이모지 등)을 지원하는 캘린더 뷰 private lazy var calendarView: UICalendarView = { let view = UICalendarView() view.locale = Locale(identifier: "ko_KR") view.translatesAutoresizingMaskIntoConstraints = false /// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성 view.wantsDateDecorations = true return view }() override func viewDidLoad() { super.viewDidLoad() self.makeUI() self.constraints() self.setCalendar() } /// 캘린더 delegate 및 날짜 선택 동작 설정 private func setCalendar() { self.calendarView.delegate = self /// 한 번에 한 날짜만 선택 가능 let dateSection = UICalendarSelectionSingleDate(delegate: self) /// 선택 이벤트(날짜 선택 시 콜백)를 BasicCalendarViewController에서 직접 처리하겠다 calendarView.selectionBehavior = dateSection } private func makeUI() { view.backgroundColor = .white view.addSubview(calendarView) } private func constraints() { let calendarViewConstraints = [ calendarView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), calendarView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20), calendarView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -20) ] NSLayoutConstraint.activate(calendarViewConstraints) } /// 특정 날짜 셀만 데코레이션 새로고침(이모지 추가) private func reloadDateView(date: Date?) { if date == nil { return } let calendar = Calendar.current calendarView.reloadDecorations(forDateComponents: [calendar.dateComponents([.day, .month, .year], from: date!)], animated: true) } } // MARK: - 캘린더 Delegate extension BasicCalendarViewController: UICalendarViewDelegate, UICalendarSelectionSingleDateDelegate { /// 날짜별 데코레이션 표시 커스텀(필요시 구현) /// 선택된 날자의 셀에 이모지로 커스텀 데코레이션을 보여준다 func calendarView(_ calendarView: UICalendarView, decorationFor dateComponents: DateComponents) -&gt; UICalendarView.Decoration? { if let selectedDate = selectedDate, selectedDate == dateComponents { return .customView { let label = UILabel() label.text = "🐶" label.textAlignment = .center return label } } return nil } /// 날짜 선택 시 동작 func dateSelection(_ selection: UICalendarSelectionSingleDate, didSelectDate dateComponents: DateComponents?) { /// selection 객체에 저장 selection.setSelected(dateComponents, animated: true) /// selectedDate 프로퍼티를 업데이트 selectedDate = dateComponents /// 선택한 날짜 셀의 데코레이션만 새로고침(🐶 이모지가 바로 반영되게) reloadDateView(date: Calendar.current.date(from: dateComponents!)) } } 참고: 한국어로 설정해도 시뮬레이터에서는 요일이 영어로 보이는 버그가 있다. 커스텀 캘린더 // // 1. CustomCalendar.swift // UIComponentTutorial // // Created by 김동현 on 6/4/25. // import UIKit import FSCalendar final class CustomCalendarVC: UIViewController { // MARK: - UI Component private lazy var calendarView: FSCalendar = { let calendar = FSCalendar() // 첫 열을 월요일로 설정 calendar.firstWeekday = 2 // week 또는 month 가능 calendar.scope = .month calendar.scrollEnabled = true calendar.locale = Locale(identifier: "ko_KR") // 현재 달의 날짜들만 표기하도록 설정 calendar.placeholderType = .none // 헤더뷰 설정 calendar.headerHeight = 55 calendar.appearance.headerDateFormat = "MM월" calendar.appearance.headerTitleColor = .black // 요일 UI 설정 calendar.appearance.weekdayFont = UIFont.systemFont(ofSize: 17, weight: .light) calendar.appearance.weekdayTextColor = .black // 날짜별 UI 설정 calendar.appearance.titleTodayColor = .white calendar.appearance.titleFont = UIFont.systemFont(ofSize: 16, weight: .light) calendar.appearance.subtitleFont = UIFont.systemFont(ofSize: 10, weight: .light) calendar.appearance.subtitleTodayColor = .systemYellow calendar.appearance.todayColor = .gray // 일요일 라벨의 textColor는 red로 설정 calendar.calendarWeekdayView.weekdayLabels.last!.textColor = .red return calendar }() // MARK: - Life Cycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .white view.addSubview(calendarView) calendarView.translatesAutoresizingMaskIntoConstraints = false } private func constraints() { NSLayoutConstraint.activate([ calendarView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 0), calendarView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 20), calendarView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -20), calendarView.heightAnchor.constraint(equalToConstant: 500) ]) } } #Preview { CustomCalendarVC() } Reference https://ohwhatisthis.tistory.com/23 https://maramincho.tistory.com/106 https://dongdida.tistory.com/128 https://velog.io/@xanxnu/iOSSwift-UICalendarView-사용해-보기 https://lsj8706.tistory.com/4]]></summary></entry><entry><title type="html">[Haruhancut] Widget</title><link href="http://localhost:4000/Haruhancut-Widget/" rel="alternate" type="text/html" title="[Haruhancut] Widget" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BHaruhancut%5D-Widget</id><content type="html" xml:base="http://localhost:4000/Haruhancut-Widget/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="widget-도입">Widget 도입</h2>
<p>하루한컷 앱에 위젯을 추가하여 앱의 사진을 위젯으로 보여주려고 한다.</p>

<h2 id="기존-번들-식별자에-app-groups-체크-및-저장">기존 번들 식별자에 App Groups 체크 및 저장</h2>
<p>Identifiers에서 com.indextrown.Haruhancut를 찾아서 App Groups 체크박스를 추가 및 저장한다.</p>

<h3 id="1-위젯용-번들-식별자-준비">1. 위젯용 번들 식별자 준비</h3>
<p><img src="/assets/img/2025-05-30-%5BHaruhancut%5D-Widget/image-20250610145644562.png" alt="이미지" width="30%" /><br />
com.indextrown.Haruhancut.WidgetExtension로 번들 식별자를 만들고 App Groups만 체크해준다.<br />
이제 프로비저닝 프로파일을 만들건데 편의를 위해 fastlane을 사용하겠다.</p>

<h3 id="2-프로비저닝-프로파일-만들기">2. 프로비저닝 프로파일 만들기</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 기존 프로젝트가 이거면  </span>
<span class="c"># match Development com.indextrown.Haruhancut</span>

<span class="c"># 위젯은 아래와 같이 프로비저닝 프로파일을 만들어준다.   </span>
<span class="c"># match Development com.indextrown.Haruhancut.WidgetExtension</span>

<span class="c"># 개발용</span>
fastlane match development <span class="nt">--app_identifier</span> <span class="s2">"com.indextrown.Haruhancut.WidgetExtension"</span>

<span class="c"># 배포용</span>
fastlane match appstore <span class="nt">--app_identifier</span> <span class="s2">"com.indextrown.Haruhancut.WidgetExtension"</span>

<span class="c"># ⚠️Provisioning profile "" doesn't include signing ...발생시</span>
fastlane match development <span class="nt">--force</span>
fastlane match appstore <span class="nt">--force</span>  
</code></pre></div></div>

<h3 id="3-widget-extension-생성">3. Widget Extension 생성</h3>

<ul>
  <li>Targets목록 아래 + 버튼 눌러서 WIdget Extension 생성한다.</li>
</ul>

<h3 id="4-app-groups-설정">4. App Groups 설정</h3>
<p>기존 프로젝트와 WIdgetExtension 프로젝트에 각각 App Groups 추가한다.</p>

<h2 id="widgetkit">WidgetKit</h2>
<ul>
  <li>iOS 14부터 도입되었으며 SwiftUI로만 구현 가능하다.</li>
  <li>UIViewRepresentable 불가능하다.</li>
</ul>

<h3 id="widget-configuration속성-편집에-대한-기능">Widget COnfiguration(속성 편집에 대한 기능)</h3>
<ul>
  <li>Static configuration
    <ul>
      <li>위젯 편집 항목이 나타나지 않으며, 사용자가 설정을 변경할 수 있는 옵션이 없다.</li>
    </ul>
  </li>
  <li>Intent Configuration
    <ul>
      <li>위젯 편집 기능을 통해 여러 Intent 값을 수정할 수 있도록 위젯을 구성할 수 있다.</li>
      <li>iOS 17부터 AppIntentCOnfiguration으로 변경</li>
    </ul>
  </li>
  <li>Activity Configuration
    <ul>
      <li>Live Activity</li>
    </ul>
  </li>
</ul>

<h3 id="widget은-크게-4가지의-struct로-구성">Widget은 크게 4가지의 struct로 구성</h3>

<p><img src="/assets/img/2025-05-30-%5BHaruhancut%5D-Widget/image-20250610173933798.png" alt="이미지" width="30%" /></p>

<ul>
  <li>Provider에서 사용자가 설정한 시간에 맞춰 위젯을 업데이트할 수 있게 한다</li>
  <li>Entry에서 위젯에 필요한 데이터를 제공한다</li>
  <li>EntryView는 Entry를 통해 구성하며, UI를 담당하는 역할과 유사하다</li>
  <li>Widget에서는 static, intent, activity인지에 따라 최종적인 위젯을 구성한다</li>
</ul>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://velog.io/@s_sub/새싹-iOS-20주차</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Haruhancut" /><summary type="html"><![CDATA[Widget 도입 하루한컷 앱에 위젯을 추가하여 앱의 사진을 위젯으로 보여주려고 한다. 기존 번들 식별자에 App Groups 체크 및 저장 Identifiers에서 com.indextrown.Haruhancut를 찾아서 App Groups 체크박스를 추가 및 저장한다. 1. 위젯용 번들 식별자 준비 com.indextrown.Haruhancut.WidgetExtension로 번들 식별자를 만들고 App Groups만 체크해준다. 이제 프로비저닝 프로파일을 만들건데 편의를 위해 fastlane을 사용하겠다. 2. 프로비저닝 프로파일 만들기 # 기존 프로젝트가 이거면 # match Development com.indextrown.Haruhancut # 위젯은 아래와 같이 프로비저닝 프로파일을 만들어준다. # match Development com.indextrown.Haruhancut.WidgetExtension # 개발용 fastlane match development --app_identifier "com.indextrown.Haruhancut.WidgetExtension" # 배포용 fastlane match appstore --app_identifier "com.indextrown.Haruhancut.WidgetExtension" # ⚠️Provisioning profile "" doesn't include signing ...발생시 fastlane match development --force fastlane match appstore --force 3. Widget Extension 생성 Targets목록 아래 + 버튼 눌러서 WIdget Extension 생성한다. 4. App Groups 설정 기존 프로젝트와 WIdgetExtension 프로젝트에 각각 App Groups 추가한다. WidgetKit iOS 14부터 도입되었으며 SwiftUI로만 구현 가능하다. UIViewRepresentable 불가능하다. Widget COnfiguration(속성 편집에 대한 기능) Static configuration 위젯 편집 항목이 나타나지 않으며, 사용자가 설정을 변경할 수 있는 옵션이 없다. Intent Configuration 위젯 편집 기능을 통해 여러 Intent 값을 수정할 수 있도록 위젯을 구성할 수 있다. iOS 17부터 AppIntentCOnfiguration으로 변경 Activity Configuration Live Activity Widget은 크게 4가지의 struct로 구성 Provider에서 사용자가 설정한 시간에 맞춰 위젯을 업데이트할 수 있게 한다 Entry에서 위젯에 필요한 데이터를 제공한다 EntryView는 Entry를 통해 구성하며, UI를 담당하는 역할과 유사하다 Widget에서는 static, intent, activity인지에 따라 최종적인 위젯을 구성한다 Reference https://velog.io/@s_sub/새싹-iOS-20주차]]></summary></entry><entry><title type="html">[Ubuntu] 우분투 원격 서버 설정</title><link href="http://localhost:4000/Ubuntu-Ubuntu1/" rel="alternate" type="text/html" title="[Ubuntu] 우분투 원격 서버 설정" /><published>2025-05-29T00:00:00+00:00</published><updated>2025-05-29T00:00:00+00:00</updated><id>http://localhost:4000/%5BUbuntu%5D-Ubuntu1</id><content type="html" xml:base="http://localhost:4000/Ubuntu-Ubuntu1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="우분투-원격-서버-설정">우분투 원격 서버 설정</h1>

<p><a href="http://172.30.1.254:8899">kt 공유기 링크</a><br />
장치설정 -&gt; 트래픽 관리 -&gt; 포트포워딩 추가</p>

<p><img src="/assets/img/2025-05-28-%5BUbuntu%5D-Ubuntu1/image-20250529234134757.png" alt="이미지" width="30%" /></p>

<h2 id="cui-세팅-및-접속">CUI 세팅 및 접속</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>openssh-server

<span class="c"># 직접 실행</span>
<span class="nb">sudo </span>systemctl start ssh

<span class="c"># 부팅 시 자동 실행</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>ssh

<span class="c"># 서버 접속</span>
ssh 로그인유저@링크 <span class="nt">-p</span> 포트번호  
</code></pre></div></div>

<h2 id="gui-세틸-및-접속">GUI 세틸 및 접속</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># xrdp, xfce4, lightdm</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>xrdp xfce4 lightdm <span class="nt">-y</span>

<span class="c"># .xsession 파일 재설정</span>
<span class="nb">echo</span> <span class="s2">"startxfce4"</span> <span class="o">&gt;</span> ~/.xsession
<span class="nb">chmod</span> +x ~/.xsession

<span class="c"># 권한/세션 파일 정리</span>
<span class="nb">rm</span> <span class="nt">-f</span> ~/.Xauthority ~/.ICEauthority

<span class="c"># xrdp 서비스 재시작</span>
<span class="nb">sudo </span>systemctl restart xrdp

<span class="c"># lightdm 디스플레이 매니저로 고정</span>
<span class="nb">sudo </span>dpkg-reconfigure lightdm

<span class="c"># Windows APP 프로그램으로 GUI 접속 진행</span>
</code></pre></div></div>

<h2 id="우분투-wake-on-lan-설정">우분투 wake on lan 설정</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ethtool 설치</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>ethtool <span class="nt">-y</span>

<span class="c"># 현재 설정 확인 (유선 NIC명 확인, 예: enp1s0) -&gt; enp1s0, eth0 등 유선랜 이름 확인</span>
ip <span class="nb">link</span>

<span class="c"># "Wake-on: g" 라고 나오면 WOL 지원</span>
<span class="nb">sudo </span>ethtool enp1s0

<span class="c"># d로 되있으면 wake on lan 활성화</span>
<span class="nb">sudo </span>ethtool <span class="nt">-s</span> enp1s0 wol g
<span class="nb">sudo </span>ethtool enp1s0

<span class="c"># 재부팅 시 자동으로 WOL이 켜지도록,</span>
<span class="nb">sudo </span>nmcli connection show

<span class="c"># NAME            UUID                                  TYPE      DEVICE </span>
<span class="c"># netplan-enp1s0  cac41fbe-bc18-3d87-bba7-af2af7f8ffab  ethernet  enp1s0 </span>
<span class="c"># lo              5ee3992e-8232-483a-88d7-6cf21f44d700  loopback  lo     </span>

<span class="c"># 아래 명령어를 입력</span>
<span class="nb">sudo </span>nmcli connection modify <span class="s2">"netplan-enp1s0"</span> 802-3-ethernet.wake-on-lan magic
<span class="nb">sudo </span>systemctl restart NetworkManager




</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Xcode" /><summary type="html"><![CDATA[우분투 원격 서버 설정 kt 공유기 링크 장치설정 -&gt; 트래픽 관리 -&gt; 포트포워딩 추가 CUI 세팅 및 접속 sudo apt update sudo apt install openssh-server # 직접 실행 sudo systemctl start ssh # 부팅 시 자동 실행 sudo systemctl enable ssh # 서버 접속 ssh 로그인유저@링크 -p 포트번호 GUI 세틸 및 접속 # xrdp, xfce4, lightdm sudo apt update sudo apt install xrdp xfce4 lightdm -y # .xsession 파일 재설정 echo "startxfce4" &gt; ~/.xsession chmod +x ~/.xsession # 권한/세션 파일 정리 rm -f ~/.Xauthority ~/.ICEauthority # xrdp 서비스 재시작 sudo systemctl restart xrdp # lightdm 디스플레이 매니저로 고정 sudo dpkg-reconfigure lightdm # Windows APP 프로그램으로 GUI 접속 진행 우분투 wake on lan 설정 # ethtool 설치 sudo apt update sudo apt install ethtool -y # 현재 설정 확인 (유선 NIC명 확인, 예: enp1s0) -&gt; enp1s0, eth0 등 유선랜 이름 확인 ip link # "Wake-on: g" 라고 나오면 WOL 지원 sudo ethtool enp1s0 # d로 되있으면 wake on lan 활성화 sudo ethtool -s enp1s0 wol g sudo ethtool enp1s0 # 재부팅 시 자동으로 WOL이 켜지도록, sudo nmcli connection show # NAME UUID TYPE DEVICE # netplan-enp1s0 cac41fbe-bc18-3d87-bba7-af2af7f8ffab ethernet enp1s0 # lo 5ee3992e-8232-483a-88d7-6cf21f44d700 loopback lo # 아래 명령어를 입력 sudo nmcli connection modify "netplan-enp1s0" 802-3-ethernet.wake-on-lan magic sudo systemctl restart NetworkManager]]></summary></entry><entry><title type="html">[UIComponent] 네비게이션 버튼</title><link href="http://localhost:4000/UIKit-%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98-%EB%B2%84%ED%8A%BC/" rel="alternate" type="text/html" title="[UIComponent] 네비게이션 버튼" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%20%EB%B2%84%ED%8A%BC</id><content type="html" xml:base="http://localhost:4000/UIKit-%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98-%EB%B2%84%ED%8A%BC/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<p>##</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupNavigation</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="kt">UIBarButtonItem</span><span class="p">(</span>
            <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"gearshape.fill"</span><span class="p">),</span>
            <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">plain</span><span class="p">,</span>
            <span class="nv">target</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span>
            <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="UIComponent" /><summary type="html"><![CDATA[## private func setupNavigation() { self.navigationItem.rightBarButtonItem = UIBarButtonItem( image: UIImage(systemName: "gearshape.fill"), style: .plain, target: self, action: #selector(test) ) }]]></summary></entry><entry><title type="html">[RxSwift] 3. RX + MVVM + Input/output 패턴</title><link href="http://localhost:4000/RxSwift-RxSwift-3/" rel="alternate" type="text/html" title="[RxSwift] 3. RX + MVVM + Input/output 패턴" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BRxSwift%5D-RxSwift-3</id><content type="html" xml:base="http://localhost:4000/RxSwift-RxSwift-3/"><![CDATA[<h1 id="rx---mvvm-예시">RX - MVVM 예시</h1>

<h3 id="기존-코드---view와-viewmodel-구분-없이-하나의-코드로-작성">기존 코드 - view와 viewModel 구분 없이 하나의 코드로 작성</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBaag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">coordinator</span><span class="p">:</span> <span class="kt">HomeCoordinator</span><span class="p">?</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="p">()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">homeViewModel</span> <span class="o">=</span> <span class="n">homeViewModel</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">logoutBtn</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"로그아웃"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">logout</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">background</span>
        
        <span class="p">[</span><span class="n">logoutBtn</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>

       
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeUser</span><span class="p">()</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeGroup</span><span class="p">()</span>
            <span class="k">try</span> <span class="kt">Auth</span><span class="o">.</span><span class="nf">auth</span><span class="p">()</span><span class="o">.</span><span class="nf">signOut</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 성공"</span><span class="p">)</span>
            <span class="n">coordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">showLogin</span><span class="p">()</span>
            <span class="n">homeViewModel</span><span class="o">.</span><span class="nf">stopObservingGroup</span><span class="p">()</span>
            
            
        <span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">signOutError</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 실패: %@"</span><span class="p">,</span> <span class="n">signOutError</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">SettingViewController</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">StubHomeViewModel</span><span class="p">(</span><span class="nv">previewPost</span><span class="p">:</span> <span class="o">.</span><span class="n">samplePosts</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="개선-코드---view와-viewmodel-구분">개선 코드 - view와 viewModel 구분</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// View</span>
<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBaag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">coordinator</span><span class="p">:</span> <span class="kt">HomeCoordinator</span><span class="p">?</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="p">()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">homeViewModel</span> <span class="o">=</span> <span class="n">homeViewModel</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">logoutBtn</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"로그아웃"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">bindViewModdel</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">background</span>
        
        <span class="p">[</span><span class="n">logoutBtn</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Binding</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">bindViewModdel</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// [Input] 로그아웃 버튼 탭 이벤트를 ViewModel에 전달</span>
        <span class="n">logoutBtn</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">tap</span>
            <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                <span class="k">self</span><span class="o">.</span><span class="n">viewModel</span><span class="o">.</span><span class="nf">logout</span><span class="p">()</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBaag</span><span class="p">)</span>
        
        <span class="c1">// [Output] 로그아웃 처리 결과에 따라 UI 반응</span>
        <span class="n">viewModel</span><span class="o">.</span><span class="n">logoutResult</span>
            <span class="o">.</span><span class="nf">observe</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">MainScheduler</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                
                <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
                <span class="k">case</span> <span class="o">.</span><span class="nv">success</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 성공"</span><span class="p">)</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">coordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">showLogin</span><span class="p">()</span>
                <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 실패: </span><span class="se">\(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBaag</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// ViewModel</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>
<span class="kd">import</span> <span class="kt">RxCocoa</span>

<span class="kd">protocol</span> <span class="kt">SettingViewModelType</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">logout</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewModel</span><span class="p">:</span> <span class="kt">SettingViewModelType</span> <span class="p">{</span>
    
    <span class="c1">// 로그아웃 결과 이벤트</span>
    <span class="c1">// 로그아웃 결과는 상태가 아닌 한번 일어나는 일회성 이벤트</span>
    <span class="k">let</span> <span class="nv">logoutResult</span> <span class="o">=</span> <span class="kt">PublishRelay</span><span class="o">&lt;</span><span class="kt">Result</span><span class="o">&lt;</span><span class="kt">Void</span><span class="p">,</span> <span class="kt">Error</span><span class="o">&gt;&gt;</span><span class="p">()</span>
    
    <span class="kd">func</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="k">try</span> <span class="kt">Auth</span><span class="o">.</span><span class="nf">auth</span><span class="p">()</span><span class="o">.</span><span class="nf">signOut</span><span class="p">()</span>
            <span class="n">logoutResult</span><span class="o">.</span><span class="nf">accept</span><span class="p">(</span><span class="o">.</span><span class="nf">success</span><span class="p">(()))</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeUser</span><span class="p">()</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeGroup</span><span class="p">()</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="n">logoutResult</span><span class="o">.</span><span class="nf">accept</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="개선-코드---view와-viewmodel-구분-및-inputoutput-패턴-추가">개선 코드 - view와 viewModel 구분 및 Input/Output 패턴 추가</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// View</span>
<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBaag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">coordinator</span><span class="p">:</span> <span class="kt">HomeCoordinator</span><span class="p">?</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="p">()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">homeViewModel</span> <span class="o">=</span> <span class="n">homeViewModel</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">logoutBtn</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"로그아웃"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">bindViewModel</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">background</span>
        
        <span class="p">[</span><span class="n">logoutBtn</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Binding</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">bindViewModel</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Input: 버튼 탭 이벤트를 viewModel로 전달</span>
        <span class="k">let</span> <span class="nv">input</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="o">.</span><span class="kt">Input</span><span class="p">(</span><span class="nv">logoutTapped</span><span class="p">:</span> <span class="n">logoutBtn</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">tap</span><span class="o">.</span><span class="nf">asObservable</span><span class="p">())</span>
        
        <span class="c1">// Output: transform으로부터 결과 스트림 반환</span>
        <span class="k">let</span> <span class="nv">output</span> <span class="o">=</span> <span class="n">viewModel</span><span class="o">.</span><span class="nf">transform</span><span class="p">(</span><span class="nv">input</span><span class="p">:</span> <span class="n">input</span><span class="p">)</span>
            
        <span class="c1">// Output에 따라 UI 처리</span>
        <span class="n">output</span><span class="o">.</span><span class="n">logoutResult</span>
            <span class="o">.</span><span class="nf">drive</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                
                <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
                <span class="k">case</span> <span class="o">.</span><span class="nv">success</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 성공"</span><span class="p">)</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">coordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">showLogin</span><span class="p">()</span>
                <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 실패: </span><span class="se">\(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
                
            <span class="p">})</span><span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBaag</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// ViewModel</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>
<span class="kd">import</span> <span class="kt">RxCocoa</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewModel</span> <span class="p">{</span>
    
    <span class="c1">// Rx 리소스 해제를 위한 DisposeBag</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="c1">// View로부터 전달받을 사용자 이벤트 정의</span>
    <span class="kd">struct</span> <span class="kt">Input</span> <span class="p">{</span>
        <span class="c1">// 로그아웃 버튼 탭이벤트</span>
        <span class="k">let</span> <span class="nv">logoutTapped</span><span class="p">:</span> <span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Void</span><span class="o">&gt;</span>
    <span class="p">}</span>
    
    <span class="c1">// View에 전달할 출력 데이터 정의</span>
    <span class="kd">struct</span> <span class="kt">Output</span> <span class="p">{</span>
        <span class="c1">// 로그아웃 성공 또는 실패에 대한 결과 스트림</span>
        <span class="c1">// Driver를 사용하여 메인스레드에서 UI 바인딩에 안전하게 처리</span>
        <span class="k">let</span> <span class="nv">logoutResult</span><span class="p">:</span> <span class="kt">Driver</span><span class="o">&lt;</span><span class="kt">Result</span><span class="o">&lt;</span><span class="kt">Void</span><span class="p">,</span> <span class="kt">LoginError</span><span class="o">&gt;&gt;</span>
    <span class="p">}</span>
    
    <span class="c1">/// Input을 받아 내부 로직을 수행 후 Output을 반환하는 함수</span>
    <span class="c1">/// - Parameter input: View에서 발생한 이벤트</span>
    <span class="c1">/// - Returns: 로그아웃 결과를 포함하는 Output</span>
    <span class="kd">func</span> <span class="nf">transform</span><span class="p">(</span><span class="nv">input</span><span class="p">:</span> <span class="kt">Input</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Output</span> <span class="p">{</span>
        
        <span class="c1">// 로그아웃 버튼 탭시 로직을 수행하고 결과를 result로 반환</span>
        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">logoutTapped</span>
            <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="kt">Result</span><span class="o">&lt;</span><span class="kt">Void</span><span class="p">,</span> <span class="kt">LoginError</span><span class="o">&gt;</span> <span class="k">in</span>
                <span class="k">do</span> <span class="p">{</span>
                    <span class="k">try</span> <span class="kt">Auth</span><span class="o">.</span><span class="nf">auth</span><span class="p">()</span><span class="o">.</span><span class="nf">signOut</span><span class="p">()</span>
                    <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeUser</span><span class="p">()</span>
                    <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeGroup</span><span class="p">()</span>
                    <span class="k">return</span> <span class="o">.</span><span class="nf">success</span><span class="p">(())</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="n">logoutError</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="c1">// 에러가 발생하더라도 UI가 멈추지 않고 기본 오류값으로 처리</span>
            <span class="p">}</span><span class="o">.</span><span class="nf">asDriver</span><span class="p">(</span><span class="nv">onErrorJustReturn</span><span class="p">:</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="n">logoutError</span><span class="p">))</span>
        
        <span class="c1">// View에서 사용할 Output rntjd</span>
        <span class="k">return</span> <span class="kt">Output</span><span class="p">(</span><span class="nv">logoutResult</span><span class="p">:</span> <span class="n">result</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="ReactiveX" /><category term="RxSwift" /><summary type="html"><![CDATA[RX - MVVM 예시 기존 코드 - view와 viewModel 구분 없이 하나의 코드로 작성 import UIKit import FirebaseAuth import RxSwift final class SettingViewController: UIViewController { private let disposeBaag = DisposeBag() weak var coordinator: HomeCoordinator? private let viewModel = SettingViewModel() private let homeViewModel: HomeViewModelType init(homeViewModel: HomeViewModelType) { self.homeViewModel = homeViewModel super.init(nibName: nil, bundle: nil) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Component private lazy var logoutBtn: UIButton = { let button = UIButton(type: .system) button.setTitle("로그아웃", for: .normal) button.addTarget(self, action: #selector(logout), for: .touchUpInside) return button }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .background [logoutBtn].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ logoutBtn.centerXAnchor.constraint(equalTo: view.centerXAnchor), logoutBtn.centerYAnchor.constraint(equalTo: view.centerYAnchor), ]) } @objc func logout() { do { UserDefaultsManager.shared.removeUser() UserDefaultsManager.shared.removeGroup() try Auth.auth().signOut() print("로그아웃 성공") coordinator?.showLogin() homeViewModel.stopObservingGroup() } catch let signOutError as NSError { print("로그아웃 실패: %@", signOutError) } } } #Preview { SettingViewController(homeViewModel: StubHomeViewModel(previewPost: .samplePosts[0])) } 개선 코드 - view와 viewModel 구분 // View import UIKit import FirebaseAuth import RxSwift final class SettingViewController: UIViewController { private let disposeBaag = DisposeBag() weak var coordinator: HomeCoordinator? private let viewModel = SettingViewModel() private let homeViewModel: HomeViewModelType init(homeViewModel: HomeViewModelType) { self.homeViewModel = homeViewModel super.init(nibName: nil, bundle: nil) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Component private lazy var logoutBtn: UIButton = { let button = UIButton(type: .system) button.setTitle("로그아웃", for: .normal) return button }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() bindViewModdel() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .background [logoutBtn].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ logoutBtn.centerXAnchor.constraint(equalTo: view.centerXAnchor), logoutBtn.centerYAnchor.constraint(equalTo: view.centerYAnchor), ]) } // MARK: - Binding private func bindViewModdel() { // [Input] 로그아웃 버튼 탭 이벤트를 ViewModel에 전달 logoutBtn.rx.tap .bind(onNext: { [weak self] in guard let self = self else { return } self.viewModel.logout() }) .disposed(by: disposeBaag) // [Output] 로그아웃 처리 결과에 따라 UI 반응 viewModel.logoutResult .observe(on: MainScheduler.instance) .subscribe(onNext: { [weak self] result in guard let self = self else { return } switch result { case .success: print("로그아웃 성공") self.coordinator?.showLogin() case .failure(let error): print("로그아웃 실패: \(error.localizedDescription)") } }) .disposed(by: disposeBaag) } } // ViewModel import FirebaseAuth import RxSwift import RxCocoa protocol SettingViewModelType { func logout() } final class SettingViewModel: SettingViewModelType { // 로그아웃 결과 이벤트 // 로그아웃 결과는 상태가 아닌 한번 일어나는 일회성 이벤트 let logoutResult = PublishRelay&lt;Result&lt;Void, Error&gt;&gt;() func logout() { do { try Auth.auth().signOut() logoutResult.accept(.success(())) UserDefaultsManager.shared.removeUser() UserDefaultsManager.shared.removeGroup() } catch { logoutResult.accept(.failure(error)) } } } 개선 코드 - view와 viewModel 구분 및 Input/Output 패턴 추가 // View import UIKit import FirebaseAuth import RxSwift final class SettingViewController: UIViewController { private let disposeBaag = DisposeBag() weak var coordinator: HomeCoordinator? private let viewModel = SettingViewModel() private let homeViewModel: HomeViewModelType init(homeViewModel: HomeViewModelType) { self.homeViewModel = homeViewModel super.init(nibName: nil, bundle: nil) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Component private lazy var logoutBtn: UIButton = { let button = UIButton(type: .system) button.setTitle("로그아웃", for: .normal) return button }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() bindViewModel() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .background [logoutBtn].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ logoutBtn.centerXAnchor.constraint(equalTo: view.centerXAnchor), logoutBtn.centerYAnchor.constraint(equalTo: view.centerYAnchor), ]) } // MARK: - Binding private func bindViewModel() { // Input: 버튼 탭 이벤트를 viewModel로 전달 let input = SettingViewModel.Input(logoutTapped: logoutBtn.rx.tap.asObservable()) // Output: transform으로부터 결과 스트림 반환 let output = viewModel.transform(input: input) // Output에 따라 UI 처리 output.logoutResult .drive(onNext: { [weak self] result in guard let self = self else { return } switch result { case .success: print("로그아웃 성공") self.coordinator?.showLogin() case .failure(let error): print("로그아웃 실패: \(error.localizedDescription)") } }).disposed(by: disposeBaag) } } // ViewModel import FirebaseAuth import RxSwift import RxCocoa final class SettingViewModel { // Rx 리소스 해제를 위한 DisposeBag private let disposeBag = DisposeBag() // View로부터 전달받을 사용자 이벤트 정의 struct Input { // 로그아웃 버튼 탭이벤트 let logoutTapped: Observable&lt;Void&gt; } // View에 전달할 출력 데이터 정의 struct Output { // 로그아웃 성공 또는 실패에 대한 결과 스트림 // Driver를 사용하여 메인스레드에서 UI 바인딩에 안전하게 처리 let logoutResult: Driver&lt;Result&lt;Void, LoginError&gt;&gt; } /// Input을 받아 내부 로직을 수행 후 Output을 반환하는 함수 /// - Parameter input: View에서 발생한 이벤트 /// - Returns: 로그아웃 결과를 포함하는 Output func transform(input: Input) -&gt; Output { // 로그아웃 버튼 탭시 로직을 수행하고 결과를 result로 반환 let result = input.logoutTapped .map { _ -&gt; Result&lt;Void, LoginError&gt; in do { try Auth.auth().signOut() UserDefaultsManager.shared.removeUser() UserDefaultsManager.shared.removeGroup() return .success(()) } catch { return .failure(.logoutError) } // 에러가 발생하더라도 UI가 멈추지 않고 기본 오류값으로 처리 }.asDriver(onErrorJustReturn: .failure(.logoutError)) // View에서 사용할 Output rntjd return Output(logoutResult: result) } }]]></summary></entry><entry><title type="html">[Programmers] 5. 행렬의 곱셈</title><link href="http://localhost:4000/Programmers-5/" rel="alternate" type="text/html" title="[Programmers] 5. 행렬의 곱셈" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-5</id><content type="html" xml:base="http://localhost:4000/Programmers-5/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/05.cpp  <br />
https://school.programmers.co.kr/learn/courses/30/lessons/12949<br />
2차원 배열 arr1과 arr2를 입력받아 arr1에 arr2를 행렬 곱한 결과를 반환하는 solution() 함수를 완성하라</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>배열 arr1, arr2의 행과 열의 길이는 2이상 100 이하이다.</li>
  <li>배열 arr1, arr2의 데이터는 -10 이상 20 이하인 자연수다.</li>
  <li>행렬 곱 할 수 있는 배열만 주어진다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[[1, 4], [3, 2], [4, 1]] <br />
[[3, 3], [3, 3]]<br />
-&gt; [[15, 15], [15, 15], [15, 15]]</p>

<p>[[2, 3, 2], [4, 2, 4], [3, 1, 4]]<br />
[[5, 4, 3], [2, 4, 1], [3, 1, 1]]<br />
-&gt; [[22, 22, 11], [36, 28, 18], [29, 20, 14]]</p>

<h1 id="풀이">풀이</h1>
<p>행렬 ( A ) (크기 ( m \times n ))와 행렬 ( B ) (크기 ( n \times p ))의 곱은 행렬 ( C = AB ) (크기 ( m \times p ))로 정의된다.</p>

\[C_{ij} = \sum_{k=1}^{n} A_{ik} \cdot B_{kj}\]

<p>즉, ( C )의 ( i )행 ( j )열 원소는 ( A )의 ( i )행과 ( B )의 ( j )열의 내적이다.</p>

<hr />

<h2 id="-예시-1-2x2-행렬-곱셈">🔢 예시 1: 2x2 행렬 곱셈</h2>

\[A =
\begin{bmatrix}
1 &amp; 2 \\\\
3 &amp; 4
\end{bmatrix},
\quad
B =
\begin{bmatrix}
5 &amp; 6 \\\\
7 &amp; 8
\end{bmatrix}\]

\[AB =
\begin{bmatrix}
1 \cdot 5 + 2 \cdot 7 &amp; 1 \cdot 6 + 2 \cdot 8 \\\\
3 \cdot 5 + 4 \cdot 7 &amp; 3 \cdot 6 + 4 \cdot 8
\end{bmatrix}
=
\begin{bmatrix}
19 &amp; 22 \\\\
43 &amp; 50
\end{bmatrix}\]

<hr />

<h2 id="-예시-2-3x3-행렬-곱셈">🔢 예시 2: 3x3 행렬 곱셈</h2>

\[A =
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\\\
4 &amp; 5 &amp; 6 \\\\
7 &amp; 8 &amp; 9
\end{bmatrix},
\quad
B =
\begin{bmatrix}
9 &amp; 8 &amp; 7 \\\\
6 &amp; 5 &amp; 4 \\\\
3 &amp; 2 &amp; 1
\end{bmatrix}\]

\[AB =
\begin{bmatrix}
30 &amp; 24 &amp; 18 \\\\
84 &amp; 69 &amp; 54 \\\\
138 &amp; 114 &amp; 90
\end{bmatrix}\]

<p>A 행렬의 크기가 (M<em>K)이고, B 행렬의 크기가 (K</em>N)일 때 두 행렬의 곱 연산은 행렬 A의 행의 개수(K)와 행렬 B의 열의 개수(k)가 같아야 하며 K를 기준으로 곱하기 때문에 행렬 곱 결과는 M * N이 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">arr1</span><span class="p">:</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]],</span> <span class="n">_</span> <span class="nv">arr2</span><span class="p">:</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">rows</span> <span class="o">=</span> <span class="n">arr1</span><span class="o">.</span><span class="n">count</span>
    <span class="k">let</span> <span class="nv">cols</span> <span class="o">=</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">count</span>

    <span class="c1">// 최종 행렬 곱 결과를 저장할 배열 선언</span>
    <span class="k">var</span> <span class="nv">answer</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">cols</span><span class="p">),</span> <span class="nv">count</span><span class="p">:</span> <span class="n">rows</span><span class="p">)</span>
    
    <span class="c1">// arr1의 각 행과 arr2의 각 열에 대해 반복문 수행</span>
    <span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">rows</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">cols</span> <span class="p">{</span>
            <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">arr2</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">+=</span> <span class="n">arr1</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">arr2</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">col</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>        
    <span class="k">return</span> <span class="n">answer</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">print2D</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="n">vec</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="nf">print</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print2D</span><span class="p">(</span><span class="nf">solution</span><span class="p">(</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
        <span class="p">]))</span>
    
    <span class="nf">print2D</span><span class="p">(</span><span class="nf">solution</span><span class="p">(</span>
        <span class="p">[</span>
           <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">4</span> <span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
        <span class="p">]))</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">arr1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">arr2</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="c1">// 최종 행렬 곱 결과를 저장할 벡터 선언</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">answer</span><span class="p">;</span>
    
    <span class="c1">// arr1, arr2 행렬 곱을 수행했을 때 최종 행렬의 크기만큼 공간을 할당</span>
    <span class="n">answer</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">arr1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">));</span>
    
    <span class="c1">// arr1의 각 행과 arr2의 각 열에 대해 반복문 수행</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">arr2</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">arr2</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/05.cpp https://school.programmers.co.kr/learn/courses/30/lessons/12949 2차원 배열 arr1과 arr2를 입력받아 arr1에 arr2를 행렬 곱한 결과를 반환하는 solution() 함수를 완성하라 제약조건 배열 arr1, arr2의 행과 열의 길이는 2이상 100 이하이다. 배열 arr1, arr2의 데이터는 -10 이상 20 이하인 자연수다. 행렬 곱 할 수 있는 배열만 주어진다. 입출력 예 [[1, 4], [3, 2], [4, 1]] [[3, 3], [3, 3]] -&gt; [[15, 15], [15, 15], [15, 15]] [[2, 3, 2], [4, 2, 4], [3, 1, 4]] [[5, 4, 3], [2, 4, 1], [3, 1, 1]] -&gt; [[22, 22, 11], [36, 28, 18], [29, 20, 14]] 풀이 행렬 ( A ) (크기 ( m \times n ))와 행렬 ( B ) (크기 ( n \times p ))의 곱은 행렬 ( C = AB ) (크기 ( m \times p ))로 정의된다. \[C_{ij} = \sum_{k=1}^{n} A_{ik} \cdot B_{kj}\] 즉, ( C )의 ( i )행 ( j )열 원소는 ( A )의 ( i )행과 ( B )의 ( j )열의 내적이다. 🔢 예시 1: 2x2 행렬 곱셈 \[A = \begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \end{bmatrix}, \quad B = \begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \end{bmatrix}\] \[AB = \begin{bmatrix} 1 \cdot 5 + 2 \cdot 7 &amp; 1 \cdot 6 + 2 \cdot 8 \\\\ 3 \cdot 5 + 4 \cdot 7 &amp; 3 \cdot 6 + 4 \cdot 8 \end{bmatrix} = \begin{bmatrix} 19 &amp; 22 \\\\ 43 &amp; 50 \end{bmatrix}\] 🔢 예시 2: 3x3 행렬 곱셈 \[A = \begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \end{bmatrix}, \quad B = \begin{bmatrix} 9 &amp; 8 &amp; 7 \\\\ 6 &amp; 5 &amp; 4 \\\\ 3 &amp; 2 &amp; 1 \end{bmatrix}\] \[AB = \begin{bmatrix} 30 &amp; 24 &amp; 18 \\\\ 84 &amp; 69 &amp; 54 \\\\ 138 &amp; 114 &amp; 90 \end{bmatrix}\] A 행렬의 크기가 (MK)이고, B 행렬의 크기가 (KN)일 때 두 행렬의 곱 연산은 행렬 A의 행의 개수(K)와 행렬 B의 열의 개수(k)가 같아야 하며 K를 기준으로 곱하기 때문에 행렬 곱 결과는 M * N이 된다. import Foundation func solution(_ arr1: [[Int]], _ arr2: [[Int]]) -&gt; [[Int]] { let rows = arr1.count let cols = arr2[0].count // 최종 행렬 곱 결과를 저장할 배열 선언 var answer = Array(repeating: Array(repeating: 0, count: cols), count: rows) // arr1의 각 행과 arr2의 각 열에 대해 반복문 수행 for row in 0..&lt;rows { for col in 0..&lt;cols { for k in 0..&lt;arr2.count { answer[row][col] += arr1[row][k] * arr2[k][col] } } } return answer } func print2D(_ vec: [[Int]]) { for row in vec { print(row.map { String($0) }.joined(separator: " ")) } print() } func main() { print2D(solution( [ [1, 4], [2, 3], [4, 1] ], [ [3, 3], [3, 3] ])) print2D(solution( [ [2, 3, 2], [4 ,2, 4], [3, 1, 4] ], [ [5, 4, 3], [2, 4, 1], [3, 1, 1] ])) } main() #include &lt;string&gt; #include &lt;vector&gt; using namespace std; vector&lt;vector&lt;int&gt;&gt; solution(vector&lt;vector&lt;int&gt;&gt; arr1, vector&lt;vector&lt;int&gt;&gt; arr2) { // 최종 행렬 곱 결과를 저장할 벡터 선언 vector&lt;vector&lt;int&gt;&gt; answer; // arr1, arr2 행렬 곱을 수행했을 때 최종 행렬의 크기만큼 공간을 할당 answer.assign(arr1.size(), vector&lt;int&gt;(arr2[1].size(), 0)); // arr1의 각 행과 arr2의 각 열에 대해 반복문 수행 for (int i=0; i&lt;arr1.size(); i++) { for (int j=0; j&lt;arr2[0].size(); j++) { for (int k=0; k&lt;arr2.size(); k++) { answer[i][j] += arr1[i][k] * arr2[k][j]; } } } return answer; }]]></summary></entry><entry><title type="html">[Library] Kingfisher</title><link href="http://localhost:4000/Library-Kingfisher/" rel="alternate" type="text/html" title="[Library] Kingfisher" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BLibrary%5D-Kingfisher</id><content type="html" xml:base="http://localhost:4000/Library-Kingfisher/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="kingfisher-기능">Kingfisher 기능</h1>
<ul>
  <li>이미지 로드 기능(url을 넘겨주면 이미지를 로드한다)</li>
  <li>이미지 캐시 기능</li>
  <li>UIImageView에 편리하게 round 처리 기능</li>
  <li>이미지 다운로드 기능</li>
</ul>

<h2 id="이미지-로드-기능">이미지 로드 기능</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">loadImage</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https:</span><span class="se">\\</span><span class="s">..."</span><span class="p">)</span>
    <span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="indicator-기능">Indicator 기능</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="n">indicatorType</span> <span class="o">=</span> <span class="o">.</span><span class="n">activity</span>
<span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span>
    <span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span>
    <span class="nv">placeHolder</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="nv">options</span><span class="p">:</span> <span class="kc">nil</span><span class="o">.</span>
    <span class="nv">completionHandler</span><span class="p">:</span> <span class="kc">nil</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="예제코드">예제코드</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Kingfisher</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">KingfisherViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">myImageView</span><span class="p">:</span> <span class="kt">UIImageView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImageView</span><span class="p">()</span>
        <span class="n">image</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">image</span><span class="o">.</span><span class="n">clipsToBounds</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">image</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">loadImage</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">myImageView</span><span class="p">)</span>
        <span class="n">myImageView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myImageView</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
            <span class="n">myImageView</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            
            <span class="n">myImageView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">300</span><span class="p">),</span>
            <span class="n">myImageView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">200</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">loadImage</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv8sv01DK7BoJGaJMZ972ig5mQ_JBbqxdINQ&amp;s"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                
        <span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">KingfisherViewController</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>

<p><img src="/assets/img/2025-05-28-%5BLibrary%5D-Kingfisher/image-20250528220449050.png" alt="이미지" width="50%" /></p>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://ios-development.tistory.com/793</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Library" /><summary type="html"><![CDATA[Kingfisher 기능 이미지 로드 기능(url을 넘겨주면 이미지를 로드한다) 이미지 캐시 기능 UIImageView에 편리하게 round 처리 기능 이미지 다운로드 기능 이미지 로드 기능 private func loadImage() { guard let url = URL(string: "https:\\...") myImageView.kf.setImage(with: url) } Indicator 기능 myImageView.kf.indicatorType = .activity myImageView.kf.setImage( with: url, placeHolder: nil, options: nil. completionHandler: nil ) 예제코드 import UIKit import Kingfisher final class KingfisherViewController: UIViewController { private lazy var myImageView: UIImageView = { let image = UIImageView() image.layer.cornerRadius = 30 image.clipsToBounds = true return image }() override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() loadImage() } private func makeUI() { view.backgroundColor = .white view.addSubview(myImageView) myImageView.translatesAutoresizingMaskIntoConstraints = false } private func constraints() { NSLayoutConstraint.activate([ myImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor), myImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor), myImageView.widthAnchor.constraint(equalToConstant: 300), myImageView.heightAnchor.constraint(equalToConstant: 200) ]) } private func loadImage() { guard let url = URL(string: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv8sv01DK7BoJGaJMZ972ig5mQ_JBbqxdINQ&amp;s") else { return } myImageView.kf.setImage(with: url) } } #Preview { KingfisherViewController() } Reference https://ios-development.tistory.com/793]]></summary></entry></feed>