<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-09-04T09:00:31+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[CustomView] 1. 커스텀뷰 만들기</title><link href="http://localhost:4000/CustomView-customView1/" rel="alternate" type="text/html" title="[CustomView] 1. 커스텀뷰 만들기" /><published>2025-09-04T00:00:00+00:00</published><updated>2025-09-04T00:00:00+00:00</updated><id>http://localhost:4000/%5BCustomView%5D-customView1</id><content type="html" xml:base="http://localhost:4000/CustomView-customView1/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<h2 id="커스텀뷰-만들기">커스텀뷰 만들기</h2>
<p><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904153909426.png" alt="이미지" width="30%" /><br />
우선 Storyboard에서 사진 처럼 UI를 만든다. Button을 hstack으로 묶고, label, textfield, hstack을 vstack으로 묶는다. 그리고 view를 embed하고 색성을 주고, vstack을 view로 드래그하여 상하좌우 전부 10씩 공간을 주고, 이 view를 safearea top: 10, leading: 10, horizontal center 설정을 해주었다.</p>

<p>그리고 이 화면을 복사하고 empty라는 파일을 만들어서 파일이름을 InputView로 하고 여기에 붙여넣는다 이 파일을 nib 파일(인터페이스 빌더)이라고 부른다.</p>

<p><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904154758361.png" alt="이미지" width="30%" /></p>

<p><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904155040418.png" alt="이미지" width="30%" /></p>

<p>그럼 InputView에서 이렇게 깨지는데 사이즈 인스펙터(삼각형) 부분에서 Layout Guides에서 Safe area 제거한다. 그리고 View를 누르고 attribute(삼각형 바로 왼쪽) 눌러서 Size를 Inferred에서 Freform으로 바꾼다. 그러면 사이즈를 편하게 조절할 수 있다.</p>

<p><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904155715893.png" alt="이미지" width="70%" /><br />
file owner에서 코드 클래스를 연결한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 코드 클래스</span>
<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904160046690.png" alt="이미지" width="30%" /><br />
View를 생성후 노란색 View에 드래그해서 Vertical Spacing, Leading, Trailing, Equal Height 설정을 해준다.</p>

<p><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904160335271.png" alt="이미지" width="30%" /><br />
새로 만든 뷰를 SecondInputView로 하고 option + cmd + 4하고 class를 InputView로 해준다.<br />
그리고 실행해보면 아래 awakefromnib은 탔다고 로그가 뜨지만 우리가 원하는 Nib파일과의 연결이 안되서 여전히 민트색으로 나온다. <br />
이를 해결해보자.</p>

<table>
  <tr>
    <td><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904161610102.png" alt="Before" width="90%" /></td>
    <td><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904162604822.png" alt="After" width="80%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Before</td>
    <td style="text-align:center;">After(applyNib 생성/호출)</td>
  </tr>
</table>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 로그</span>
<span class="kt">SwiftUILab</span><span class="o">/</span><span class="kt">InputView</span><span class="o">.</span><span class="n">swift</span> <span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:)</span> <span class="mi">26</span> <span class="o">-</span> 
<span class="kt">SwiftUILab</span><span class="o">/</span><span class="kt">InputView</span><span class="o">.</span><span class="n">swift</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="mi">15</span> <span class="o">-</span> 
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
 
<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">nibName</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>     <span class="c1">// 나의 타입을 가져온다 "InputView"</span>
        <span class="k">let</span> <span class="nv">nib</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">loadNibNamed</span><span class="p">(</span><span class="n">nibName</span><span class="p">,</span> <span class="nv">owner</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>  <span class="c1">// Bundle에서 Nib파일을 불러오겠다, 주인은 self</span>
        
        <span class="c1">// nib의 첫 요소를 UIView 형태로 가져오겠다</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">nib</span><span class="p">?</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// autoLauout</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="추가-라벨-버튼-텍스트필드-각각-커스텀하고싶다면">추가: 라벨, 버튼, 텍스트필드 각각 커스텀하고싶다면</h2>
<p>각각 Nib에서 InputView 코드로 드래그해주고 커스텀을 하면되는데, 코드로 해도 되지만 <br />
@IBInspactable를 활용하면 Interface Builder에서 편하게 수정할 수 있다.<br />
수정은 Main 즉 호출쪽에서 UserDefined Runtime Attributes에서 넣어주면 된다.</p>

<table>
  <tr>
    <td><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904164204030.png" alt="Before" width="80%" /></td>
    <td><img src="/assets/img/2025-09-04-%5BCustomView%5D-customView1/image-20250904164312431.png" alt="After" width="80%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">파란칸 작성</td>
    <td style="text-align:center;">실행 화면</td>
  </tr>
</table>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
 
<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">inputTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonA</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonB</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="c1">// @IBInspectable: Interface Builder에서 속성을 넣어주는 역할</span>
    <span class="c1">// 프로퍼티 옵저버</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="s">"글자를 입력해주세요"</span> <span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">nibName</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>     <span class="c1">// 나의 타입을 가져온다 "InputView"</span>
        <span class="k">let</span> <span class="nv">nib</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">loadNibNamed</span><span class="p">(</span><span class="n">nibName</span><span class="p">,</span> <span class="nv">owner</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>  <span class="c1">// Bundle에서 Nib파일을 불러오겠다, 주인은 self</span>
        
        <span class="c1">// nib의 첫 요소를 UIView 형태로 가져오겠다</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">nib</span><span class="p">?</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// autoLauout</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="코드로-ui-만드는법">코드로 UI 만드는법</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CustomStoryboardViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">secondInputView</span><span class="p">:</span> <span class="kt">InputView</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">loadView</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">thirdInputView</span> <span class="o">=</span> <span class="kt">InputView</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"편의생성자 타이틀"</span><span class="p">,</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="s">"편의생성자 홀더"</span><span class="p">)</span>
        <span class="n">thirdInputView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">thirdInputView</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// override init(frame: CGRect)에 applyNib 호출 추가, 편의생성자 추가하여 뷰 생성시 title, placeHolder 파라미터 받기</span>
<span class="kd">import</span> <span class="kt">UIKit</span>
 
<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">inputTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonA</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonB</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="c1">// @IBInspectable: Interface Builder에서 속성을 넣어주는 역할</span>
    <span class="c1">// 프로퍼티 옵저버</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="s">"글자를 입력해주세요"</span> <span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span> <span class="c1">// MARK: - 이거 추가</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 편의생성자 추가</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">title</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeHolder</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">nibName</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>     <span class="c1">// 나의 타입을 가져온다 "InputView"</span>
        <span class="k">let</span> <span class="nv">nib</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">loadNibNamed</span><span class="p">(</span><span class="n">nibName</span><span class="p">,</span> <span class="nv">owner</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>  <span class="c1">// Bundle에서 Nib파일을 불러오겠다, 주인은 self</span>
        
        <span class="c1">// nib의 첫 요소를 UIView 형태로 가져오겠다</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">nib</span><span class="p">?</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// autoLauout</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="버튼-연결-추가법">버튼 연결 추가법</h2>
<p>applyNib 메서드를 추가하면된다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
 
<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">inputTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonA</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonB</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="c1">// @IBInspectable: Interface Builder에서 속성을 넣어주는 역할</span>
    <span class="c1">// 프로퍼티 옵저버</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="s">"글자를 입력해주세요"</span> <span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span>
        <span class="nf">applyAction</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span> <span class="c1">// MARK: - 이거 추가</span>
        <span class="nf">applyAction</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 편의생성자 추가</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">title</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeHolder</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">nibName</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>     <span class="c1">// 나의 타입을 가져온다 "InputView"</span>
        <span class="k">let</span> <span class="nv">nib</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">loadNibNamed</span><span class="p">(</span><span class="n">nibName</span><span class="p">,</span> <span class="nv">owner</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>  <span class="c1">// Bundle에서 Nib파일을 불러오겠다, 주인은 self</span>
        
        <span class="c1">// nib의 첫 요소를 UIView 형태로 가져오겠다</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">nib</span><span class="p">?</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// autoLauout</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonA</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonB</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">InputView</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="텍스트필드-연결-추가법">텍스트필드 연결 추가법</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
 
<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">inputTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonA</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonB</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="c1">// @IBInspectable: Interface Builder에서 속성을 넣어주는 역할</span>
    <span class="c1">// 프로퍼티 옵저버</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="s">"글자를 입력해주세요"</span> <span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span>
        <span class="nf">applyAction</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span> <span class="c1">// MARK: - 이거 추가</span>
        <span class="nf">applyAction</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 편의생성자 추가</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">title</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeHolder</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">nibName</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>     <span class="c1">// 나의 타입을 가져온다 "InputView"</span>
        <span class="k">let</span> <span class="nv">nib</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">loadNibNamed</span><span class="p">(</span><span class="n">nibName</span><span class="p">,</span> <span class="nv">owner</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>  <span class="c1">// Bundle에서 Nib파일을 불러오겠다, 주인은 self</span>
        
        <span class="c1">// nib의 첫 요소를 UIView 형태로 가져오겠다</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">nib</span><span class="p">?</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// autoLauout</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonA</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonB</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="p">)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">editingChanged</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">InputView</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">selder</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 텍스트필드 이벤트 받는법 delegate도 되지만 간단하게 selector로도 된다</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UITextField</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- input: </span><span class="se">\(</span><span class="n">sender</span><span class="o">.</span><span class="n">text</span><span class="o">!</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="액션을-viewcontroller에서-받고-싶다">액션을 viewController에서 받고 싶다</h2>
<ul>
  <li>클로저를 활용하자.</li>
  <li>클로저는 정의, 할당, 호출 3가지를 기억하면 된다.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  InputView.swift</span>
<span class="c1">//  SwiftUILab</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 9/4/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>
 
<span class="kd">class</span> <span class="kt">InputView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">inputTextField</span><span class="p">:</span> <span class="kt">UITextField</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonA</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">buttonB</span><span class="p">:</span> <span class="kt">UIButton</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">onBtnAClicked</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span> <span class="o">=</span> <span class="kc">nil</span>
    <span class="k">var</span> <span class="nv">onBtnBClicked</span><span class="p">:</span> <span class="p">((</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="c1">// @IBInspectable: Interface Builder에서 속성을 넣어주는 역할</span>
    <span class="c1">// 프로퍼티 옵저버</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="s">"글자를 입력해주세요"</span> <span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">placeHolder</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">/// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder)</span>
    <span class="c1">/// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span>
        <span class="nf">applyAction</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 코드로 InputView를 생성한다면 사용하는 생성자</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">applyNib</span><span class="p">()</span> <span class="c1">// MARK: - 이거 추가</span>
        <span class="nf">applyAction</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 편의생성자 추가</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span> <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">title</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeHolder</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 버튼 세번째 방식</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span><span class="p">,</span>
                     <span class="nv">placeHolder</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
                     <span class="nv">onBtnAClicked</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
                     <span class="nv">onBtnBClicked</span><span class="p">:</span> <span class="p">((</span><span class="kt">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span> <span class="o">=</span> <span class="kc">nil</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">title</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">placeholder</span> <span class="o">=</span> <span class="n">placeHolder</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">onBtnAClicked</span> <span class="o">=</span> <span class="n">onBtnAClicked</span>
        <span class="k">self</span><span class="o">.</span><span class="n">onBtnBClicked</span> <span class="o">=</span> <span class="n">onBtnBClicked</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span> <span class="c1">// 스토리보드용</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">/// fatalError("init(coder:) has not been implemented") // 코드용</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">nibName</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>     <span class="c1">// 나의 타입을 가져온다 "InputView"</span>
        <span class="k">let</span> <span class="nv">nib</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">loadNibNamed</span><span class="p">(</span><span class="n">nibName</span><span class="p">,</span> <span class="nv">owner</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>  <span class="c1">// Bundle에서 Nib파일을 불러오겠다, 주인은 self</span>
        
        <span class="c1">// nib의 첫 요소를 UIView 형태로 가져오겠다</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="n">nib</span><span class="p">?</span><span class="o">.</span><span class="n">first</span> <span class="k">as?</span> <span class="kt">UIView</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        
        <span class="c1">// autoLauout</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">view</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyAction</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonA</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonB</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="p">)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">editingChanged</span><span class="p">)</span>
    <span class="p">}</span>
    
   
    <span class="kd">func</span> <span class="nf">resetAction</span><span class="p">(</span><span class="nv">target</span><span class="p">:</span> <span class="kt">Any</span><span class="p">?,</span>
                     <span class="nv">aBtnAction</span><span class="p">:</span> <span class="kt">Selector</span><span class="p">,</span>
                     <span class="nv">bBtnAction</span><span class="p">:</span> <span class="kt">Selector</span><span class="p">,</span>
                     <span class="nv">inputChangeAction</span><span class="p">:</span> <span class="kt">Selector</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="c1">// 이전 걸려있던 액션 지우기</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonA</span><span class="o">.</span><span class="nf">removeTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonB</span><span class="o">.</span><span class="nf">removeTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="nf">removeTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="p">)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">editingChanged</span><span class="p">)</span>
        <span class="c1">// 새 액션 넣기</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonA</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="n">aBtnAction</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">buttonB</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="n">bBtnAction</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="n">target</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="n">inputChangeAction</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">editingChanged</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">InputView</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="nf">onBtnAClicked</span><span class="p">?()</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">userInput</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">inputTextField</span><span class="o">.</span><span class="n">text</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="nf">onBtnBClicked</span><span class="p">?(</span><span class="n">userInput</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 텍스트필드 이벤트 받는법 delegate도 되지만 간단하게 selector로도 된다</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UITextField</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- input: </span><span class="se">\(</span><span class="n">sender</span><span class="o">.</span><span class="n">text</span><span class="o">!</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CustomStoryboardViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">secondInputView</span><span class="p">:</span> <span class="kt">InputView</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">loadView</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">loadView</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
        <span class="c1">// let thirdInputView = InputView(title: "편의생성자 타이틀", placeHolder: "편의생성자 홀더")</span>
        
        <span class="c1">// MARK: - 4번 방식(생성자로 버튼 등록)</span>
        <span class="k">let</span> <span class="nv">thirdInputView</span> <span class="o">=</span> <span class="kt">InputView</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"편의생성자 타이틀"</span><span class="p">,</span>
                                       <span class="nv">placeHolder</span><span class="p">:</span> <span class="s">"편의생성자 홀더"</span><span class="p">,</span>
                                       <span class="nv">onBtnAClicked</span><span class="p">:</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="nf">handleBtnACLicked</span><span class="p">()</span> <span class="p">},</span>
                                       <span class="nv">onBtnBClicked</span><span class="p">:</span> <span class="p">{</span> <span class="k">self</span><span class="o">.</span><span class="nf">handleBtnBClicked</span><span class="p">(</span><span class="nv">userInput</span><span class="p">:</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>
        
        
        <span class="n">thirdInputView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">thirdInputView</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">thirdInputView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">secondInputView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// MARK: - 1번 방식(클로저로 버튼 등록)</span>
        <span class="n">secondInputView</span><span class="o">.</span><span class="n">onBtnAClicked</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"onBtnAClicked 실행됨"</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="c1">// MARK: - 2번 방식(클로저로 버튼 등록 + 클로저 파라미터 활용)</span>
        <span class="n">secondInputView</span><span class="o">.</span><span class="n">onBtnBClicked</span> <span class="o">=</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"onBtnBClicked 실행됨 / userInput: </span><span class="se">\(</span><span class="nv">$0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="p">}</span>
        
        <span class="c1">// MARK: - 3번 방식(메서드로 버튼 등록)</span>
        <span class="c1">// 핸들링을 InputView가 아닌 VC에서 가능해진다</span>
        <span class="n">secondInputView</span><span class="o">.</span><span class="nf">resetAction</span><span class="p">(</span><span class="nv">target</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span>
                                    <span class="nv">aBtnAction</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="p">)),</span>
                                    <span class="nv">bBtnAction</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="p">)),</span>
                                    <span class="nv">inputChangeAction</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="p">)))</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">extension</span> <span class="kt">CustomStoryboardViewController</span> <span class="p">{</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnAClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onBtnBClicked</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- "</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 텍스트필드 이벤트 받는법 delegate도 되지만 간단하게 selector로도 된다</span>
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">onInputChanged</span><span class="p">(</span><span class="nv">sender</span><span class="p">:</span> <span class="kt">UITextField</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- input: </span><span class="se">\(</span><span class="n">sender</span><span class="o">.</span><span class="n">text</span><span class="o">!</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">CustomStoryboardViewController</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">handleBtnACLicked</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"onBtnAClicked"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">handleBtnBClicked</span><span class="p">(</span><span class="nv">userInput</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"onBtnBClicked"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"onBtnBClicked!!!: </span><span class="se">\(</span><span class="n">userInput</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="정리">정리</h2>
<ul>
  <li>UIKit으로 커스텀 뷰 만들 때 컴포넌트 단위로 구현하는게 편하다.</li>
  <li>코드로만 만드는 방식도 있지만, 특정 부분을 Xib파일로 따로 빼서 구성할 수 있다,
    <ul>
      <li>이떄는 연결을 View가 아니라 Files Owner에 원하는 UIView 클래스룰 연결해준다.</li>
      <li>해당하는 Nib파일을 가져와서 Nib파일의 첫번째 뷰를 UIView 타입으로 가져오고 오토레이아웃을 한번 잡아준다.</li>
    </ul>
  </li>
  <li>Main 스토리보드에서 UIView를 클래스 이름 연결하면 awakeFromNib을 탄다.
    <ul>
      <li>커스텀으로 속성 변경할거면 @IBInspactable를 사용하면 된다.</li>
    </ul>
  </li>
  <li>Xib파일을 코드로 생성할때는 init(frame)을 탄다
    <ul>
      <li>커스텀 속성을 넣고싶으면 convenience init을 통해 매개변수를 넣어서 해결하면 된다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>Dong Hyeon</name></author><summary type="html"><![CDATA[커스텀뷰 만들기 우선 Storyboard에서 사진 처럼 UI를 만든다. Button을 hstack으로 묶고, label, textfield, hstack을 vstack으로 묶는다. 그리고 view를 embed하고 색성을 주고, vstack을 view로 드래그하여 상하좌우 전부 10씩 공간을 주고, 이 view를 safearea top: 10, leading: 10, horizontal center 설정을 해주었다. 그리고 이 화면을 복사하고 empty라는 파일을 만들어서 파일이름을 InputView로 하고 여기에 붙여넣는다 이 파일을 nib 파일(인터페이스 빌더)이라고 부른다. 그럼 InputView에서 이렇게 깨지는데 사이즈 인스펙터(삼각형) 부분에서 Layout Guides에서 Safe area 제거한다. 그리고 View를 누르고 attribute(삼각형 바로 왼쪽) 눌러서 Size를 Inferred에서 Freform으로 바꾼다. 그러면 사이즈를 편하게 조절할 수 있다. file owner에서 코드 클래스를 연결한다. // 코드 클래스 import UIKit class InputView: UIView { /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 /// fatalError("init(coder:) has not been implemented") // 코드용 } } View를 생성후 노란색 View에 드래그해서 Vertical Spacing, Leading, Trailing, Equal Height 설정을 해준다. 새로 만든 뷰를 SecondInputView로 하고 option + cmd + 4하고 class를 InputView로 해준다. 그리고 실행해보면 아래 awakefromnib은 탔다고 로그가 뜨지만 우리가 원하는 Nib파일과의 연결이 안되서 여전히 민트색으로 나온다. 이를 해결해보자. Before After(applyNib 생성/호출) // 로그 SwiftUILab/InputView.swift init(coder:) 26 - SwiftUILab/InputView.swift awakeFromNib() 15 - import UIKit class InputView: UIView { /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") applyNib() } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 print(#fileID, #function, #line, "- ") /// fatalError("init(coder:) has not been implemented") // 코드용 } fileprivate func applyNib() { print(#fileID, #function, #line, "- ") let nibName = String(describing: Self.self) // 나의 타입을 가져온다 "InputView" let nib = Bundle.main.loadNibNamed(nibName, owner: self) // Bundle에서 Nib파일을 불러오겠다, 주인은 self // nib의 첫 요소를 UIView 형태로 가져오겠다 guard let view = nib?.first as? UIView else { return } // autoLauout addSubview(view) view.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ view.topAnchor.constraint(equalTo: self.topAnchor), view.leadingAnchor.constraint(equalTo: self.leadingAnchor), view.trailingAnchor.constraint(equalTo: self.trailingAnchor), view.bottomAnchor.constraint(equalTo: self.bottomAnchor), ]) } } 추가: 라벨, 버튼, 텍스트필드 각각 커스텀하고싶다면 각각 Nib에서 InputView 코드로 드래그해주고 커스텀을 하면되는데, 코드로 해도 되지만 @IBInspactable를 활용하면 Interface Builder에서 편하게 수정할 수 있다. 수정은 Main 즉 호출쪽에서 UserDefined Runtime Attributes에서 넣어주면 된다. 파란칸 작성 실행 화면 import UIKit class InputView: UIView { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var inputTextField: UITextField! @IBOutlet weak var buttonA: UIButton! @IBOutlet weak var buttonB: UIButton! // @IBInspectable: Interface Builder에서 속성을 넣어주는 역할 // 프로퍼티 옵저버 @IBInspectable var title: String = "" { didSet { DispatchQueue.main.async { self.titleLabel.text = self.title } } } @IBInspectable var placeHolder: String = "" { didSet { DispatchQueue.main.async { self.inputTextField.placeholder = self.placeHolder.isEmpty ? "글자를 입력해주세요" : self.placeHolder } } } /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") applyNib() } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 print(#fileID, #function, #line, "- ") /// fatalError("init(coder:) has not been implemented") // 코드용 } fileprivate func applyNib() { print(#fileID, #function, #line, "- ") let nibName = String(describing: Self.self) // 나의 타입을 가져온다 "InputView" let nib = Bundle.main.loadNibNamed(nibName, owner: self) // Bundle에서 Nib파일을 불러오겠다, 주인은 self // nib의 첫 요소를 UIView 형태로 가져오겠다 guard let view = nib?.first as? UIView else { return } // autoLauout addSubview(view) view.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ view.topAnchor.constraint(equalTo: self.topAnchor), view.leadingAnchor.constraint(equalTo: self.leadingAnchor), view.trailingAnchor.constraint(equalTo: self.trailingAnchor), view.bottomAnchor.constraint(equalTo: self.bottomAnchor), ]) } } 코드로 UI 만드는법 import UIKit class CustomStoryboardViewController: UIViewController { @IBOutlet weak var secondInputView: InputView! override func loadView() { super.loadView() print(#fileID, #function, #line, "- ") let thirdInputView = InputView(title: "편의생성자 타이틀", placeHolder: "편의생성자 홀더") thirdInputView.translatesAutoresizingMaskIntoConstraints = false self.view.addSubview(thirdInputView) NSLayoutConstraint.activate([ thirdInputView.topAnchor.constraint(equalTo: secondInputView.bottomAnchor, constant: 10), thirdInputView.leadingAnchor.constraint(equalTo: secondInputView.leadingAnchor), thirdInputView.trailingAnchor.constraint(equalTo: secondInputView.trailingAnchor), thirdInputView.heightAnchor.constraint(equalTo: secondInputView.heightAnchor) ]) } override func viewDidLoad() { } } // override init(frame: CGRect)에 applyNib 호출 추가, 편의생성자 추가하여 뷰 생성시 title, placeHolder 파라미터 받기 import UIKit class InputView: UIView { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var inputTextField: UITextField! @IBOutlet weak var buttonA: UIButton! @IBOutlet weak var buttonB: UIButton! // @IBInspectable: Interface Builder에서 속성을 넣어주는 역할 // 프로퍼티 옵저버 @IBInspectable var title: String = "" { didSet { DispatchQueue.main.async { self.titleLabel.text = self.title } } } @IBInspectable var placeHolder: String = "" { didSet { DispatchQueue.main.async { self.inputTextField.placeholder = self.placeHolder.isEmpty ? "글자를 입력해주세요" : self.placeHolder } } } /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") applyNib() } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") applyNib() // MARK: - 이거 추가 } // MARK: - 편의생성자 추가 convenience init(title: String = "", placeHolder: String) { self.init(frame: .zero) self.titleLabel.text = title self.inputTextField.placeholder = placeHolder } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 print(#fileID, #function, #line, "- ") /// fatalError("init(coder:) has not been implemented") // 코드용 } fileprivate func applyNib() { print(#fileID, #function, #line, "- ") let nibName = String(describing: Self.self) // 나의 타입을 가져온다 "InputView" let nib = Bundle.main.loadNibNamed(nibName, owner: self) // Bundle에서 Nib파일을 불러오겠다, 주인은 self // nib의 첫 요소를 UIView 형태로 가져오겠다 guard let view = nib?.first as? UIView else { return } // autoLauout addSubview(view) view.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ view.topAnchor.constraint(equalTo: self.topAnchor), view.leadingAnchor.constraint(equalTo: self.leadingAnchor), view.trailingAnchor.constraint(equalTo: self.trailingAnchor), view.bottomAnchor.constraint(equalTo: self.bottomAnchor), ]) } } 버튼 연결 추가법 applyNib 메서드를 추가하면된다. import UIKit class InputView: UIView { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var inputTextField: UITextField! @IBOutlet weak var buttonA: UIButton! @IBOutlet weak var buttonB: UIButton! // @IBInspectable: Interface Builder에서 속성을 넣어주는 역할 // 프로퍼티 옵저버 @IBInspectable var title: String = "" { didSet { DispatchQueue.main.async { self.titleLabel.text = self.title } } } @IBInspectable var placeHolder: String = "" { didSet { DispatchQueue.main.async { self.inputTextField.placeholder = self.placeHolder.isEmpty ? "글자를 입력해주세요" : self.placeHolder } } } /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") applyNib() applyAction() } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") applyNib() // MARK: - 이거 추가 applyAction() } // MARK: - 편의생성자 추가 convenience init(title: String = "", placeHolder: String) { self.init(frame: .zero) self.titleLabel.text = title self.inputTextField.placeholder = placeHolder } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 print(#fileID, #function, #line, "- ") /// fatalError("init(coder:) has not been implemented") // 코드용 } fileprivate func applyNib() { print(#fileID, #function, #line, "- ") let nibName = String(describing: Self.self) // 나의 타입을 가져온다 "InputView" let nib = Bundle.main.loadNibNamed(nibName, owner: self) // Bundle에서 Nib파일을 불러오겠다, 주인은 self // nib의 첫 요소를 UIView 형태로 가져오겠다 guard let view = nib?.first as? UIView else { return } // autoLauout addSubview(view) view.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ view.topAnchor.constraint(equalTo: self.topAnchor), view.leadingAnchor.constraint(equalTo: self.leadingAnchor), view.trailingAnchor.constraint(equalTo: self.trailingAnchor), view.bottomAnchor.constraint(equalTo: self.bottomAnchor), ]) } fileprivate func applyAction() { print(#fileID, #function, #line, "- ") self.buttonA.addTarget(self, action: #selector(onBtnAClicked(selder:)), for: .touchUpInside) self.buttonB.addTarget(self, action: #selector(onBtnBClicked(selder:)), for: .touchUpInside) } } extension InputView { @objc func onBtnAClicked(selder: UIButton) { print(#fileID, #function, #line, "- ") } @objc func onBtnBClicked(selder: UIButton) { print(#fileID, #function, #line, "- ") } } 텍스트필드 연결 추가법 import UIKit class InputView: UIView { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var inputTextField: UITextField! @IBOutlet weak var buttonA: UIButton! @IBOutlet weak var buttonB: UIButton! // @IBInspectable: Interface Builder에서 속성을 넣어주는 역할 // 프로퍼티 옵저버 @IBInspectable var title: String = "" { didSet { DispatchQueue.main.async { self.titleLabel.text = self.title } } } @IBInspectable var placeHolder: String = "" { didSet { DispatchQueue.main.async { self.inputTextField.placeholder = self.placeHolder.isEmpty ? "글자를 입력해주세요" : self.placeHolder } } } /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") applyNib() applyAction() } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") applyNib() // MARK: - 이거 추가 applyAction() } // MARK: - 편의생성자 추가 convenience init(title: String = "", placeHolder: String) { self.init(frame: .zero) self.titleLabel.text = title self.inputTextField.placeholder = placeHolder } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 print(#fileID, #function, #line, "- ") /// fatalError("init(coder:) has not been implemented") // 코드용 } fileprivate func applyNib() { print(#fileID, #function, #line, "- ") let nibName = String(describing: Self.self) // 나의 타입을 가져온다 "InputView" let nib = Bundle.main.loadNibNamed(nibName, owner: self) // Bundle에서 Nib파일을 불러오겠다, 주인은 self // nib의 첫 요소를 UIView 형태로 가져오겠다 guard let view = nib?.first as? UIView else { return } // autoLauout addSubview(view) view.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ view.topAnchor.constraint(equalTo: self.topAnchor), view.leadingAnchor.constraint(equalTo: self.leadingAnchor), view.trailingAnchor.constraint(equalTo: self.trailingAnchor), view.bottomAnchor.constraint(equalTo: self.bottomAnchor), ]) } fileprivate func applyAction() { print(#fileID, #function, #line, "- ") self.buttonA.addTarget(self, action: #selector(onBtnAClicked(selder:)), for: .touchUpInside) self.buttonB.addTarget(self, action: #selector(onBtnBClicked(selder:)), for: .touchUpInside) self.inputTextField.addTarget(self, action: #selector(onInputChanged(sender: )), for: .editingChanged) } } extension InputView { @objc func onBtnAClicked(selder: UIButton) { print(#fileID, #function, #line, "- ") } @objc func onBtnBClicked(selder: UIButton) { print(#fileID, #function, #line, "- ") } // MARK: - 텍스트필드 이벤트 받는법 delegate도 되지만 간단하게 selector로도 된다 @objc func onInputChanged(sender: UITextField) { print(#fileID, #function, #line, "- input: \(sender.text!)") } } 액션을 viewController에서 받고 싶다 클로저를 활용하자. 클로저는 정의, 할당, 호출 3가지를 기억하면 된다. // // InputView.swift // SwiftUILab // // Created by 김동현 on 9/4/25. // import UIKit class InputView: UIView { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var inputTextField: UITextField! @IBOutlet weak var buttonA: UIButton! @IBOutlet weak var buttonB: UIButton! var onBtnAClicked: (() -&gt; Void)? = nil var onBtnBClicked: ((String) -&gt; Void)? = nil // @IBInspectable: Interface Builder에서 속성을 넣어주는 역할 // 프로퍼티 옵저버 @IBInspectable var title: String = "" { didSet { DispatchQueue.main.async { self.titleLabel.text = self.title } } } @IBInspectable var placeHolder: String = "" { didSet { DispatchQueue.main.async { self.inputTextField.placeholder = self.placeHolder.isEmpty ? "글자를 입력해주세요" : self.placeHolder } } } /// 인터페이스 빌더로 생성이되는 생성자(nib == interfacebuilder) /// 스토리보드나 Nib을 통해 생성되면 이걸 사용한다 override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- ") applyNib() applyAction() } /// 코드로 InputView를 생성한다면 사용하는 생성자 override init(frame: CGRect) { super.init(frame: frame) print(#fileID, #function, #line, "- ") applyNib() // MARK: - 이거 추가 applyAction() } // MARK: - 편의생성자 추가 convenience init(title: String = "", placeHolder: String) { self.init(frame: .zero) self.titleLabel.text = title self.inputTextField.placeholder = placeHolder } // MARK: - 버튼 세번째 방식 convenience init(title: String = "", placeHolder: String, onBtnAClicked: (() -&gt; Void)? = nil, onBtnBClicked: ((String) -&gt; Void)? = nil ) { self.init(frame: .zero) self.titleLabel.text = title self.inputTextField.placeholder = placeHolder self.onBtnAClicked = onBtnAClicked self.onBtnBClicked = onBtnBClicked } required init?(coder: NSCoder) { super.init(coder: coder) // 스토리보드용 print(#fileID, #function, #line, "- ") /// fatalError("init(coder:) has not been implemented") // 코드용 } fileprivate func applyNib() { print(#fileID, #function, #line, "- ") let nibName = String(describing: Self.self) // 나의 타입을 가져온다 "InputView" let nib = Bundle.main.loadNibNamed(nibName, owner: self) // Bundle에서 Nib파일을 불러오겠다, 주인은 self // nib의 첫 요소를 UIView 형태로 가져오겠다 guard let view = nib?.first as? UIView else { return } // autoLauout addSubview(view) view.translatesAutoresizingMaskIntoConstraints = false NSLayoutConstraint.activate([ view.topAnchor.constraint(equalTo: self.topAnchor), view.leadingAnchor.constraint(equalTo: self.leadingAnchor), view.trailingAnchor.constraint(equalTo: self.trailingAnchor), view.bottomAnchor.constraint(equalTo: self.bottomAnchor), ]) } fileprivate func applyAction() { print(#fileID, #function, #line, "- ") self.buttonA.addTarget(self, action: #selector(onBtnAClicked(sender:)), for: .touchUpInside) self.buttonB.addTarget(self, action: #selector(onBtnBClicked(sender:)), for: .touchUpInside) self.inputTextField.addTarget(self, action: #selector(onInputChanged(sender: )), for: .editingChanged) } func resetAction(target: Any?, aBtnAction: Selector, bBtnAction: Selector, inputChangeAction: Selector ) { // 이전 걸려있던 액션 지우기 print(#fileID, #function, #line, "- ") self.buttonA.removeTarget(self, action: #selector(onBtnAClicked(sender:)), for: .touchUpInside) self.buttonB.removeTarget(self, action: #selector(onBtnBClicked(sender:)), for: .touchUpInside) self.inputTextField.removeTarget(self, action: #selector(onInputChanged(sender: )), for: .editingChanged) // 새 액션 넣기 self.buttonA.addTarget(target, action: aBtnAction, for: .touchUpInside) self.buttonB.addTarget(target, action: bBtnAction, for: .touchUpInside) self.inputTextField.addTarget(target, action: inputChangeAction, for: .editingChanged) } } extension InputView { @objc func onBtnAClicked(sender: UIButton) { print(#fileID, #function, #line, "- ") onBtnAClicked?() } @objc func onBtnBClicked(sender: UIButton) { print(#fileID, #function, #line, "- ") guard let userInput = self.inputTextField.text else { return } onBtnBClicked?(userInput) } // MARK: - 텍스트필드 이벤트 받는법 delegate도 되지만 간단하게 selector로도 된다 @objc func onInputChanged(sender: UITextField) { print(#fileID, #function, #line, "- input: \(sender.text!)") } } import UIKit class CustomStoryboardViewController: UIViewController { @IBOutlet weak var secondInputView: InputView! override func loadView() { super.loadView() print(#fileID, #function, #line, "- ") // let thirdInputView = InputView(title: "편의생성자 타이틀", placeHolder: "편의생성자 홀더") // MARK: - 4번 방식(생성자로 버튼 등록) let thirdInputView = InputView(title: "편의생성자 타이틀", placeHolder: "편의생성자 홀더", onBtnAClicked: { self.handleBtnACLicked() }, onBtnBClicked: { self.handleBtnBClicked(userInput: $0) }) thirdInputView.translatesAutoresizingMaskIntoConstraints = false self.view.addSubview(thirdInputView) NSLayoutConstraint.activate([ thirdInputView.topAnchor.constraint(equalTo: secondInputView.bottomAnchor, constant: 10), thirdInputView.leadingAnchor.constraint(equalTo: secondInputView.leadingAnchor), thirdInputView.trailingAnchor.constraint(equalTo: secondInputView.trailingAnchor), thirdInputView.heightAnchor.constraint(equalTo: secondInputView.heightAnchor) ]) } override func viewDidLoad() { // MARK: - 1번 방식(클로저로 버튼 등록) secondInputView.onBtnAClicked = { print("onBtnAClicked 실행됨") } // MARK: - 2번 방식(클로저로 버튼 등록 + 클로저 파라미터 활용) secondInputView.onBtnBClicked = { print("onBtnBClicked 실행됨 / userInput: \($0)") } // MARK: - 3번 방식(메서드로 버튼 등록) // 핸들링을 InputView가 아닌 VC에서 가능해진다 secondInputView.resetAction(target: self, aBtnAction: #selector(onBtnAClicked(sender: )), bBtnAction: #selector(onBtnBClicked(sender: )), inputChangeAction: #selector(onInputChanged(sender: ))) } } extension CustomStoryboardViewController { @objc func onBtnAClicked(sender: UIButton) { print(#fileID, #function, #line, "- ") } @objc func onBtnBClicked(sender: UIButton) { print(#fileID, #function, #line, "- ") } // MARK: - 텍스트필드 이벤트 받는법 delegate도 되지만 간단하게 selector로도 된다 @objc func onInputChanged(sender: UITextField) { print(#fileID, #function, #line, "- input: \(sender.text!)") } } extension CustomStoryboardViewController { private func handleBtnACLicked() { print("onBtnAClicked") } private func handleBtnBClicked(userInput: String) { print("onBtnBClicked") print("onBtnBClicked!!!: \(userInput)") } } 정리 UIKit으로 커스텀 뷰 만들 때 컴포넌트 단위로 구현하는게 편하다. 코드로만 만드는 방식도 있지만, 특정 부분을 Xib파일로 따로 빼서 구성할 수 있다, 이떄는 연결을 View가 아니라 Files Owner에 원하는 UIView 클래스룰 연결해준다. 해당하는 Nib파일을 가져와서 Nib파일의 첫번째 뷰를 UIView 타입으로 가져오고 오토레이아웃을 한번 잡아준다. Main 스토리보드에서 UIView를 클래스 이름 연결하면 awakeFromNib을 탄다. 커스텀으로 속성 변경할거면 @IBInspactable를 사용하면 된다. Xib파일을 코드로 생성할때는 init(frame)을 탄다 커스텀 속성을 넣고싶으면 convenience init을 통해 매개변수를 넣어서 해결하면 된다.]]></summary></entry><entry><title type="html">[AutoLayout] 5. 스택뷰 활용</title><link href="http://localhost:4000/AutoLayout-autolayout6/" rel="alternate" type="text/html" title="[AutoLayout] 5. 스택뷰 활용" /><published>2025-08-14T00:00:00+00:00</published><updated>2025-08-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout6</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout6/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<h2 id="스택뷰-활용">스택뷰 활용</h2>
<p><img src="/assets/img/2025-08-14-%5BAutoLayout%5D-autolayout6/KakaoTalk_Photo_2025-08-22-15-19-27.png" alt="이미지" width="50%" /><br />
스택뷰를 활용해서 네비게이샨바와 금액 입력 바 만들어보자.</p>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://wwit.design/2022/07/07/monimo/</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[스택뷰 활용 스택뷰를 활용해서 네비게이샨바와 금액 입력 바 만들어보자. Reference https://wwit.design/2022/07/07/monimo/]]></summary></entry><entry><title type="html">[AutoLayout] 5. 스택뷰</title><link href="http://localhost:4000/AutoLayout-autolayout5/" rel="alternate" type="text/html" title="[AutoLayout] 5. 스택뷰" /><published>2025-08-14T00:00:00+00:00</published><updated>2025-08-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout5</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout5/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<h2 id="스택뷰">스택뷰</h2>

<p><img src="/assets/img/2025-08-14-%5BAutoLayout%5D-autolayout5/image-20250814162747463.png" alt="이미지" width="70%" /></p>

<p>label클릭 후 우측하단 박스모양 클릭 후 view눌러주면 편하게 uiview를 감쌀 수 있다.  <br />
하지만 오토레이아웃은 안잡힌 상태라서 지정해주자.</p>
<ul>
  <li>나는 수평정렬, 수직정렬을해서 가운데로 지정해주었다.</li>
  <li>그리고 label에서 view로 leading, top을 걸어주었다.</li>
  <li>이러면 크기는 지정된다. 마지막으로 view를 위치만 잡아주면 된다.</li>
</ul>

<p><img src="/assets/img/2025-08-14-%5BAutoLayout%5D-autolayout5/image-20250814165609486.png" alt="이미지" width="100%" /><br />
하나의 컨테이너를 만들었다면</p>
<ul>
  <li>2개 더 복붙하여 3개를 드래그하여 우측하단 박스 눌러서 stackView눌러주면 스택뷰 안에 들어가게 되고 기존 외부 오토레이아웃은 사라진다.</li>
  <li>스택뷰를 leading, top으로 앵커를 걸어준다. 그리고 horizontally 정렬을 해준다(좌우정렬 )</li>
  <li>각각 노란 컨테이너의 width(고정값)을 없애주고 스택뷰에서 option + command + 5에서 distribution을 fill equally로 하면 너비가 균등하게 분배된다.</li>
  <li>이러면 leading을 조절해도 내부 컨테이너들의 너비는 알아서 균등하게 조절된다.</li>
</ul>

<p>장점</p>
<ul>
  <li>작은 사이즈의 기기에서도 균일하게 각 컨테이너들이 보일 수 있다.</li>
  <li>하지만 작은 사이즈의 기기에서는 컨테이너들이 일그러질 수 있다.</li>
  <li>보통 대표 기종 기기를 정해둔다.</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[스택뷰 label클릭 후 우측하단 박스모양 클릭 후 view눌러주면 편하게 uiview를 감쌀 수 있다. 하지만 오토레이아웃은 안잡힌 상태라서 지정해주자. 나는 수평정렬, 수직정렬을해서 가운데로 지정해주었다. 그리고 label에서 view로 leading, top을 걸어주었다. 이러면 크기는 지정된다. 마지막으로 view를 위치만 잡아주면 된다. 하나의 컨테이너를 만들었다면 2개 더 복붙하여 3개를 드래그하여 우측하단 박스 눌러서 stackView눌러주면 스택뷰 안에 들어가게 되고 기존 외부 오토레이아웃은 사라진다. 스택뷰를 leading, top으로 앵커를 걸어준다. 그리고 horizontally 정렬을 해준다(좌우정렬 ) 각각 노란 컨테이너의 width(고정값)을 없애주고 스택뷰에서 option + command + 5에서 distribution을 fill equally로 하면 너비가 균등하게 분배된다. 이러면 leading을 조절해도 내부 컨테이너들의 너비는 알아서 균등하게 조절된다. 장점 작은 사이즈의 기기에서도 균일하게 각 컨테이너들이 보일 수 있다. 하지만 작은 사이즈의 기기에서는 컨테이너들이 일그러질 수 있다. 보통 대표 기종 기기를 정해둔다.]]></summary></entry><entry><title type="html">[AutoLayout] 4. customView with IBDesignable and IBInspectable, CALayer</title><link href="http://localhost:4000/AutoLayout-autolayout4/" rel="alternate" type="text/html" title="[AutoLayout] 4. customView with IBDesignable and IBInspectable, CALayer" /><published>2025-08-12T00:00:00+00:00</published><updated>2025-08-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout4</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout4/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<h2 id="1-코드-방식">1. 코드 방식</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">Autolayout4ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">yellowView</span><span class="p">:</span> <span class="kt">UIView</span><span class="o">!</span>
    
    <span class="c1">// viewController가 생성되어 메모리에 올라가면 호출됨</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">Autolayout4ViewController</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /><br /><br /><br /></p>

<h2 id="2-ibinspectable-방식">2. @IBInspectable 방식</h2>
<ul>
  <li>이 방식은 deprecated되었다.<br />
<img src="/assets/img/2025-08-12-%5BAutoLayout%5D-autolayout4/image-20250812174801984.png" alt="이미지" width="100%" /></li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// storyboard에서 네모View 클릭 후 option + command + 4 눌러서 class를 CustomView로 바꿔준다</span>
<span class="c1">// storyboard에서 네모View 클릭 후 option + command + 5 누르면 Corner radius가 생긴다</span>
<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// @IBDesignable: 인터페이스 빌더에서 디자인으로 확인 가능해짐</span>
<span class="kd">@IBDesignable</span>
<span class="kd">class</span> <span class="kt">CustomView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="c1">// @IBInspectable: 인스펙터 패널에서 사용할 수 있도록 설정</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">cornerRaadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="n">cornerRaadius</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Autolayout4ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">yellowView</span><span class="p">:</span> <span class="kt">CustomView</span><span class="o">!</span>
    
    <span class="c1">// viewController가 생성되어 메모리에 올라가면 호출됨</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">cornerRaadius</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">Autolayout4ViewController</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-최종코드">3. 최종코드</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// @IBDesignable: 인터페이스 빌더에서 디자인으로 확인 가능해짐</span>
<span class="kd">@IBDesignable</span>
<span class="kd">class</span> <span class="kt">CustomView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="c1">// @IBInspectable: 인스펙터 패널에서 사용할 수 있도록 설정</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">cornerRaadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="n">cornerRaadius</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Autolayout4ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">yellowView</span><span class="p">:</span> <span class="kt">CustomView</span><span class="o">!</span>
    
    <span class="c1">// viewController가 생성되어 메모리에 올라가면 호출됨</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">cornerRaadius</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 스토리보드에서 VC의 Storyboard ID를 클래스명과 동일하게 설정했다고 가정</span>
<span class="c1">//   - Storyboard 파일명: "AutoLayout4"</span>
<span class="c1">//   - Storyboard ID: "Autolayout4ViewController"</span>
<span class="cp">#Preview("AutoLayout4 (Storyboard VC)") {</span>
    <span class="c1">// 미리보기에서 종종 Bundle.main 대신 타입 기반 번들이 더 안전합니다</span>
    
    <span class="c1">// bundle: 스토리보드, 이미지, nib, JSON 등을 묶어 관리하는 타입</span>
    <span class="c1">// 스토리보드 리소스를 찾을 번들을 지정</span>
    <span class="k">let</span> <span class="nv">bundle</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="kt">Autolayout4ViewController</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">sb</span> <span class="o">=</span> <span class="kt">UIStoryboard</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"AutoLayout4"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="n">bundle</span><span class="p">)</span> <span class="c1">// 스토리보드 파일 로드</span>
    <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="nf">instantiateViewController</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"Autolayout4ViewController"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">vc</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-전체-코드">4. 전체 코드</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// @IBDesignable: 인터페이스 빌더에서 디자인으로 확인 가능해짐</span>
<span class="kd">@IBDesignable</span>
<span class="kd">class</span> <span class="kt">CustomView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="c1">/// 정사각형 여부</span>
    <span class="c1">/// - Returns: 여부</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">isSquare</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
        <span class="c1">// get</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span> <span class="o">==</span> <span class="k">self</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">height</span>
    <span class="p">}</span>

    <span class="c1">// @IBInspectable: 인스펙터 패널에서 사용할 수 있도록 설정</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">cornerRaadius</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="n">cornerRaadius</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 가장자리 두꼐</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">borderWidth</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">borderWidth</span> <span class="o">=</span> <span class="n">borderWidth</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 색상</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">borderColor</span><span class="p">:</span> <span class="kt">UIColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">clear</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">borderColor</span> <span class="o">=</span> <span class="n">borderColor</span><span class="o">.</span><span class="n">cgColor</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 동그라미 뷰</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">isCircle</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="c1">// 정사각형이면서 isCircle이 true라면?</span>
            <span class="k">if</span> <span class="n">isSquare</span> <span class="o">&amp;&amp;</span> <span class="n">isCircle</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="mi">2</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// 그림자</span>
    <span class="kd">@IBInspectable</span>
    <span class="k">var</span> <span class="nv">hasShadow</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">false</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">if</span> <span class="n">hasShadow</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="nf">applyShadow</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">CALayer</span> <span class="p">{</span>
    
    <span class="c1">/// 뷰에 그림자 적용</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - color: 그림자 색</span>
    <span class="c1">///   - alpha: 투명도</span>
    <span class="c1">///   - x: 가로 위치</span>
    <span class="c1">///   - y: 세로 위치</span>
    <span class="c1">///   - blur: 블러</span>
    <span class="c1">///   - spread: 퍼짐 정도</span>
    <span class="kd">func</span> <span class="nf">applyShadow</span><span class="p">(</span>
        <span class="nv">color</span><span class="p">:</span> <span class="kt">UIColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span><span class="p">,</span>
        <span class="nv">alpha</span><span class="p">:</span> <span class="kt">Float</span> <span class="o">=</span> <span class="mf">0.5</span><span class="p">,</span>
        <span class="nv">x</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nv">y</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span>
        <span class="nv">blur</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">35</span><span class="p">,</span>
        <span class="nv">spread</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">masksToBounds</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">shadowColor</span> <span class="o">=</span> <span class="n">color</span><span class="o">.</span><span class="n">cgColor</span>
        <span class="n">shadowOpacity</span> <span class="o">=</span> <span class="n">alpha</span>
        <span class="n">shadowOffset</span> <span class="o">=</span> <span class="kt">CGSize</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="n">x</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="n">y</span><span class="p">)</span>
        <span class="n">shadowRadius</span> <span class="o">=</span> <span class="n">blur</span> <span class="o">/</span> <span class="mf">2.0</span>
        <span class="k">if</span> <span class="n">spread</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
            <span class="n">shadowPath</span> <span class="o">=</span> <span class="kc">nil</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">dx</span> <span class="o">=</span> <span class="o">-</span><span class="n">spread</span>
            <span class="k">let</span> <span class="nv">rect</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="nf">insetBy</span><span class="p">(</span><span class="nv">dx</span><span class="p">:</span> <span class="n">dx</span><span class="p">,</span> <span class="nv">dy</span><span class="p">:</span> <span class="n">dx</span><span class="p">)</span>
            <span class="n">shadowPath</span> <span class="o">=</span> <span class="kt">UIBezierPath</span><span class="p">(</span><span class="nv">rect</span><span class="p">:</span> <span class="n">rect</span><span class="p">)</span><span class="o">.</span><span class="n">cgPath</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">Autolayout4ViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">yellowView</span><span class="p">:</span> <span class="kt">CustomView</span><span class="o">!</span>
    
    <span class="c1">// viewController가 생성되어 메모리에 올라가면 호출됨</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">cornerRaadius</span> <span class="o">=</span> <span class="mi">20</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">borderWidth</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">borderColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">blue</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">isCircle</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">self</span><span class="o">.</span><span class="n">yellowView</span><span class="o">.</span><span class="n">hasShadow</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 스토리보드에서 VC의 Storyboard ID를 클래스명과 동일하게 설정했다고 가정</span>
<span class="c1">//   - Storyboard 파일명: "AutoLayout4"</span>
<span class="c1">//   - Storyboard ID: "Autolayout4ViewController"</span>
<span class="cp">#Preview("AutoLayout4 (Storyboard VC)") {</span>
    <span class="c1">// 미리보기에서 종종 Bundle.main 대신 타입 기반 번들이 더 안전합니다</span>
    
    <span class="c1">// bundle: 스토리보드, 이미지, nib, JSON 등을 묶어 관리하는 타입</span>
    <span class="c1">// 스토리보드 리소스를 찾을 번들을 지정</span>
    <span class="k">let</span> <span class="nv">bundle</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="kt">Autolayout4ViewController</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">sb</span> <span class="o">=</span> <span class="kt">UIStoryboard</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"AutoLayout4"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="n">bundle</span><span class="p">)</span> <span class="c1">// 스토리보드 파일 로드</span>
    <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="n">sb</span><span class="o">.</span><span class="nf">instantiateViewController</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"Autolayout4ViewController"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">vc</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://jeong9216.tistory.com/694#google_vignette</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[1. 코드 방식 import UIKit class Autolayout4ViewController: UIViewController { @IBOutlet weak var yellowView: UIView! // viewController가 생성되어 메모리에 올라가면 호출됨 override func viewDidLoad() { super.viewDidLoad() self.yellowView.layer.cornerRadius = 20 } } #Preview { Autolayout4ViewController() } 2. @IBInspectable 방식 이 방식은 deprecated되었다. // storyboard에서 네모View 클릭 후 option + command + 4 눌러서 class를 CustomView로 바꿔준다 // storyboard에서 네모View 클릭 후 option + command + 5 누르면 Corner radius가 생긴다 import UIKit // @IBDesignable: 인터페이스 빌더에서 디자인으로 확인 가능해짐 @IBDesignable class CustomView: UIView { // @IBInspectable: 인스펙터 패널에서 사용할 수 있도록 설정 @IBInspectable var cornerRaadius: CGFloat = 0 { didSet { self.layer.cornerRadius = cornerRaadius } } } class Autolayout4ViewController: UIViewController { @IBOutlet weak var yellowView: CustomView! // viewController가 생성되어 메모리에 올라가면 호출됨 override func viewDidLoad() { super.viewDidLoad() self.yellowView.cornerRaadius = 20 } } #Preview { Autolayout4ViewController() } 3. 최종코드 import UIKit // @IBDesignable: 인터페이스 빌더에서 디자인으로 확인 가능해짐 @IBDesignable class CustomView: UIView { // @IBInspectable: 인스펙터 패널에서 사용할 수 있도록 설정 @IBInspectable var cornerRaadius: CGFloat = 0 { didSet { self.layer.cornerRadius = cornerRaadius } } } class Autolayout4ViewController: UIViewController { @IBOutlet weak var yellowView: CustomView! // viewController가 생성되어 메모리에 올라가면 호출됨 override func viewDidLoad() { super.viewDidLoad() self.yellowView.cornerRaadius = 20 } } // 스토리보드에서 VC의 Storyboard ID를 클래스명과 동일하게 설정했다고 가정 // - Storyboard 파일명: "AutoLayout4" // - Storyboard ID: "Autolayout4ViewController" #Preview("AutoLayout4 (Storyboard VC)") { // 미리보기에서 종종 Bundle.main 대신 타입 기반 번들이 더 안전합니다 // bundle: 스토리보드, 이미지, nib, JSON 등을 묶어 관리하는 타입 // 스토리보드 리소스를 찾을 번들을 지정 let bundle = Bundle(for: Autolayout4ViewController.self) let sb = UIStoryboard(name: "AutoLayout4", bundle: bundle) // 스토리보드 파일 로드 let vc = sb.instantiateViewController(withIdentifier: "Autolayout4ViewController") return vc } 4. 전체 코드 import UIKit // @IBDesignable: 인터페이스 빌더에서 디자인으로 확인 가능해짐 @IBDesignable class CustomView: UIView { /// 정사각형 여부 /// - Returns: 여부 private var isSquare: Bool { // get return self.frame.width == self.frame.height } // @IBInspectable: 인스펙터 패널에서 사용할 수 있도록 설정 @IBInspectable var cornerRaadius: CGFloat = 0 { didSet { self.layer.cornerRadius = cornerRaadius } } // 가장자리 두꼐 @IBInspectable var borderWidth: CGFloat = 0 { didSet { self.layer.borderWidth = borderWidth } } // 색상 @IBInspectable var borderColor: UIColor = UIColor.clear { didSet { self.layer.borderColor = borderColor.cgColor } } // 동그라미 뷰 @IBInspectable var isCircle: Bool = false { didSet { // 정사각형이면서 isCircle이 true라면? if isSquare &amp;&amp; isCircle { self.layer.cornerRadius = self.frame.width / 2 } } } // 그림자 @IBInspectable var hasShadow: Bool = false { didSet { if hasShadow { self.layer.applyShadow() } } } } extension CALayer { /// 뷰에 그림자 적용 /// - Parameters: /// - color: 그림자 색 /// - alpha: 투명도 /// - x: 가로 위치 /// - y: 세로 위치 /// - blur: 블러 /// - spread: 퍼짐 정도 func applyShadow( color: UIColor = .black, alpha: Float = 0.5, x: CGFloat = 0, y: CGFloat = 20, blur: CGFloat = 35, spread: CGFloat = 0) { masksToBounds = false shadowColor = color.cgColor shadowOpacity = alpha shadowOffset = CGSize(width: x, height: y) shadowRadius = blur / 2.0 if spread == 0 { shadowPath = nil } else { let dx = -spread let rect = bounds.insetBy(dx: dx, dy: dx) shadowPath = UIBezierPath(rect: rect).cgPath } } } class Autolayout4ViewController: UIViewController { @IBOutlet weak var yellowView: CustomView! // viewController가 생성되어 메모리에 올라가면 호출됨 override func viewDidLoad() { super.viewDidLoad() self.yellowView.cornerRaadius = 20 self.yellowView.borderWidth = 10 self.yellowView.borderColor = .blue self.yellowView.isCircle = true self.yellowView.hasShadow = true } } // 스토리보드에서 VC의 Storyboard ID를 클래스명과 동일하게 설정했다고 가정 // - Storyboard 파일명: "AutoLayout4" // - Storyboard ID: "Autolayout4ViewController" #Preview("AutoLayout4 (Storyboard VC)") { // 미리보기에서 종종 Bundle.main 대신 타입 기반 번들이 더 안전합니다 // bundle: 스토리보드, 이미지, nib, JSON 등을 묶어 관리하는 타입 // 스토리보드 리소스를 찾을 번들을 지정 let bundle = Bundle(for: Autolayout4ViewController.self) let sb = UIStoryboard(name: "AutoLayout4", bundle: bundle) // 스토리보드 파일 로드 let vc = sb.instantiateViewController(withIdentifier: "Autolayout4ViewController") return vc } Reference https://jeong9216.tistory.com/694#google_vignette]]></summary></entry><entry><title type="html">[AutoLayout] 2. 다른 뷰에 뷰를 연결하는법</title><link href="http://localhost:4000/AutoLayout-autolayout2/" rel="alternate" type="text/html" title="[AutoLayout] 2. 다른 뷰에 뷰를 연결하는법" /><published>2025-08-12T00:00:00+00:00</published><updated>2025-08-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout2</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout2/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<table>
  <tr>
    <td><img src="/assets/img/2025-08-12-%5BAutoLayout%5D-autolayout2/image-20250812160116357.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout1/image-20250812160511084.png" alt="커스텀셀" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Leading</td>
    <td style="text-align:center;">Option + Leading</td>
  </tr>
  <tr>
    <td style="text-align:center; font-size:14px; color:#666;">
    green view에서 yellow view로 드래그 해서 Leading을 해주면<br />yellow view leading과 동일한 효과를 얻을 수 있다.
    </td>
    <td style="text-align:center; font-size:14px; color:#666;">
    green view에서 yellow view로 드래그 할 때 option을 누르면서 Leading을 해주면<br /> 현재 green위치에서 yellow leading 사이의 여백을 더해줄 수 있다.
    </td>
  </tr>
</table>

<p><br /><br /><br /><br /></p>

<table>
  <tr>
    <td><img src="/assets/img/2025-08-12-%5BAutoLayout%5D-autolayout2/image-20250812161107136.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-08-12-%5BAutoLayout%5D-autolayout2/image-20250812161522955.png" alt="커스텀셀" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Top Anchor 1번방식</td>
    <td style="text-align:center;">Top Anchor 2번방식</td>
  </tr>
  <tr>
    <td style="text-align:center; font-size:14px; color:#666;">
    green에서 Top Anchor를 설정하면 작살이 위로 날라가서 제일 가까운 top에 꽃힌다.
    </td>
    <td style="text-align:center; font-size:14px; color:#666;">
    만약 1번방식 대신 드래그로 하는방법은 green의 top을 yellow의 바텀으로 거는 설정이 없기 때문에
    yellow의 바텀으로 일단 걸고 우측 인스펙터에서 green Bottom -&gt; green Top으로 옮기고 constant를 주면 된다.
    </td>
  </tr>
</table>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[Leading Option + Leading green view에서 yellow view로 드래그 해서 Leading을 해주면yellow view leading과 동일한 효과를 얻을 수 있다. green view에서 yellow view로 드래그 할 때 option을 누르면서 Leading을 해주면 현재 green위치에서 yellow leading 사이의 여백을 더해줄 수 있다. Top Anchor 1번방식 Top Anchor 2번방식 green에서 Top Anchor를 설정하면 작살이 위로 날라가서 제일 가까운 top에 꽃힌다. 만약 1번방식 대신 드래그로 하는방법은 green의 top을 yellow의 바텀으로 거는 설정이 없기 때문에 yellow의 바텀으로 일단 걸고 우측 인스펙터에서 green Bottom -&gt; green Top으로 옮기고 constant를 주면 된다.]]></summary></entry><entry><title type="html">[AutoLayout] 3. 컨테이너</title><link href="http://localhost:4000/AutoLayout-autolayout3/" rel="alternate" type="text/html" title="[AutoLayout] 3. 컨테이너" /><published>2025-08-12T00:00:00+00:00</published><updated>2025-08-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout3</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout3/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<h2 id="view-vs-label">View vs label</h2>
<ul>
  <li>일반적인 view는 크기와 위치를 지정해줘야 한다.</li>
  <li>label은 자체적으로 크기를 가지기 때문에 크기는 정해주지 않아고 위치만 정해준다.</li>
  <li>크기를 대신해줄 수 있는 것은 <strong>constraints</strong>이다.</li>
</ul>

<table>
  <tr>
    <td><img src="/assets/img/2025-08-12-%5BAutoLayout%5D-autolayout3/image-20250812164741262.png" alt="커스텀셀1" width="90%" /></td>
    <td><img src="/assets/img/2025-08-12-%5BAutoLayout%5D-autolayout3/image-20250812165643354.png" alt="커스텀셀" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Yellow의 위치와 크기 고정</td>
    <td style="text-align:center;">Yellow의 위치만 고정(크기x)</td>
  </tr>
  <tr>
    <td style="text-align:center; font-size:14px; color:#666;">
    컨테이너 뷰(Yellow)의 크기와 위치를 모두 고정하는 방식<br />
    width와 height를 직접 지정하여 레이아웃을 확정한다.
    </td>
    <td style="text-align:center; font-size:14px; color:#666;">
      크기는 직접 지정하지 않고 내부 Yellow 컨테이너의 subview들의 constraints로 대체하는 방식.      
      예를 들어, <code>yellow</code>의 subview(top)와 label의 top, bottom을 서로 연결하면  
      label의 높이가 곧 yellow의 높이가 된다.<br /> 
      width는 subview 또는 label에서 yellow로 <b>leading</b> 제약을 주어 결정할 수 있다.
    </td>
  </tr>
</table>

<h2 id="정리">정리</h2>
<p>크기를 대신해서 할 수 있는게 constraints이다.   <br />
yellow container의 크기를 해당 컨테이너 내부의 constraints로 대체할 수 있다.   <br />
가능한 이유는 yellow의 subview의 top이 존재하고 label의 top과 subView의 바텀이 연결되어 있다. 추가적으로 label의 bottom을 yellow의 bottom으로 연결해주면 높이는 대체가 된다.<br />
width는 label이나 subView에서 yellow로 왼쪽으로 작살을 던져주면 해결된다.</p>

<p>(subView의 top이 yellow의 top에 연결되어 있고 subView가 가운데 정렬이기 때문에 subView에서 왼쪽으로 anchor를 놓든 subView의 leading을 따르는 label의 왼쪽으로 anchor를 놓든 width를 결정할 수 있다.)</p>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[View vs label 일반적인 view는 크기와 위치를 지정해줘야 한다. label은 자체적으로 크기를 가지기 때문에 크기는 정해주지 않아고 위치만 정해준다. 크기를 대신해줄 수 있는 것은 constraints이다. Yellow의 위치와 크기 고정 Yellow의 위치만 고정(크기x) 컨테이너 뷰(Yellow)의 크기와 위치를 모두 고정하는 방식 width와 height를 직접 지정하여 레이아웃을 확정한다. 크기는 직접 지정하지 않고 내부 Yellow 컨테이너의 subview들의 constraints로 대체하는 방식. 예를 들어, yellow의 subview(top)와 label의 top, bottom을 서로 연결하면 label의 높이가 곧 yellow의 높이가 된다. width는 subview 또는 label에서 yellow로 leading 제약을 주어 결정할 수 있다. 정리 크기를 대신해서 할 수 있는게 constraints이다. yellow container의 크기를 해당 컨테이너 내부의 constraints로 대체할 수 있다. 가능한 이유는 yellow의 subview의 top이 존재하고 label의 top과 subView의 바텀이 연결되어 있다. 추가적으로 label의 bottom을 yellow의 bottom으로 연결해주면 높이는 대체가 된다. width는 label이나 subView에서 yellow로 왼쪽으로 작살을 던져주면 해결된다. (subView의 top이 yellow의 top에 연결되어 있고 subView가 가운데 정렬이기 때문에 subView에서 왼쪽으로 anchor를 놓든 subView의 leading을 따르는 label의 왼쪽으로 anchor를 놓든 width를 결정할 수 있다.)]]></summary></entry><entry><title type="html">[AutoLayout] 1. Constraint</title><link href="http://localhost:4000/AutoLayout-autolayout1/" rel="alternate" type="text/html" title="[AutoLayout] 1. Constraint" /><published>2025-08-08T00:00:00+00:00</published><updated>2025-08-08T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout1</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout1/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<ul>
  <li>오토레이아웃에서는 크기와 위치가 중요하다. 기본 개념은 크기를 지정하고 위치를 지정해준다.</li>
</ul>

<table>
  <tr>
    <td><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout1/image-20250812152018585.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout1/image-20250812152323796.png" alt="커스텀셀" width="100%" /></td>
    <td><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout1/image-20250812153048794.png" alt="커스텀셀" width="100%" /></td>
    <td><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout1/image-20250812153505739.png" alt="커스텀셀" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">크기를 지정하고<br />위치를 지정</td>
    <td style="text-align:center;">상단 위치만 지정하고<br />수평 정렬</td>
    <td style="text-align:center;">상단 위치만 지정하고<br />좌우 앵커 지정</td>
    <td style="text-align:center;">상단 위치만 지정하고<br />좌측 앵커와 가운데 정렬, width 제거</td>
  </tr>
  <tr>
    <td style="text-align:center; font-size:14px; color:#666;">
    크기와 위치를 모두 지정해<br />레이아웃 고정.
    </td>
    <td style="text-align:center; font-size:14px; color:#666;">
    가운데 정렬로 기기별 가로 위치 일관성 확보.
    </td>
    <td style="text-align:center; font-size:14px; color:#666;">
      기기마다 크기가 달라서 문제가 발생할 수 있다.<br />이때는 width를 없애주자.
    </td>
    <td style="text-align:center; font-size:14px; color:#666;">
      좌측 앵커만 수정해도 좌우 여백을 조절할 수 있다.
    </td>
  </tr>
</table>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[오토레이아웃에서는 크기와 위치가 중요하다. 기본 개념은 크기를 지정하고 위치를 지정해준다. 크기를 지정하고위치를 지정 상단 위치만 지정하고수평 정렬 상단 위치만 지정하고좌우 앵커 지정 상단 위치만 지정하고좌측 앵커와 가운데 정렬, width 제거 크기와 위치를 모두 지정해레이아웃 고정. 가운데 정렬로 기기별 가로 위치 일관성 확보. 기기마다 크기가 달라서 문제가 발생할 수 있다.이때는 width를 없애주자. 좌측 앵커만 수정해도 좌우 여백을 조절할 수 있다.]]></summary></entry><entry><title type="html">[AutoLayout] 0. 오토레이아웃 개념</title><link href="http://localhost:4000/AutoLayout-autolayout0/" rel="alternate" type="text/html" title="[AutoLayout] 0. 오토레이아웃 개념" /><published>2025-08-08T00:00:00+00:00</published><updated>2025-08-08T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayout0</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayout0/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<p><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout0/image-20250808170826492.png" alt="이미지" width="70%" /><br />
ViewController에서 View는 화면을 그리는 부분이다.  <br />
UI를 만들기 위한 그래픽 환경을 InterfaceBuilder라고 한다.<br />
<br /><br /><br /><br /></p>

<p><img src="/assets/img/2025-08-08-%5BAutoLayout%5D-autolayout0/image-20250808174834409.png" alt="이미지" width="70%" /><br />
현재 SafeArea위에 View를 올렸다. View 자체는 크기가 없기 때문에 크기 지정을 해주자.  <br />
오토 레이아웃에서는 <strong>크기와 위치가</strong> 중요하다. <strong>크기</strong>를 지정하고 <strong>위치</strong>를 지정해주는게 핵심이다.  <br />
사진에서는 위치는 좌측과 상단만 anchor를 걸고 크기는 width, height를 고정값으로 지정하였다.  <br />
<br /><br /><br /><br /></p>

<h2 id="tip">Tip</h2>
<p>만약 <strong>좌우로 앵커를 모두 설정</strong>한다면, <code class="language-plaintext highlighter-rouge">width</code> 고정값은 제거하자.  <br />
좌우 앵커와 width 고정값이 동시에 존재하면,  <br />
기기 화면 크기에 따라 <strong>레이아웃 충돌 에러</strong>가 발생할 수 있다.</p>

<p>width 고정값을 제거하면 좌우 앵커가 서로 당기는 힘을 주어,  <br />
기기 화면 크기에 맞춰 <strong>자동으로 너비가 결정</strong>된다.  <br />
이는 기종별 화면 크기를 오토레이아웃이 인식하기 때문에 가능하다.</p>

<h2 id="정리">정리</h2>
<ul>
  <li>오토레이아웃은 항상 크기와 위치가 필요하다.</li>
  <li>크기를 만들고 위치를 지정하자.</li>
  <li>anchor를 한 방향에서 서로 걸게 되면 서로 당기는 성질이 있어서 별도로 크기를 지정하지 않아도 핸드폰이 자체적으로 크기를 결정할 수 있다.</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[ViewController에서 View는 화면을 그리는 부분이다. UI를 만들기 위한 그래픽 환경을 InterfaceBuilder라고 한다. 현재 SafeArea위에 View를 올렸다. View 자체는 크기가 없기 때문에 크기 지정을 해주자. 오토 레이아웃에서는 크기와 위치가 중요하다. 크기를 지정하고 위치를 지정해주는게 핵심이다. 사진에서는 위치는 좌측과 상단만 anchor를 걸고 크기는 width, height를 고정값으로 지정하였다. Tip 만약 좌우로 앵커를 모두 설정한다면, width 고정값은 제거하자. 좌우 앵커와 width 고정값이 동시에 존재하면, 기기 화면 크기에 따라 레이아웃 충돌 에러가 발생할 수 있다. width 고정값을 제거하면 좌우 앵커가 서로 당기는 힘을 주어, 기기 화면 크기에 맞춰 자동으로 너비가 결정된다. 이는 기종별 화면 크기를 오토레이아웃이 인식하기 때문에 가능하다. 정리 오토레이아웃은 항상 크기와 위치가 필요하다. 크기를 만들고 위치를 지정하자. anchor를 한 방향에서 서로 걸게 되면 서로 당기는 성질이 있어서 별도로 크기를 지정하지 않아도 핸드폰이 자체적으로 크기를 결정할 수 있다.]]></summary></entry><entry><title type="html">[AutoLayout] 0. 오토레이아웃 요약</title><link href="http://localhost:4000/AutoLayout-autolayoutTable/" rel="alternate" type="text/html" title="[AutoLayout] 0. 오토레이아웃 요약" /><published>2025-08-07T00:00:00+00:00</published><updated>2025-08-07T00:00:00+00:00</updated><id>http://localhost:4000/%5BAutoLayout%5D-autolayoutTable</id><content type="html" xml:base="http://localhost:4000/AutoLayout-autolayoutTable/"><![CDATA[<table>
  <thead>
    <tr>
      <th>내용</th>
      <th>Summary</th>
      <th>날짜</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0. 강의링크</td>
      <td><a href="https://www.youtube.com/playlist?list=PLgOlaPUlbynHT9_2KaWGuoEl1CeKESt9">유튜브 재생목록 바로가기</a></td>
      <td>2025년 3월 17일</td>
    </tr>
    <tr>
      <td>1. 오토레이아웃 기본 개념</td>
      <td>- <a href="http://127.0.0.1:4000/AutoLayout-autolayout0/">0. 오토레이아웃 개념</a><br />- 오토레이아웃은 항상 <strong>크기와 위치</strong>가 필요하다.<br />- <strong>크기</strong>를 만들고 <strong>위치</strong>를 지정하자.<br />- anchor를 한 방향에서 서로 걸게 되면 서로 당기는 성질이 있어서 별도로 크기를 지정하지 않아도 핸드폰이 자체적으로 크기를 결정할 수 있다.</td>
      <td>2025년 3월 18일</td>
    </tr>
    <tr>
      <td>2. 컨스트레인트 기본</td>
      <td>- <strong>safeArea</strong>란 노치에 상관없이 안전하게 뷰를 보여줄 수 있는 부분을 의미한다.<br />- align이 된 상태에서 한쪽에 constraint를 걸면 반대쪽도 자동으로 걸어진다.</td>
      <td>2025년 3월 18일</td>
    </tr>
    <tr>
      <td>3. 멀티뷰 연결</td>
      <td>- control 누르면서 뷰를 다른 뷰에 드래그하여 제약 조건을 지정할 수 있다.<br />- 이때 <strong>option</strong>을 누르면 현재 위치로 제약이 된다.</td>
      <td>2025년 3월 18일</td>
    </tr>
    <tr>
      <td>4. 컨테이너 개념</td>
      <td>- label의 크기는 안 넣어도 된다.<br />- <strong>horizontal = 수평정렬 = x축 가운데정렬</strong>이다.<br />- UIView 크기를 하드코딩하지 않고 constraints로 지정할 수 있다.</td>
      <td>2025년 3월 18일</td>
    </tr>
  </tbody>
</table>]]></content><author><name>Dong Hyeon</name></author><category term="AutoLayout" /><summary type="html"><![CDATA[내용 Summary 날짜 0. 강의링크 유튜브 재생목록 바로가기 2025년 3월 17일 1. 오토레이아웃 기본 개념 - 0. 오토레이아웃 개념- 오토레이아웃은 항상 크기와 위치가 필요하다.- 크기를 만들고 위치를 지정하자.- anchor를 한 방향에서 서로 걸게 되면 서로 당기는 성질이 있어서 별도로 크기를 지정하지 않아도 핸드폰이 자체적으로 크기를 결정할 수 있다. 2025년 3월 18일 2. 컨스트레인트 기본 - safeArea란 노치에 상관없이 안전하게 뷰를 보여줄 수 있는 부분을 의미한다.- align이 된 상태에서 한쪽에 constraint를 걸면 반대쪽도 자동으로 걸어진다. 2025년 3월 18일 3. 멀티뷰 연결 - control 누르면서 뷰를 다른 뷰에 드래그하여 제약 조건을 지정할 수 있다.- 이때 option을 누르면 현재 위치로 제약이 된다. 2025년 3월 18일 4. 컨테이너 개념 - label의 크기는 안 넣어도 된다.- horizontal = 수평정렬 = x축 가운데정렬이다.- UIView 크기를 하드코딩하지 않고 constraints로 지정할 수 있다. 2025년 3월 18일]]></summary></entry><entry><title type="html">[RxDataSource] 3. CustomDatasource 개선하기</title><link href="http://localhost:4000/RxDataSource-RxDataSource-3/" rel="alternate" type="text/html" title="[RxDataSource] 3. CustomDatasource 개선하기" /><published>2025-08-03T00:00:00+00:00</published><updated>2025-08-03T00:00:00+00:00</updated><id>http://localhost:4000/%5BRxDataSource%5D-RxDataSource-3</id><content type="html" xml:base="http://localhost:4000/RxDataSource-RxDataSource-3/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<p>지난 포스트에서 커스텀 델리게이트를 만들어 보았다. 이번에는 기존 코드를 개선하여 셀 구성 로직을 VC에서 정의할 수 있도록 매개변수로 빼서 위임해보자.</p>

<h2 id="지난-코드">지난 코드</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">/// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">/// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UITableViewCell</span><span class="p">:</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{}</span>

<span class="c1">// MARK: - Model</span>
<span class="kd">struct</span> <span class="kt">Todo</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">isDone</span><span class="p">:</span> <span class="kt">Bool</span>
    
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">getDumies</span><span class="p">(</span><span class="n">_</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">faker</span> <span class="o">=</span> <span class="kt">Faker</span><span class="p">(</span><span class="nv">locale</span><span class="p">:</span> <span class="s">"ko"</span><span class="p">)</span>
        <span class="nf">return</span> <span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">count</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">id</span> <span class="k">in</span>
            <span class="k">let</span> <span class="nv">firstName</span> <span class="o">=</span> <span class="n">faker</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="nf">firstName</span><span class="p">()</span>
            <span class="k">let</span> <span class="nv">lastName</span> <span class="o">=</span> <span class="n">faker</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="nf">lastName</span><span class="p">()</span>
            <span class="k">let</span> <span class="nv">title</span> <span class="o">=</span> <span class="s">"</span><span class="se">\(</span><span class="n">lastName</span><span class="se">)</span><span class="s"> </span><span class="se">\(</span><span class="n">firstName</span><span class="se">)</span><span class="s">"</span>
            <span class="k">return</span> <span class="kt">Todo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="n">id</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="nv">isDone</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">TodoCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 디버깅용</span>
    <span class="k">var</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">Todo</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="c1">// (uuid, 변경된상태)</span>
    <span class="k">var</span> <span class="nv">isDoneChange</span><span class="p">:</span> <span class="p">((</span><span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">newValue</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">isDoneSwitch</span><span class="p">:</span> <span class="kt">UISwitch</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">sw</span> <span class="o">=</span> <span class="kt">UISwitch</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sw</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">idLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">vStack</span><span class="p">:</span> <span class="kt">UIStackView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">st</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">titleLabel</span><span class="p">,</span> <span class="n">idLabel</span><span class="p">])</span>
        <span class="n">st</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="n">vertical</span>
        <span class="k">return</span> <span class="n">st</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">hStack</span><span class="p">:</span> <span class="kt">UIStackView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">st</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">vStack</span><span class="p">,</span> <span class="n">isDoneSwitch</span><span class="p">])</span>
        <span class="n">st</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="n">horizontal</span>
        <span class="k">return</span> <span class="n">st</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">prepareForReuse</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">prepareForReuse</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"prepareForReuse() - cellData.id: </span><span class="se">\(</span><span class="n">cellData</span><span class="p">?</span><span class="o">.</span><span class="n">id</span> <span class="p">??</span> <span class="mi">0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다.</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">CellStyle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="c1">/// 부모의 로직을 싱행시키는 의미</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="n">reuseIdentifier</span><span class="p">)</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        
        <span class="n">isDoneSwitch</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span>
                               <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">handleIsDOne</span><span class="p">),</span>
                               <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">hStack</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">contentView</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">handleIsDOne</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UISwitch</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- id: </span><span class="se">\(</span><span class="n">cellData</span><span class="p">?</span><span class="o">.</span><span class="n">id</span> <span class="p">??</span> <span class="mi">0</span><span class="se">)</span><span class="s">, sendar: </span><span class="se">\(</span><span class="n">sender</span><span class="o">.</span><span class="n">isOn</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">id</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">cellData</span><span class="p">?</span><span class="o">.</span><span class="n">id</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="nf">isDoneChange</span><span class="p">?(</span><span class="n">id</span><span class="p">,</span> <span class="n">sender</span><span class="o">.</span><span class="n">isOn</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">TodoCell</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">configure</span><span class="p">(</span><span class="n">with</span> <span class="nv">todo</span><span class="p">:</span> <span class="kt">Todo</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">cellData</span> <span class="o">=</span> <span class="n">todo</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">todo</span><span class="o">.</span><span class="n">title</span>
        <span class="n">idLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"ID: </span><span class="se">\(</span><span class="n">todo</span><span class="o">.</span><span class="n">id</span><span class="se">)</span><span class="s">"</span>
        <span class="n">isDoneSwitch</span><span class="o">.</span><span class="n">isOn</span> <span class="o">=</span> <span class="n">todo</span><span class="o">.</span><span class="n">isDone</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// MARK: - 구현 목적: VC에 부담을 주지말자</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">TodosDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span><span class="p">,</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">],</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">todoList</span> <span class="o">=</span> <span class="n">todoList</span>
        <span class="k">self</span><span class="o">.</span><span class="n">tableView</span> <span class="o">=</span> <span class="n">tableView</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Register</span>
    <span class="kd">func</span> <span class="n">register</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">cellType</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="k">Type</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tableView</span><span class="p">?</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellType</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UITableView Datasource Methods</span>
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">todoList</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체e</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        
        
        <span class="c1">// MARK: - 로직 -&gt; 함수로 만들어서 매개변수로 활용해보자</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">TodoCell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">TodoCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">TodoCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">cellData</span> <span class="o">=</span> <span class="n">todoList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        <span class="n">cell</span><span class="o">.</span><span class="nf">configure</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">cellData</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">TodosVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">tv</span> <span class="o">=</span> <span class="kt">UITableView</span><span class="p">()</span>
        <span class="c1">// MARK: - 이 부분도 TodosDataSource에 위임</span>
        <span class="c1">// tv.register(TodoCell.self, forCellReuseIdentifier: TodoCell.reuseIdentifier)</span>
        <span class="k">return</span> <span class="n">tv</span>
    <span class="p">}()</span>
    
    <span class="k">var</span> <span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">todosDataSource</span><span class="p">:</span> <span class="kt">TodosDataSource</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">makeUI</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">constraints</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">todoList</span> <span class="o">=</span> <span class="kt">Todo</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">setCustomDataSource</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setCustomDataSource</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 1️⃣ dataSource 생성</span>
        <span class="k">let</span> <span class="nv">dataSource</span> <span class="o">=</span> <span class="kt">TodosDataSource</span><span class="p">(</span><span class="nv">todoList</span><span class="p">:</span> <span class="n">todoList</span><span class="p">,</span> <span class="nv">tableView</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        
        <span class="c1">// 2️⃣ register 호출 (이 시점에 tableView는 이미 존재함)</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="nv">cellType</span><span class="p">:</span> <span class="kt">TodoCell</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        
        <span class="c1">// 3️⃣ 연결</span>
        <span class="k">self</span><span class="o">.</span><span class="n">todosDataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">myTableView</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="개선-코드">개선 코드</h2>

<h3 id="custom-delegate">Custom Delegate</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// MARK: - 구현 목적: VC에 부담을 주지말자</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">TodosDataSource2</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span><span class="p">,</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="c1">// MARK: - 로직을 밖으로 뺄 수 있다 즉 VC에서 클로저로 사용 가능하다.</span>
    <span class="c1">// configureCell 클로저: 셀 구성 로직을 VC에서 정의할 수 있게 위임함</span>
    <span class="c1">// 매개변수 tableView, indexPath는 외부에서 받아오고</span>
    <span class="c1">// cellData(todo)는 내부 todoList에서 가져와 주입</span>
    <span class="k">var</span> <span class="nv">configureCell</span><span class="p">:</span> <span class="p">((</span><span class="kt">UITableView</span><span class="p">,</span> <span class="kt">IndexPath</span><span class="p">,</span> <span class="kt">Todo</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span><span class="p">)?</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">],</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">todoList</span> <span class="o">=</span> <span class="n">todoList</span>
        <span class="k">self</span><span class="o">.</span><span class="n">tableView</span> <span class="o">=</span> <span class="n">tableView</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Register</span>
    <span class="kd">func</span> <span class="n">register</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">cellType</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="k">Type</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tableView</span><span class="p">?</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellType</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UITableView Datasource Methods</span>
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">todoList</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체e</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        
        <span class="k">let</span> <span class="nv">cellData</span> <span class="o">=</span> <span class="n">todoList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        <span class="k">return</span> <span class="nf">configureCell</span><span class="p">?(</span><span class="n">tableView</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">,</span> <span class="n">cellData</span><span class="p">)</span> <span class="p">??</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        
        <span class="c1">// MARK: - 로직 -&gt; 함수로 만들어서 매개변수로 활용해보자</span>
        <span class="cm">/*
        guard let cell: TodoCell = tableView.dequeueReusableCell(withIdentifier: TodoCell.reuseIdentifier, for: indexPath) as? TodoCell else {
            return UITableViewCell()
        }
        
        cell.configure(with: cellData)
        return cell
         */</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="viewcontroller">ViewController</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">TodosVC2</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">tv</span> <span class="o">=</span> <span class="kt">UITableView</span><span class="p">()</span>
        <span class="c1">// MARK: - 이 부분도 TodosDataSource에 위임</span>
        <span class="c1">// tv.register(TodoCell.self, forCellReuseIdentifier: TodoCell.reuseIdentifier)</span>
        <span class="k">return</span> <span class="n">tv</span>
    <span class="p">}()</span>
    
    <span class="k">var</span> <span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">todosDataSource</span><span class="p">:</span> <span class="kt">TodosDataSource2</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">makeUI</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">constraints</span><span class="p">()</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">todoList</span> <span class="o">=</span> <span class="kt">Todo</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">setCustomDataSource</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setCustomDataSource</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 1️⃣ dataSource 생성</span>
        <span class="n">todosDataSource</span> <span class="o">=</span> <span class="kt">TodosDataSource2</span><span class="p">(</span><span class="nv">todoList</span><span class="p">:</span> <span class="n">todoList</span><span class="p">,</span> <span class="nv">tableView</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        
        <span class="c1">// MARK: - 여기에 클로저 추가</span>
        <span class="k">self</span><span class="o">.</span><span class="n">todosDataSource</span><span class="p">?</span><span class="o">.</span><span class="n">configureCell</span> <span class="o">=</span> <span class="p">{</span> <span class="n">mytableView</span><span class="p">,</span> <span class="n">indexPath</span><span class="p">,</span> <span class="n">cellData</span> <span class="k">in</span>
            
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span><span class="p">:</span> <span class="kt">TodoCell</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">TodoCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">TodoCell</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span> <span class="p">}</span>
            
            <span class="n">cell</span><span class="o">.</span><span class="nf">configure</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">cellData</span><span class="p">)</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">isDoneChange</span> <span class="o">=</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">id</span><span class="p">,</span> <span class="n">isDone</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                <span class="k">if</span> <span class="k">let</span> <span class="nv">foundIndex</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">todoList</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span> <span class="nv">where</span><span class="p">:</span> <span class="p">{</span><span class="nv">$0</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="n">id</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">todosDataSource</span><span class="p">?</span><span class="o">.</span><span class="n">todoList</span><span class="p">[</span><span class="n">foundIndex</span><span class="p">]</span><span class="o">.</span><span class="n">isDone</span> <span class="o">=</span> <span class="n">isDone</span>
                    <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">reloadRows</span><span class="p">(</span><span class="nv">at</span><span class="p">:</span> <span class="p">[</span><span class="kt">IndexPath</span><span class="p">(</span><span class="nv">row</span><span class="p">:</span> <span class="n">foundIndex</span><span class="p">,</span> <span class="nv">section</span><span class="p">:</span> <span class="mi">0</span><span class="p">)],</span> <span class="nv">with</span><span class="p">:</span> <span class="o">.</span><span class="n">fade</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            
            <span class="k">return</span> <span class="n">cell</span>
        <span class="p">}</span>
        
        <span class="c1">// 2️⃣ register 호출 (이 시점에 tableView는 이미 존재함)</span>
        <span class="n">todosDataSource</span><span class="p">?</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="nv">cellType</span><span class="p">:</span> <span class="kt">TodoCell</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        
        <span class="c1">// 3️⃣ 연결</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">todosDataSource</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">myTableView</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="ReactiveX" /><category term="RxDataSource" /><summary type="html"><![CDATA[지난 포스트에서 커스텀 델리게이트를 만들어 보았다. 이번에는 기존 코드를 개선하여 셀 구성 로직을 VC에서 정의할 수 있도록 매개변수로 빼서 위임해보자. 지난 코드 protocol ReuseIdentifiable { /// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { /// 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } extension UITableViewCell: ReuseIdentifiable {} // MARK: - Model struct Todo { let id: Int let title: String var isDone: Bool static func getDumies(_ count: Int = 10) -&gt; [Todo] { let faker = Faker(locale: "ko") return (1...count).map { id in let firstName = faker.name.firstName() let lastName = faker.name.lastName() let title = "\(lastName) \(firstName)" return Todo(id: id, title: title, isDone: false) } } } final class TodoCell: UITableViewCell { // 디버깅용 var cellData: Todo? = nil // (uuid, 변경된상태) var isDoneChange: ((Int, _ newValue: Bool) -&gt; Void)? = nil lazy var isDoneSwitch: UISwitch = { let sw = UISwitch() return sw }() lazy var titleLabel: UILabel = { let label = UILabel() return label }() lazy var idLabel: UILabel = { let label = UILabel() return label }() private lazy var vStack: UIStackView = { let st = UIStackView(arrangedSubviews: [titleLabel, idLabel]) st.axis = .vertical return st }() private lazy var hStack: UIStackView = { let st = UIStackView(arrangedSubviews: [vStack, isDoneSwitch]) st.axis = .horizontal return st }() override func prepareForReuse() { super.prepareForReuse() print(#fileID, #function, #line, "prepareForReuse() - cellData.id: \(cellData?.id ?? 0)") } // 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다. override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) { /// 부모의 로직을 싱행시키는 의미 super.init(style: style, reuseIdentifier: reuseIdentifier) makeUI() constraints() isDoneSwitch.addTarget(self, action: #selector(handleIsDOne), for: .valueChanged) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } private func makeUI() { [hStack].forEach { contentView.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ hStack.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10), hStack.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10), hStack.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10), hStack.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -10), ]) } @objc func handleIsDOne(_ sender: UISwitch) { print(#fileID, #function, #line, "- id: \(cellData?.id ?? 0), sendar: \(sender.isOn)") guard let id = self.cellData?.id else { return } isDoneChange?(id, sender.isOn) } } extension TodoCell { func configure(with todo: Todo) { self.cellData = todo titleLabel.text = todo.title idLabel.text = "ID: \(todo.id)" isDoneSwitch.isOn = todo.isDone } } // MARK: - 구현 목적: VC에 부담을 주지말자 final class TodosDataSource: NSObject, UITableViewDataSource, UITableViewDelegate { var todoList: [Todo] = [] var tableView: UITableView? = nil init(todoList: [Todo], tableView: UITableView) { self.todoList = todoList self.tableView = tableView } // MARK: - Register func register&lt;T: UITableViewCell&gt;(cellType: T.Type) { tableView?.register(cellType, forCellReuseIdentifier: T.reuseIdentifier) } // MARK: - UITableView Datasource Methods /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return todoList.count } // 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체e func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { // MARK: - 로직 -&gt; 함수로 만들어서 매개변수로 활용해보자 guard let cell: TodoCell = tableView.dequeueReusableCell(withIdentifier: TodoCell.reuseIdentifier, for: indexPath) as? TodoCell else { return UITableViewCell() } let cellData = todoList[indexPath.row] cell.configure(with: cellData) return cell } } final class TodosVC: UIViewController { private lazy var myTableView: UITableView = { let tv = UITableView() // MARK: - 이 부분도 TodosDataSource에 위임 // tv.register(TodoCell.self, forCellReuseIdentifier: TodoCell.reuseIdentifier) return tv }() var todoList: [Todo] = [] var todosDataSource: TodosDataSource? = nil override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .white self.makeUI() self.constraints() self.todoList = Todo.getDumies() self.setCustomDataSource() } private func setCustomDataSource() { // 1️⃣ dataSource 생성 let dataSource = TodosDataSource(todoList: todoList, tableView: myTableView) // 2️⃣ register 호출 (이 시점에 tableView는 이미 존재함) dataSource.register(cellType: TodoCell.self) // 3️⃣ 연결 self.todosDataSource = dataSource myTableView.dataSource = dataSource } private func makeUI() { [myTableView].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ myTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), myTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor), myTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor), myTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor) ]) } } 개선 코드 Custom Delegate import UIKit // MARK: - 구현 목적: VC에 부담을 주지말자 final class TodosDataSource2: NSObject, UITableViewDataSource, UITableViewDelegate { var todoList: [Todo] = [] var tableView: UITableView? = nil // MARK: - 로직을 밖으로 뺄 수 있다 즉 VC에서 클로저로 사용 가능하다. // configureCell 클로저: 셀 구성 로직을 VC에서 정의할 수 있게 위임함 // 매개변수 tableView, indexPath는 외부에서 받아오고 // cellData(todo)는 내부 todoList에서 가져와 주입 var configureCell: ((UITableView, IndexPath, Todo) -&gt; UITableViewCell)? init(todoList: [Todo], tableView: UITableView) { self.todoList = todoList self.tableView = tableView } // MARK: - Register func register&lt;T: UITableViewCell&gt;(cellType: T.Type) { tableView?.register(cellType, forCellReuseIdentifier: T.reuseIdentifier) } // MARK: - UITableView Datasource Methods /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return todoList.count } // 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체e func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { let cellData = todoList[indexPath.row] return configureCell?(tableView, indexPath, cellData) ?? UITableViewCell() // MARK: - 로직 -&gt; 함수로 만들어서 매개변수로 활용해보자 /* guard let cell: TodoCell = tableView.dequeueReusableCell(withIdentifier: TodoCell.reuseIdentifier, for: indexPath) as? TodoCell else { return UITableViewCell() } cell.configure(with: cellData) return cell */ } } ViewController import UIKit final class TodosVC2: UIViewController { private lazy var myTableView: UITableView = { let tv = UITableView() // MARK: - 이 부분도 TodosDataSource에 위임 // tv.register(TodoCell.self, forCellReuseIdentifier: TodoCell.reuseIdentifier) return tv }() var todoList: [Todo] = [] var todosDataSource: TodosDataSource2? = nil override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .white self.makeUI() self.constraints() self.todoList = Todo.getDumies() self.setCustomDataSource() } private func setCustomDataSource() { // 1️⃣ dataSource 생성 todosDataSource = TodosDataSource2(todoList: todoList, tableView: myTableView) // MARK: - 여기에 클로저 추가 self.todosDataSource?.configureCell = { mytableView, indexPath, cellData in guard let cell: TodoCell = self.myTableView.dequeueReusableCell(withIdentifier: TodoCell.reuseIdentifier, for: indexPath) as? TodoCell else { return UITableViewCell() } cell.configure(with: cellData) cell.isDoneChange = { [weak self] id, isDone in guard let self = self else { return } if let foundIndex = self.todoList.firstIndex( where: {$0.id == id} ) { self.todosDataSource?.todoList[foundIndex].isDone = isDone DispatchQueue.main.async { self.myTableView.reloadRows(at: [IndexPath(row: foundIndex, section: 0)], with: .fade) } } } return cell } // 2️⃣ register 호출 (이 시점에 tableView는 이미 존재함) todosDataSource?.register(cellType: TodoCell.self) // 3️⃣ 연결 myTableView.dataSource = todosDataSource } private func makeUI() { [myTableView].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ myTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), myTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor), myTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor), myTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor) ]) } }]]></summary></entry></feed>