<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-17T07:49:01+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html"></title><link href="http://localhost:4000/Makefile/" rel="alternate" type="text/html" title="" /><published>2025-07-17T00:00:00+00:00</published><updated>2025-07-17T00:00:00+00:00</updated><id>http://localhost:4000/Makefile</id><content type="html" xml:base="http://localhost:4000/Makefile/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->]]></content><author><name>Dong Hyeon</name></author><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[Data Structure] 1. 자료구조와 알고리즘</title><link href="http://localhost:4000/Data-Structure-study1/" rel="alternate" type="text/html" title="[Data Structure] 1. 자료구조와 알고리즘" /><published>2025-07-16T00:00:00+00:00</published><updated>2025-07-16T00:00:00+00:00</updated><id>http://localhost:4000/%5BData%20Structure%5D-study1</id><content type="html" xml:base="http://localhost:4000/Data-Structure-study1/"><![CDATA[<!-- <img src="/%EC%9D%B4%EB%AF%B8%EC%A7%80%EA%B2%BD%EB%A1%9C" alt="이미지" width="30%"> -->

<h2 id="자료구조data-structure">자료구조(Data Structure)</h2>
<p>데이터를 효율적으로 저장하고 관리하는 방식을 말한다.  <br />
대량의 데이터를 효율적으로 관리할 수 있는 데이터 구조를 의미한다.  <br />
삽입, 수정, 삭제, 검색, 정렬, 병합, 순회 등 기본 연산을 지원하고   <br />
데이터를 표현하고 조작하는 데 핵심적인 역할을 한다.</p>

<h2 id="추상-자료형abstruct-data-types-adt">추상 자료형(Abstruct Data Types, ADT)</h2>
<p>데이터의 논리적 구조와 연산을 정의하면서 구현 세부사항은 숨기는 개념이다.  <br />
사용자는 기능에만 집중할 수 있고, 내부 구현은 몰라도 된다.  <br />
장보 은닉과 모듈화를 통해 코드의 재사용성과 유지보수성을 높일 수 있다</p>

<h2 id="알고리즘algorithms">알고리즘(Algorithms)</h2>
<p>특정 문제를 해결하기 위한 단계적인 절차이다.  <br />
컴퓨터 과학에서 알고리즘은 입력 데이터를 받아 원하는 결과를 출력하는 절차이며,   <br />
효율적인 알고리즘은 실행 시간과 자원 사용을 최소화한다.</p>

<h2 id="프로그램">프로그램</h2>
<p>프로그램 = 자료구조 + 알고리즘</p>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://bnzn2426.tistory.com/115</li>
  <li>https://developer-haru.tistory.com/70</li>
  <li>https://wikidocs.net/224929</li>
  <li>https://velog.io/@ghldjfldj/자료구조-자료구조란</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Data Structure" /><summary type="html"><![CDATA[자료구조(Data Structure) 데이터를 효율적으로 저장하고 관리하는 방식을 말한다. 대량의 데이터를 효율적으로 관리할 수 있는 데이터 구조를 의미한다. 삽입, 수정, 삭제, 검색, 정렬, 병합, 순회 등 기본 연산을 지원하고 데이터를 표현하고 조작하는 데 핵심적인 역할을 한다. 추상 자료형(Abstruct Data Types, ADT) 데이터의 논리적 구조와 연산을 정의하면서 구현 세부사항은 숨기는 개념이다. 사용자는 기능에만 집중할 수 있고, 내부 구현은 몰라도 된다. 장보 은닉과 모듈화를 통해 코드의 재사용성과 유지보수성을 높일 수 있다 알고리즘(Algorithms) 특정 문제를 해결하기 위한 단계적인 절차이다. 컴퓨터 과학에서 알고리즘은 입력 데이터를 받아 원하는 결과를 출력하는 절차이며, 효율적인 알고리즘은 실행 시간과 자원 사용을 최소화한다. 프로그램 프로그램 = 자료구조 + 알고리즘 Reference https://bnzn2426.tistory.com/115 https://developer-haru.tistory.com/70 https://wikidocs.net/224929 https://velog.io/@ghldjfldj/자료구조-자료구조란]]></summary></entry><entry><title type="html">[Pindora] Dependency Injection란?</title><link href="http://localhost:4000/Pindora-di/" rel="alternate" type="text/html" title="[Pindora] Dependency Injection란?" /><published>2025-07-15T00:00:00+00:00</published><updated>2025-07-15T00:00:00+00:00</updated><id>http://localhost:4000/%5BPindora%5D-di</id><content type="html" xml:base="http://localhost:4000/Pindora-di/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="dependency-injection란-무엇인가">Dependency Injection란 무엇인가?</h2>
<p>DI는 Dependency Injection의 줄임말로, 다양한 우리말 번역이 있지만, 이 글에서는 의존성 주입이라는 말로 사용하고자 한다.<br />
먼저 의존성, 주입, 의존성 주입 순서대로 알아보자.</p>

<h3 id="dependency의존성">Dependency(의존성)</h3>
<p>객체 지향 프로그래밍에서 Dependency, 의존성은 <code class="language-plaintext highlighter-rouge">서로 다른 객체 사이에 의존 관계가 있다는 것</code>을 말한다. 즉 <code class="language-plaintext highlighter-rouge">의존하는 객체가 수정되면 다른 객체도 영향을 받는다는 것</code>이다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">class</span> <span class="kt">A부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"A부품"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">B부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"B부품"</span>
<span class="p">}</span>


<span class="c1">/// ex: ViewController()</span>
<span class="kd">class</span> <span class="kt">C완성품</span> <span class="p">{</span>
    
    <span class="c1">/// ex: NetworkManager()</span>
    <span class="c1">// C완성품이 A부품에 의존한다 = 의존성이 생긴다</span>
    <span class="c1">// A부품의 코드가 바뀌면 C완성품의 코드를 바꿔줘야하는 문제가 생긴다</span>
    <span class="c1">// 부품을 바꾸고 싶을 때는 코드를 B부품으로 버꿔야 하는 문제가 생긴다</span>
    <span class="k">var</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">A부품</span> <span class="o">=</span> <span class="kt">A부품</span><span class="p">()</span>
    
    <span class="kd">func</span> <span class="nf">printName</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>하나의 객체가 다른 객체에 의존하고 있는 코드를 의존하고 있다고 말한다.<br />
이렇게 의존성이 생기는 코드를 확장성있게 바꾸기 위해 의존성 주입을 통해 코드를 개선할 수 있다.</p>

<h2 id="주입injection">주입(Injection)</h2>

<p>생성자를 통해 저장속성을 외부에서 주입하는 개념이다.  <br />
의존성 코드에서는 저장속성에 기본값을 인스턴스로 생성&amp;할당하여 생성자를 만들어 주지 않아도 괜찮았다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 주입(Injection)</span>
<span class="kd">class</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 외부에서 값을 주입(할당/초기화)해서 인스턴스 생성</span>
<span class="k">let</span> <span class="nv">people</span> <span class="o">=</span> <span class="kt">Person</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Index"</span><span class="p">)</span>
</code></pre></div></div>
<p>실제로는 기본값보다는 생성자를 통해서 외부에서 들어온 값을 통해 저장속성에 할당할 수 있게 해주는 개념인 주입의 개념을 실제로 많이 사용한다.<br />
정리하자면 인스턴스를 생성할 때 저장속성을 외부에서 할당(=주입=초기화)해줄 수 있다고 한다.</p>

<h2 id="의존성-주입">의존성 주입</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">class</span> <span class="kt">A부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"A부품"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">B부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"B부품"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">C완성품</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">A부품</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="kt">A부품</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">printName</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 1. 인스턴스를 미리 만들고</span>
<span class="k">let</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">A부품</span> <span class="o">=</span> <span class="kt">A부품</span><span class="p">()</span>
<span class="n">a</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"비싼 A부품"</span>

<span class="c1">// 2. C완성품을 만들 때 주입(Injection)을 해줄 수 있다</span>
<span class="c1">// 하지만 이 코드를 의존성 주입(Dependency Injection)이라고 부르지는 않는다</span>
<span class="k">let</span> <span class="nv">c</span><span class="p">:</span> <span class="kt">C완성품</span> <span class="o">=</span> <span class="kt">C완성품</span><span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="n">a</span><span class="p">)</span>
</code></pre></div></div>
<p>C완성품을 만들 때 미리 만들어 둔 A부품을 주입할 수 있지만 이 코드를 의존성 주입이라고 부르지는 않는다.  <br />
의존적이지 않게 만들어주는 코드를 추가해야 의존성 주입이라는 개념이 된다.</p>

<h3 id="주입을-의존성-주입으로-개선">주입을 의존성 주입으로 개선</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// protocol은 자격증이라고 생각하자</span>
<span class="c1">// 각 부품에서 이 자격증을 채택한다</span>
<span class="c1">// 자격증을 정의할 때 name이라는 속성을 가지면서 읽기, 쓰기가 가능한 name이라는 속성을 가진다고 정의하고 이를 각 모듈에서 채택한다</span>
<span class="c1">// 이 protocol 덕분에 모듈화가 가능해지고 확장적인 코드를 작성할 수 있게 된다</span>
<span class="kd">protocol</span> <span class="n">모듈화된부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="k">set</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">A부품</span><span class="p">:</span> <span class="n">모듈화된부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"A부품"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">B부품</span><span class="p">:</span> <span class="n">모듈화된부품</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"B부품"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">C완성품</span> <span class="p">{</span>
    
    <span class="c1">// 프로토콜로 타입을 선언하여 이 프로토콜(자격증)을 채택한 모든 타입들을 할당해줄 수 있다</span>
    <span class="k">var</span> <span class="nv">a</span><span class="p">:</span> <span class="n">모듈화된부품</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="n">모듈화된부품</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">printName</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">Main</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">moduledA</span> <span class="o">=</span> <span class="kt">A부품</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">moduledB</span> <span class="o">=</span> <span class="kt">B부품</span><span class="p">()</span>
        
        <span class="c1">// 모듈화된 A를 주입할 수도 있고 모듈화된 B를 주입할 수도 있다</span>
        <span class="k">let</span> <span class="nv">c1</span><span class="p">:</span> <span class="kt">C완성품</span> <span class="o">=</span> <span class="kt">C완성품</span><span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="n">moduledA</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">c2</span><span class="p">:</span> <span class="kt">C완성품</span> <span class="o">=</span> <span class="kt">C완성품</span><span class="p">(</span><span class="nv">a</span><span class="p">:</span> <span class="n">moduledB</span><span class="p">)</span>
        
        <span class="n">c1</span><span class="o">.</span><span class="nf">printName</span><span class="p">()</span>
        <span class="n">c2</span><span class="o">.</span><span class="nf">printName</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>주입 코드를 의존성 주입으로 개선하기 위해 protocol을 선언하고 클래스의 저장속성 타입들이 해당 protocol을 채택하면 된다.   <br />
이를 통해 C완성품은 저장속성으로 A부품도 주입할 수 있고 B부품도 주입할 수 있다.</p>

<p>정리하자면 각 부품이 서로 다른 타입이지만 모듈화가 가능해지고 확장적인 코드를 작성할 수 있게 된다.   <br />
protocol 자체를 타입으로 사용할 수 있어서 모듈화를 시킬 수 있는 장점이 존재하고, protocol을 채택한 여러 타입들이 속성에 할당될 수 있는 것이다.</p>

<h2 id="정리">정리</h2>
<p>의존성</p>
<ul>
  <li>서로 다른 객체 사이에 의존 관계가 있다는 것</li>
  <li>(한 객체가 다른 객체에 직접 접근하거나 사용하는 관계)</li>
</ul>

<p>주입</p>
<ul>
  <li>외부에서 객체(또는 데이터)를 생성해서 생성자를 통해 넣는 것</li>
  <li>(클래스 내부에서 직접 생성하지 않고, 외부에서 주입)</li>
</ul>

<p>의존성 주입(개선된 의존성)</p>
<ul>
  <li>프로토콜을 사용해서 의존성을 분리시키고 의존관계를 역전 시킨다
    <ul>
      <li>객체 간의 결합도를 낮추고, 의존 관계를 외부로 분리하여 더 유연한 구조를 만드는 설계 방식</li>
      <li><strong>의존 관계 역전 원칙(DIP)</strong>과 <strong>단일 책임 원칙(SRP)</strong>을 따르도록 도와준다</li>
      <li>주입 시 <strong>프로토콜(인터페이스)</strong>을 사용하면 모듈화와 확장성이 높아진다</li>
      <li>이를 통해 구체적인 클래스가 아닌 추상화(프로토콜)에 의존하게 되고, 이것이 바로 의존 관계의 역전</li>
    </ul>
  </li>
</ul>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://eunjin3786.tistory.com/233</li>
  <li>https://medium.com/@jang.wangsu/di-dependency-injection-이란-1b12fdefec4f</li>
  <li>https://medium.com/@jang.wangsu/di-inversion-of-control-container-란-12ecd70ac7ea</li>
  <li>https://tecoble.techcourse.co.kr/post/2021-04-27-dependency-injection/</li>
  <li>https://dokit.tistory.com/54</li>
  <li>https://80000coding.oopy.io/68ee8d89-5d05-449d-87e2-5fba84d604ca</li>
  <li>https://www.inflearn.com/courses/lecture?courseId=328390&amp;type=LECTURE&amp;unitId=163822&amp;subtitleLanguage=ko&amp;tab=curriculum</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Pindora" /><summary type="html"><![CDATA[Dependency Injection란 무엇인가? DI는 Dependency Injection의 줄임말로, 다양한 우리말 번역이 있지만, 이 글에서는 의존성 주입이라는 말로 사용하고자 한다. 먼저 의존성, 주입, 의존성 주입 순서대로 알아보자. Dependency(의존성) 객체 지향 프로그래밍에서 Dependency, 의존성은 서로 다른 객체 사이에 의존 관계가 있다는 것을 말한다. 즉 의존하는 객체가 수정되면 다른 객체도 영향을 받는다는 것이다. import Foundation class A부품 { var name: String = "A부품" } class B부품 { var name: String = "B부품" } /// ex: ViewController() class C완성품 { /// ex: NetworkManager() // C완성품이 A부품에 의존한다 = 의존성이 생긴다 // A부품의 코드가 바뀌면 C완성품의 코드를 바꿔줘야하는 문제가 생긴다 // 부품을 바꾸고 싶을 때는 코드를 B부품으로 버꿔야 하는 문제가 생긴다 var a: A부품 = A부품() func printName() { print(a.name) } } 하나의 객체가 다른 객체에 의존하고 있는 코드를 의존하고 있다고 말한다. 이렇게 의존성이 생기는 코드를 확장성있게 바꾸기 위해 의존성 주입을 통해 코드를 개선할 수 있다. 주입(Injection) 생성자를 통해 저장속성을 외부에서 주입하는 개념이다. 의존성 코드에서는 저장속성에 기본값을 인스턴스로 생성&amp;할당하여 생성자를 만들어 주지 않아도 괜찮았다. // 주입(Injection) class Person { var name: String init(name: String) { self.name = name } } // 외부에서 값을 주입(할당/초기화)해서 인스턴스 생성 let people = Person(name: "Index") 실제로는 기본값보다는 생성자를 통해서 외부에서 들어온 값을 통해 저장속성에 할당할 수 있게 해주는 개념인 주입의 개념을 실제로 많이 사용한다. 정리하자면 인스턴스를 생성할 때 저장속성을 외부에서 할당(=주입=초기화)해줄 수 있다고 한다. 의존성 주입 import Foundation class A부품 { var name: String = "A부품" } class B부품 { var name: String = "B부품" } class C완성품 { var a: A부품 init(a: A부품) { self.a = a } func printName() { print(a.name) } } // 1. 인스턴스를 미리 만들고 let a: A부품 = A부품() a.name = "비싼 A부품" // 2. C완성품을 만들 때 주입(Injection)을 해줄 수 있다 // 하지만 이 코드를 의존성 주입(Dependency Injection)이라고 부르지는 않는다 let c: C완성품 = C완성품(a: a) C완성품을 만들 때 미리 만들어 둔 A부품을 주입할 수 있지만 이 코드를 의존성 주입이라고 부르지는 않는다. 의존적이지 않게 만들어주는 코드를 추가해야 의존성 주입이라는 개념이 된다. 주입을 의존성 주입으로 개선 // protocol은 자격증이라고 생각하자 // 각 부품에서 이 자격증을 채택한다 // 자격증을 정의할 때 name이라는 속성을 가지면서 읽기, 쓰기가 가능한 name이라는 속성을 가진다고 정의하고 이를 각 모듈에서 채택한다 // 이 protocol 덕분에 모듈화가 가능해지고 확장적인 코드를 작성할 수 있게 된다 protocol 모듈화된부품 { var name: String { get set } } class A부품: 모듈화된부품 { var name: String = "A부품" } class B부품: 모듈화된부품 { var name: String = "B부품" } class C완성품 { // 프로토콜로 타입을 선언하여 이 프로토콜(자격증)을 채택한 모든 타입들을 할당해줄 수 있다 var a: 모듈화된부품 init(a: 모듈화된부품) { self.a = a } func printName() { print(a.name) } } @main struct Main { static func main() { let moduledA = A부품() let moduledB = B부품() // 모듈화된 A를 주입할 수도 있고 모듈화된 B를 주입할 수도 있다 let c1: C완성품 = C완성품(a: moduledA) let c2: C완성품 = C완성품(a: moduledB) c1.printName() c2.printName() } } 주입 코드를 의존성 주입으로 개선하기 위해 protocol을 선언하고 클래스의 저장속성 타입들이 해당 protocol을 채택하면 된다. 이를 통해 C완성품은 저장속성으로 A부품도 주입할 수 있고 B부품도 주입할 수 있다. 정리하자면 각 부품이 서로 다른 타입이지만 모듈화가 가능해지고 확장적인 코드를 작성할 수 있게 된다. protocol 자체를 타입으로 사용할 수 있어서 모듈화를 시킬 수 있는 장점이 존재하고, protocol을 채택한 여러 타입들이 속성에 할당될 수 있는 것이다. 정리 의존성 서로 다른 객체 사이에 의존 관계가 있다는 것 (한 객체가 다른 객체에 직접 접근하거나 사용하는 관계) 주입 외부에서 객체(또는 데이터)를 생성해서 생성자를 통해 넣는 것 (클래스 내부에서 직접 생성하지 않고, 외부에서 주입) 의존성 주입(개선된 의존성) 프로토콜을 사용해서 의존성을 분리시키고 의존관계를 역전 시킨다 객체 간의 결합도를 낮추고, 의존 관계를 외부로 분리하여 더 유연한 구조를 만드는 설계 방식 의존 관계 역전 원칙(DIP)과 단일 책임 원칙(SRP)을 따르도록 도와준다 주입 시 프로토콜(인터페이스)을 사용하면 모듈화와 확장성이 높아진다 이를 통해 구체적인 클래스가 아닌 추상화(프로토콜)에 의존하게 되고, 이것이 바로 의존 관계의 역전 Reference https://eunjin3786.tistory.com/233 https://medium.com/@jang.wangsu/di-dependency-injection-이란-1b12fdefec4f https://medium.com/@jang.wangsu/di-inversion-of-control-container-란-12ecd70ac7ea https://tecoble.techcourse.co.kr/post/2021-04-27-dependency-injection/ https://dokit.tistory.com/54 https://80000coding.oopy.io/68ee8d89-5d05-449d-87e2-5fba84d604ca https://www.inflearn.com/courses/lecture?courseId=328390&amp;type=LECTURE&amp;unitId=163822&amp;subtitleLanguage=ko&amp;tab=curriculum]]></summary></entry><entry><title type="html">[Combine] 예제 1</title><link href="http://localhost:4000/Combine-example-1/" rel="alternate" type="text/html" title="[Combine] 예제 1" /><published>2025-07-13T00:00:00+00:00</published><updated>2025-07-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BCombine%5D-example%201</id><content type="html" xml:base="http://localhost:4000/Combine-example-1/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="combine-예제">Combine 예제</h2>

<p><img src="/assets/img/2025-06-18-%5BCombine%5D-/image-20250714015117890.png" alt="이미지" width="70%" /></p>
<h4 id="1-scrollview-추가-및-상하좌우-제약-0-설정">1. scrollView 추가 및 상하좌우 제약 0 설정</h4>
<p><br /><br /></p>

<p><img src="/assets/img/2025-07-13-%5BCombine%5D-example%201/image-20250714020253349.png" alt="이미지" width="70%" /></p>
<h4 id="2-uiview-추가-및-추가한-uiview를-content-layout-guide에-드래그하여-상하좌우-제약-0-설정">2. UIView 추가 및 추가한 UIView를 Content Layout Guide에 드래그하여 상하좌우 제약 0 설정</h4>
<ul>
  <li>UIView를 Frame Layout Guide로 드래그해서 Equal Width 해주자</li>
  <li>size inspactor에서 width(가로막대) 더블 클릭 -&gt; Proportional Widt~ 클릭 -&gt; Multiplier를 1로 설정</li>
  <li>이상태에서 빨간 오류 뜨는 이유는 View에 대한 내용물이 없어서 즉 크기가 없어서 그렇다<br />
<br /><br /></li>
</ul>

<p><img src="/assets/img/2025-07-13-%5BCombine%5D-example%201/image-20250714020847129.png" alt="이미지" width="70%" /></p>

<h4 id="3-view에-vertical-stack-view-생성">3. View에 Vertical Stack View 생성</h4>
<ul>
  <li>Stack View를 View로 드래그하여 상하좌우 제약 0으로 설정</li>
  <li>vertical stack에서 가로 크기를 꽉 채우기 위해 alighment는 fill 설정</li>
  <li>vertical stack에서 내용물을 동일하게 분배시키기 위해 fill equally 설정</li>
  <li>spacing 20 설정</li>
  <li>이제 크기가 있는 애를 스택뷰에 넣으면 오토레이아웃이 잡힌다</li>
  <li>추가적으로 size inspactor에서 simulated size를 Fixed -&gt; Freeform으로 변경한다, 높이를 1000으로 설정한다.<br />
<br /><br /></li>
</ul>

<h4 id="4-결과">4. 결과</h4>
<p><img src="/assets/img/2025-07-13-%5BCombine%5D-example%201/image-20250714021514646.png" alt="이미지" width="70%" /></p>]]></content><author><name>Dong Hyeon</name></author><category term="Combine" /><summary type="html"><![CDATA[Combine 예제 1. scrollView 추가 및 상하좌우 제약 0 설정 2. UIView 추가 및 추가한 UIView를 Content Layout Guide에 드래그하여 상하좌우 제약 0 설정 UIView를 Frame Layout Guide로 드래그해서 Equal Width 해주자 size inspactor에서 width(가로막대) 더블 클릭 -&gt; Proportional Widt~ 클릭 -&gt; Multiplier를 1로 설정 이상태에서 빨간 오류 뜨는 이유는 View에 대한 내용물이 없어서 즉 크기가 없어서 그렇다 3. View에 Vertical Stack View 생성 Stack View를 View로 드래그하여 상하좌우 제약 0으로 설정 vertical stack에서 가로 크기를 꽉 채우기 위해 alighment는 fill 설정 vertical stack에서 내용물을 동일하게 분배시키기 위해 fill equally 설정 spacing 20 설정 이제 크기가 있는 애를 스택뷰에 넣으면 오토레이아웃이 잡힌다 추가적으로 size inspactor에서 simulated size를 Fixed -&gt; Freeform으로 변경한다, 높이를 1000으로 설정한다. 4. 결과]]></summary></entry><entry><title type="html">[Haruhancut] 1. 하루한컷 리팩토링 - 폰트, 색상 세팅</title><link href="http://localhost:4000/Haruhancut-refactor-font/" rel="alternate" type="text/html" title="[Haruhancut] 1. 하루한컷 리팩토링 - 폰트, 색상 세팅" /><published>2025-06-17T00:00:00+00:00</published><updated>2025-06-17T00:00:00+00:00</updated><id>http://localhost:4000/%5BHaruhancut%5D-refactor-font</id><content type="html" xml:base="http://localhost:4000/Haruhancut-refactor-font/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="font-세팅">Font 세팅</h2>

<p><img src="/assets/img/2025-06-17-%5BHaruhancut%5D-refactor-font/image-20250617133256915.png" alt="이미지" width="30%" /></p>
<ul>
  <li>Fonts 폴더에 다운받은 폰트를 저장한다.<br />
<br /><br /></li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">UIAppFonts</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">NanumMyeongjo</span><span class="o">-</span><span class="kt">Regular</span><span class="o">.</span><span class="n">ttf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">RacingSansOne</span><span class="o">-</span><span class="kt">Regular</span><span class="o">.</span><span class="n">ttf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">Black</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">Bold</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">ExtraBold</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">ExtraLight</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">Light</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">Medium</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">Regular</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">SemiBold</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="kt">Pretendard</span><span class="o">-</span><span class="kt">Thin</span><span class="o">.</span><span class="n">otf</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</code></pre></div></div>
<ul>
  <li>Info파일에 아래 내용 추가한다.<br />
<br /><br /></li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">extension</span> <span class="kt">UIFont</span> <span class="p">{</span>
    <span class="kd">enum</span> <span class="kt">HCFont</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">black</span> <span class="o">=</span> <span class="s">"Pretendard-Black"</span>
        <span class="k">case</span> <span class="n">bold</span> <span class="o">=</span> <span class="s">"Pretendard-Bold"</span>
        <span class="k">case</span> <span class="n">extraBold</span> <span class="o">=</span> <span class="s">"Pretendard-ExtraBold"</span>
        <span class="k">case</span> <span class="n">extraLight</span> <span class="o">=</span> <span class="s">"Pretendard-ExtraLight"</span>
        <span class="k">case</span> <span class="n">light</span> <span class="o">=</span> <span class="s">"Pretendard-Light"</span>
        <span class="k">case</span> <span class="n">medium</span> <span class="o">=</span> <span class="s">"Pretendard-Medium"</span>
        <span class="k">case</span> <span class="n">regular</span> <span class="o">=</span> <span class="s">"Pretendard-Regular"</span>
        <span class="k">case</span> <span class="n">semiBold</span> <span class="o">=</span> <span class="s">"Pretendard-SemiBold"</span>
        <span class="k">case</span> <span class="n">thin</span> <span class="o">=</span> <span class="s">"Pretendard-Thin"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 커스텀 폰트</span>
<span class="kd">extension</span> <span class="kt">UIFont</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="kt">HCFont</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UIFont</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UIFont</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="n">font</span><span class="o">.</span><span class="n">rawValue</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span> <span class="p">??</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="n">size</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 하루한컷 프리셋 폰트</span>
<span class="kd">extension</span> <span class="kt">UIFont</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">titleFont</span><span class="p">:</span> <span class="kt">UIFont</span> <span class="p">{</span>
        <span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">24</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="k">var</span> <span class="nv">bodyFont</span><span class="p">:</span> <span class="kt">UIFont</span> <span class="p">{</span>
        <span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="k">var</span> <span class="nv">captionFont</span><span class="p">:</span> <span class="kt">UIFont</span> <span class="p">{</span>
        <span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="o">.</span><span class="n">medium</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">12</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// ----------------------------------------------------------------- //</span>
<span class="c1">// SwiftUI 대응</span>

<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">extension</span> <span class="kt">Font</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">hcTitle</span><span class="p">:</span> <span class="kt">Font</span> <span class="p">{</span>
        <span class="kt">Font</span><span class="o">.</span><span class="nf">custom</span><span class="p">(</span><span class="s">"Pretendard-Bold"</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">24</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="k">var</span> <span class="nv">hcBody</span><span class="p">:</span> <span class="kt">Font</span> <span class="p">{</span>
        <span class="kt">Font</span><span class="o">.</span><span class="nf">custom</span><span class="p">(</span><span class="s">"Pretendard-Regular"</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">static</span> <span class="k">var</span> <span class="nv">hcCaption</span><span class="p">:</span> <span class="kt">Font</span> <span class="p">{</span>
        <span class="kt">Font</span><span class="o">.</span><span class="nf">custom</span><span class="p">(</span><span class="s">"Pretendard-Medium"</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">12</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="kd">final</span> <span class="kd">class</span> <span class="kt">FontView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="o">.</span><span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">24</span><span class="p">)</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">label</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"title size 24"</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="o">.</span><span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">secondaryLabel</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"body size 16"</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">captionLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="o">.</span><span class="nf">hcFont</span><span class="p">(</span><span class="nv">font</span><span class="p">:</span> <span class="o">.</span><span class="n">medium</span><span class="p">,</span> <span class="nv">size</span><span class="p">:</span> <span class="mi">12</span><span class="p">)</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">label</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"caption size 12"</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">hStackView</span><span class="p">:</span> <span class="kt">UIStackView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">stackView</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">titleLabel</span><span class="p">,</span> <span class="n">bodyLabel</span><span class="p">,</span> <span class="n">captionLabel</span><span class="p">])</span>
        <span class="n">stackView</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="n">vertical</span>
        <span class="n">stackView</span><span class="o">.</span><span class="n">spacing</span> <span class="o">=</span> <span class="mi">16</span>
        <span class="k">return</span> <span class="n">stackView</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - Initializer</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">setupUI</span><span class="p">()</span>
        <span class="nf">setupConstraints</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="c1">// MARK: - UI Setup</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemBackground</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">hStackView</span><span class="p">)</span>
        <span class="n">hStackView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="p">}</span>

    <span class="c1">// MARK: - Constraints</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupConstraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">hStackView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">hStackView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">hStackView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">hStackView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">FontView</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>FontSystem 코드 작성한다<br />
<br /><br /></li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// MARK: - Hex -&gt; UIColor</span>
<span class="kd">extension</span> <span class="kt">UIColor</span> <span class="p">{</span>
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">alpha</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">hexFormatted</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">hex</span><span class="o">.</span><span class="nf">trimmingCharacters</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="kt">CharacterSet</span><span class="o">.</span><span class="n">whitespacesAndNewlines</span><span class="p">)</span><span class="o">.</span><span class="nf">uppercased</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">hexFormatted</span><span class="o">.</span><span class="nf">hasPrefix</span><span class="p">(</span><span class="s">"#"</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">hexFormatted</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="n">hexFormatted</span><span class="o">.</span><span class="nf">dropFirst</span><span class="p">())</span>
        <span class="p">}</span>
        <span class="k">var</span> <span class="nv">rgbValue</span><span class="p">:</span> <span class="kt">UInt64</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="kt">Scanner</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">hexFormatted</span><span class="p">)</span><span class="o">.</span><span class="nf">scanHexInt64</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rgbValue</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span>
            <span class="nv">red</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">((</span><span class="n">rgbValue</span> <span class="o">&amp;</span> <span class="mh">0xFF0000</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span>
            <span class="nv">green</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">((</span><span class="n">rgbValue</span> <span class="o">&amp;</span> <span class="mh">0x00FF00</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span>
            <span class="nv">blue</span><span class="p">:</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">rgbValue</span> <span class="o">&amp;</span> <span class="mh">0x0000FF</span><span class="p">)</span> <span class="o">/</span> <span class="mf">255.0</span><span class="p">,</span>
            <span class="nv">alpha</span><span class="p">:</span> <span class="n">alpha</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UIColor</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - Login</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">kakao</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#FEE500"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">apple</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#FFFFFF"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">kakaoTapped</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#CCC200"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">appleTapped</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#E5E5E5"</span><span class="p">)</span>
    
    <span class="c1">// MARK: - Main</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">background</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#1A1A1A"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">mainBlack</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#161717"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">mainWhite</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#f1f1f1"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">buttonTapped</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#131315"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">hcColor</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"AAD1E7"</span><span class="p">)</span>
    
    <span class="c1">// MARK: - Gray</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray000</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#EFEFEF"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray100</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#B0AEB3"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray200</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#8B888F"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray300</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#67646C"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray500</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#454348"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray700</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#252427"</span><span class="p">)</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">Gray900</span> <span class="o">=</span> <span class="kt">UIColor</span><span class="p">(</span><span class="nv">hex</span><span class="p">:</span> <span class="s">"#111113"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Haruhancut" /><summary type="html"><![CDATA[Font 세팅 Fonts 폴더에 다운받은 폰트를 저장한다. &lt;key&gt;UIAppFonts&lt;/key&gt; &lt;array&gt; &lt;string&gt;NanumMyeongjo-Regular.ttf&lt;/string&gt; &lt;string&gt;RacingSansOne-Regular.ttf&lt;/string&gt; &lt;string&gt;Pretendard-Black.otf&lt;/string&gt; &lt;string&gt;Pretendard-Bold.otf&lt;/string&gt; &lt;string&gt;Pretendard-ExtraBold.otf&lt;/string&gt; &lt;string&gt;Pretendard-ExtraLight.otf&lt;/string&gt; &lt;string&gt;Pretendard-Light.otf&lt;/string&gt; &lt;string&gt;Pretendard-Medium.otf&lt;/string&gt; &lt;string&gt;Pretendard-Regular.otf&lt;/string&gt; &lt;string&gt;Pretendard-SemiBold.otf&lt;/string&gt; &lt;string&gt;Pretendard-Thin.otf&lt;/string&gt; &lt;/array&gt; Info파일에 아래 내용 추가한다. import UIKit extension UIFont { enum HCFont: String { case black = "Pretendard-Black" case bold = "Pretendard-Bold" case extraBold = "Pretendard-ExtraBold" case extraLight = "Pretendard-ExtraLight" case light = "Pretendard-Light" case medium = "Pretendard-Medium" case regular = "Pretendard-Regular" case semiBold = "Pretendard-SemiBold" case thin = "Pretendard-Thin" } } // 커스텀 폰트 extension UIFont { static func hcFont(font: HCFont, size: CGFloat) -&gt; UIFont { return UIFont(name: font.rawValue, size: size) ?? UIFont.systemFont(ofSize: size) } } // 하루한컷 프리셋 폰트 extension UIFont { static var titleFont: UIFont { hcFont(font: .bold, size: 24) } static var bodyFont: UIFont { hcFont(font: .regular, size: 16) } static var captionFont: UIFont { hcFont(font: .medium, size: 12) } } // ----------------------------------------------------------------- // // SwiftUI 대응 import SwiftUI extension Font { static var hcTitle: Font { Font.custom("Pretendard-Bold", size: 24) } static var hcBody: Font { Font.custom("Pretendard-Regular", size: 16) } static var hcCaption: Font { Font.custom("Pretendard-Medium", size: 12) } } final class FontView: UIView { // MARK: - UI Component private lazy var titleLabel: UILabel = { let label = UILabel() label.font = .hcFont(font: .bold, size: 24) label.textColor = .label label.textAlignment = .center label.numberOfLines = 0 label.text = "title size 24" return label }() private lazy var bodyLabel: UILabel = { let label = UILabel() label.font = .hcFont(font: .regular, size: 16) label.textColor = .secondaryLabel label.textAlignment = .center label.numberOfLines = 0 label.text = "body size 16" return label }() private lazy var captionLabel: UILabel = { let label = UILabel() label.font = .hcFont(font: .medium, size: 12) label.textColor = .label label.textAlignment = .center label.numberOfLines = 0 label.text = "caption size 12" return label }() private lazy var hStackView: UIStackView = { let stackView = UIStackView(arrangedSubviews: [titleLabel, bodyLabel, captionLabel]) stackView.axis = .vertical stackView.spacing = 16 return stackView }() // MARK: - Initializer override init(frame: CGRect) { super.init(frame: frame) setupUI() setupConstraints() } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Setup private func setupUI() { backgroundColor = .systemBackground addSubview(hStackView) hStackView.translatesAutoresizingMaskIntoConstraints = false } // MARK: - Constraints private func setupConstraints() { NSLayoutConstraint.activate([ hStackView.topAnchor.constraint(equalTo: safeAreaLayoutGuide.topAnchor), hStackView.leadingAnchor.constraint(equalTo: leadingAnchor), hStackView.trailingAnchor.constraint(equalTo: trailingAnchor), hStackView.bottomAnchor.constraint(equalTo: safeAreaLayoutGuide.bottomAnchor) ]) } } #Preview { FontView() } FontSystem 코드 작성한다 import UIKit // MARK: - Hex -&gt; UIColor extension UIColor { convenience init(hex: String, alpha: CGFloat = 1.0) { var hexFormatted: String = hex.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines).uppercased() if hexFormatted.hasPrefix("#") { hexFormatted = String(hexFormatted.dropFirst()) } var rgbValue: UInt64 = 0 Scanner(string: hexFormatted).scanHexInt64(&amp;rgbValue) self.init( red: CGFloat((rgbValue &amp; 0xFF0000) &gt;&gt; 16) / 255.0, green: CGFloat((rgbValue &amp; 0x00FF00) &gt;&gt; 8) / 255.0, blue: CGFloat(rgbValue &amp; 0x0000FF) / 255.0, alpha: alpha ) } } extension UIColor { // MARK: - Login static let kakao = UIColor(hex: "#FEE500") static let apple = UIColor(hex: "#FFFFFF") static let kakaoTapped = UIColor(hex: "#CCC200") static let appleTapped = UIColor(hex: "#E5E5E5") // MARK: - Main static let background = UIColor(hex: "#1A1A1A") static let mainBlack = UIColor(hex: "#161717") static let mainWhite = UIColor(hex: "#f1f1f1") static let buttonTapped = UIColor(hex: "#131315") static let hcColor = UIColor.init(hex: "AAD1E7") // MARK: - Gray static let Gray000 = UIColor(hex: "#EFEFEF") static let Gray100 = UIColor(hex: "#B0AEB3") static let Gray200 = UIColor(hex: "#8B888F") static let Gray300 = UIColor(hex: "#67646C") static let Gray500 = UIColor(hex: "#454348") static let Gray700 = UIColor(hex: "#252427") static let Gray900 = UIColor(hex: "#111113") }]]></summary></entry><entry><title type="html">[RxDataSource] 2. CustomDatasource 만들어보기</title><link href="http://localhost:4000/RxDataSource-RxDataSource-2/" rel="alternate" type="text/html" title="[RxDataSource] 2. CustomDatasource 만들어보기" /><published>2025-06-16T00:00:00+00:00</published><updated>2025-06-16T00:00:00+00:00</updated><id>http://localhost:4000/%5BRxDataSource%5D-RxDataSource-2</id><content type="html" xml:base="http://localhost:4000/RxDataSource-RxDataSource-2/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="커스텀-데이터소스-만들어보기">커스텀 데이터소스 만들어보기</h2>

<h3 id="model">Model</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Todo</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">let</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">isDone</span><span class="p">:</span> <span class="kt">Bool</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="cell">Cell</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// MARK: - Cell</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">RxCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 디버깅용</span>
    <span class="k">var</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">Todo</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">isDoneSwitch</span><span class="p">:</span> <span class="kt">UISwitch</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">sw</span> <span class="o">=</span> <span class="kt">UISwitch</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">sw</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">idLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">vStack</span><span class="p">:</span> <span class="kt">UIStackView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">st</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">titleLabel</span><span class="p">,</span> <span class="n">idLabel</span><span class="p">])</span>
        <span class="n">st</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="n">vertical</span>
        <span class="k">return</span> <span class="n">st</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">hStack</span><span class="p">:</span> <span class="kt">UIStackView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">st</span> <span class="o">=</span> <span class="kt">UIStackView</span><span class="p">(</span><span class="nv">arrangedSubviews</span><span class="p">:</span> <span class="p">[</span><span class="n">vStack</span><span class="p">,</span> <span class="n">isDoneSwitch</span><span class="p">])</span>
        <span class="n">st</span><span class="o">.</span><span class="n">axis</span> <span class="o">=</span> <span class="o">.</span><span class="n">horizontal</span>
        <span class="k">return</span> <span class="n">st</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">prepareForReuse</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">prepareForReuse</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"prepareForReuse() - cellData.id: </span><span class="se">\(</span><span class="n">cellData</span><span class="p">?</span><span class="o">.</span><span class="n">id</span> <span class="p">??</span> <span class="mi">0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다.</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">CellStyle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="c1">/// 부모의 로직을 싱행시키는 의미</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="n">reuseIdentifier</span><span class="p">)</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">hStack</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">contentView</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">hStack</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">contentView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">RxCell</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">configure</span><span class="p">(</span><span class="n">with</span> <span class="nv">todo</span><span class="p">:</span> <span class="kt">Todo</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">cellData</span> <span class="o">=</span> <span class="n">todo</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">todo</span><span class="o">.</span><span class="n">title</span>
        <span class="n">idLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"ID: </span><span class="se">\(</span><span class="n">todo</span><span class="o">.</span><span class="n">id</span><span class="se">)</span><span class="s">"</span>
        <span class="n">isDoneSwitch</span><span class="o">.</span><span class="n">isOn</span> <span class="o">=</span> <span class="n">todo</span><span class="o">.</span><span class="n">isDone</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="customdatasource">CustomDataSource</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">var</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">],</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">todoList</span> <span class="o">=</span> <span class="n">todoList</span>
        <span class="k">self</span><span class="o">.</span><span class="n">tableView</span> <span class="o">=</span> <span class="n">tableView</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="n">register</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">cellType</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="k">Type</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tableView</span><span class="p">?</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellType</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">T</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UITableView Datasource Methods</span>
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">todoList</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    
    <span class="c1">// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">RxCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">RxCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">Todo</span> <span class="o">=</span> <span class="n">todoList</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        <span class="n">cell</span><span class="o">.</span><span class="nf">configure</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">cellData</span><span class="p">)</span>
        
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="viewcontroller">ViewController</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomDataSourceVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">todoList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Todo</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="kt">Todo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"RxSwift 공부하기"</span><span class="p">,</span> <span class="nv">isDone</span><span class="p">:</span> <span class="kc">false</span><span class="p">),</span>
        <span class="kt">Todo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"UI 구성하기"</span><span class="p">,</span> <span class="nv">isDone</span><span class="p">:</span> <span class="kc">false</span><span class="p">),</span>
        <span class="kt">Todo</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">title</span><span class="p">:</span> <span class="s">"코드 리뷰"</span><span class="p">,</span> <span class="nv">isDone</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">]</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">customDataSource</span><span class="p">:</span> <span class="kt">CustomDataSource</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">tv</span> <span class="o">=</span> <span class="kt">UITableView</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">tv</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">setCustomDataSource</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setCustomDataSource</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// 1️⃣ dataSource 생성</span>
        <span class="k">let</span> <span class="nv">dataSource</span> <span class="o">=</span> <span class="kt">CustomDataSource</span><span class="p">(</span><span class="nv">todoList</span><span class="p">:</span> <span class="n">todoList</span><span class="p">,</span> <span class="nv">tableView</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        
        <span class="c1">// 2️⃣ register 호출 (이 시점에 tableView는 이미 존재함)</span>
        <span class="n">dataSource</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="nv">cellType</span><span class="p">:</span> <span class="kt">RxCell</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        
        <span class="c1">// 3️⃣ 연결</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customDataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="p">[</span><span class="n">myTableView</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></div></div>
<p>현재 CustomDataSource단점이 Todos에만 연결되어 있고, 어떤 셀을 보여줄것인지에 대한 것이 제한적이다. 매개변수를 활용하여 유연하게 만들어보자. 즉 로직을 밖으로 빼자</p>]]></content><author><name>Dong Hyeon</name></author><category term="ReactiveX" /><category term="RxDataSource" /><summary type="html"><![CDATA[커스텀 데이터소스 만들어보기 Model struct Todo { let id: Int let title: String let isDone: Bool } Cell import UIKit // MARK: - Cell final class RxCell: UITableViewCell { // 디버깅용 var cellData: Todo? = nil private lazy var isDoneSwitch: UISwitch = { let sw = UISwitch() return sw }() private lazy var titleLabel: UILabel = { let label = UILabel() return label }() private lazy var idLabel: UILabel = { let label = UILabel() return label }() private lazy var vStack: UIStackView = { let st = UIStackView(arrangedSubviews: [titleLabel, idLabel]) st.axis = .vertical return st }() private lazy var hStack: UIStackView = { let st = UIStackView(arrangedSubviews: [vStack, isDoneSwitch]) st.axis = .horizontal return st }() override func prepareForReuse() { super.prepareForReuse() print(#fileID, #function, #line, "prepareForReuse() - cellData.id: \(cellData?.id ?? 0)") } // 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다. override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) { /// 부모의 로직을 싱행시키는 의미 super.init(style: style, reuseIdentifier: reuseIdentifier) makeUI() constraints() } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } private func makeUI() { [hStack].forEach { contentView.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ hStack.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 10), hStack.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 10), hStack.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -10), hStack.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -10), ]) } } extension RxCell { func configure(with todo: Todo) { self.cellData = todo titleLabel.text = todo.title idLabel.text = "ID: \(todo.id)" isDoneSwitch.isOn = todo.isDone } } CustomDataSource final class CustomDataSource: NSObject, UITableViewDataSource { var todoList: [Todo] = [] var tableView: UITableView? = nil init(todoList: [Todo], tableView: UITableView) { self.todoList = todoList self.tableView = tableView } func register&lt;T: UITableViewCell&gt;(cellType: T.Type) { tableView?.register(cellType, forCellReuseIdentifier: T.reuseIdentifier) } // MARK: - UITableView Datasource Methods /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return todoList.count } // 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { guard let cell = tableView.dequeueReusableCell(withIdentifier: RxCell.reuseIdentifier, for: indexPath) as? RxCell else { return UITableViewCell() } let cellData: Todo = todoList[indexPath.row] cell.configure(with: cellData) return cell } } ViewController final class CustomDataSourceVC: UIViewController { private let todoList: [Todo] = [ Todo(id: 0, title: "RxSwift 공부하기", isDone: false), Todo(id: 1, title: "UI 구성하기", isDone: false), Todo(id: 2, title: "코드 리뷰", isDone: false) ] private var customDataSource: CustomDataSource? = nil private let myTableView: UITableView = { let tv = UITableView() return tv }() override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() setCustomDataSource() } private func setCustomDataSource() { // 1️⃣ dataSource 생성 let dataSource = CustomDataSource(todoList: todoList, tableView: myTableView) // 2️⃣ register 호출 (이 시점에 tableView는 이미 존재함) dataSource.register(cellType: RxCell.self) // 3️⃣ 연결 self.customDataSource = dataSource myTableView.dataSource = dataSource } private func makeUI() { [myTableView].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ myTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), myTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor), myTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor), myTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor) ]) } } 현재 CustomDataSource단점이 Todos에만 연결되어 있고, 어떤 셀을 보여줄것인지에 대한 것이 제한적이다. 매개변수를 활용하여 유연하게 만들어보자. 즉 로직을 밖으로 빼자]]></summary></entry><entry><title type="html">[RxDataSource] 1. Delegate, DataSource</title><link href="http://localhost:4000/RxDataSource-RxDataSource-1/" rel="alternate" type="text/html" title="[RxDataSource] 1. Delegate, DataSource" /><published>2025-06-15T00:00:00+00:00</published><updated>2025-06-15T00:00:00+00:00</updated><id>http://localhost:4000/%5BRxDataSource%5D-RxDataSource-1</id><content type="html" xml:base="http://localhost:4000/RxDataSource-RxDataSource-1/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="ios-메모리-재활용">iOS 메모리 재활용</h2>

<p>iOS와 같은 휴대용 기기에서 메모리를 많이 사용하는 앱이 있을 경우 시스템이 앱을 종료시킬 수 있다. 이는 메모리 사용량이 배터리 소모와 직결되기 때문이다. 따라서 iOS는 화면에 보일때만 메모리에 올리고 안보일때는 메모리에서 내리자 = 즉 재활용(dequeReusable)하자는 개념이 등장했다.</p>

<p><img src="/assets/img/2025-06-15-%5BRxDataSource%5D-RxDataSource-1/tableMemory-9978088.png" alt="이미지" width="100%" /></p>

<p>재사용 큐(dequeueReusableCell) 개념</p>
<ul>
  <li>UITableView는 메모리 효율을 위해 스크롤이 끝난 셀을 메모리에서 제거하지 않고 재사용한다.</li>
  <li>재사용 가능한 셀들을 큐에 저장되며, 새로운 셀이 필요하면 다시 꺼내서 데이터를 덮어씌운다.</li>
</ul>

<p>화면에 막 등장하려는 셀 (셀6)</p>
<ul>
  <li>아직 완전히 보이지 않더라도, 곧 보여질 예정이라 미리 메모리에 할당됨 (preload 개념)</li>
</ul>

<p>아직 안 보이는 셀 (셀7)</p>
<ul>
  <li>이 셀은 아직 메모리에 올라가지 않음</li>
  <li>스크롤로 화면에 나타나게 되면 그때 cellForRowAt이 호출되어 메모리에 할당됨</li>
  <li>let cell = tableView.dequeueReusableCell(withIdentifier: “MyCell”, for: indexPath) // 셀 재활용 핵심 코드<br />
<br /></li>
</ul>

<table>
  <thead>
    <tr>
      <th>시점</th>
      <th>메서드 / 동작</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>셀 사라질 때</td>
      <td><code class="language-plaintext highlighter-rouge">prepareForReuse()</code></td>
      <td>셀의 상태 초기화</td>
    </tr>
    <tr>
      <td>셀 필요할 때</td>
      <td><code class="language-plaintext highlighter-rouge">dequeueReusableCell</code></td>
      <td>재사용 큐에서 꺼냄 (없으면 새로 생성)</td>
    </tr>
    <tr>
      <td>셀 화면 진입 시</td>
      <td><code class="language-plaintext highlighter-rouge">cellForRowAt</code></td>
      <td>셀에 실제 데이터를 채워 넣음</td>
    </tr>
  </tbody>
</table>

<h2><br /><br /><br /></h2>

<p><img src="/assets/img/2025-06-15-%5BRxDataSource%5D-RxDataSource-1/delegate-9976300.png" alt="이미지" width="100%" /></p>

<h2 id="delegate란">Delegate란?</h2>

<p>delegate는 대리자라는 뜻으로 어떤 객체의 특정 행동을 대신 처리해주는 객체이다. 예를 들어 UITableView는 셀을 선택시 어떤 동작을 할지 알지 못한다. 대신 그 역할을 외부 객체(보통 viewController)에게 위임한다. 이런 위임 구조가 delegate 패턴이다.<br />
즉 delegate는</p>

<ul>
  <li>사용자의 행동(이벤트)에 대한 처리를 맡는다</li>
  <li>ex) 셀 선택시 스크롤이 시작되었을 때 등</li>
</ul>

<h2 id="datasource란">DataSource란?</h2>

<p>dataSource는 delegate와 비슷하게 동작하지만, 데이터 자체에 대한 정보를 제공한다.<br />
예를 들어 UITableView나 UICollectionView는 수많은 데이터를 표시할 수 있는 UI 컴포넌트인데, 다음과 같은 질문을 던진다.</p>

<ul>
  <li>몇 개의 셀을 보여줘야 하지?</li>
  <li>각 셀에는 어떤 내용을 넣어야 하지?<br />
  이러한 질문에 답해주는 것이 바로 DataSource이다.</li>
</ul>

<p>DataSource는 주로 다음 두 가지 메서드를 구현해야 한다.<br />
numberOfRowsInSection – 셀의 개수<br />
cellForRowAt – 각 셀에 들어갈 내용과 셀 객체 반환</p>

<h2 id="예시">예시</h2>
<p>UITableView나 UICollectionView는 셀을 스크롤할 때마다 필요한 셀만 메모리에 올리고, 보이지 않으면 메모리에서 제거한 뒤 재활용한다.<br />
이로 인해 성능을 크게 향상시킬 수 있으며, 이 재활용 과정에서 각 셀의 개수와 내용은 dataSource가, 셀 선택 등의 사용자 이벤트는 delegate가 처리한다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="ReactiveX" /><category term="RxDataSource" /><summary type="html"><![CDATA[iOS 메모리 재활용 iOS와 같은 휴대용 기기에서 메모리를 많이 사용하는 앱이 있을 경우 시스템이 앱을 종료시킬 수 있다. 이는 메모리 사용량이 배터리 소모와 직결되기 때문이다. 따라서 iOS는 화면에 보일때만 메모리에 올리고 안보일때는 메모리에서 내리자 = 즉 재활용(dequeReusable)하자는 개념이 등장했다. 재사용 큐(dequeueReusableCell) 개념 UITableView는 메모리 효율을 위해 스크롤이 끝난 셀을 메모리에서 제거하지 않고 재사용한다. 재사용 가능한 셀들을 큐에 저장되며, 새로운 셀이 필요하면 다시 꺼내서 데이터를 덮어씌운다. 화면에 막 등장하려는 셀 (셀6) 아직 완전히 보이지 않더라도, 곧 보여질 예정이라 미리 메모리에 할당됨 (preload 개념) 아직 안 보이는 셀 (셀7) 이 셀은 아직 메모리에 올라가지 않음 스크롤로 화면에 나타나게 되면 그때 cellForRowAt이 호출되어 메모리에 할당됨 let cell = tableView.dequeueReusableCell(withIdentifier: “MyCell”, for: indexPath) // 셀 재활용 핵심 코드 시점 메서드 / 동작 설명 셀 사라질 때 prepareForReuse() 셀의 상태 초기화 셀 필요할 때 dequeueReusableCell 재사용 큐에서 꺼냄 (없으면 새로 생성) 셀 화면 진입 시 cellForRowAt 셀에 실제 데이터를 채워 넣음 Delegate란? delegate는 대리자라는 뜻으로 어떤 객체의 특정 행동을 대신 처리해주는 객체이다. 예를 들어 UITableView는 셀을 선택시 어떤 동작을 할지 알지 못한다. 대신 그 역할을 외부 객체(보통 viewController)에게 위임한다. 이런 위임 구조가 delegate 패턴이다. 즉 delegate는 사용자의 행동(이벤트)에 대한 처리를 맡는다 ex) 셀 선택시 스크롤이 시작되었을 때 등 DataSource란? dataSource는 delegate와 비슷하게 동작하지만, 데이터 자체에 대한 정보를 제공한다. 예를 들어 UITableView나 UICollectionView는 수많은 데이터를 표시할 수 있는 UI 컴포넌트인데, 다음과 같은 질문을 던진다. 몇 개의 셀을 보여줘야 하지? 각 셀에는 어떤 내용을 넣어야 하지? 이러한 질문에 답해주는 것이 바로 DataSource이다. DataSource는 주로 다음 두 가지 메서드를 구현해야 한다. numberOfRowsInSection – 셀의 개수 cellForRowAt – 각 셀에 들어갈 내용과 셀 객체 반환 예시 UITableView나 UICollectionView는 셀을 스크롤할 때마다 필요한 셀만 메모리에 올리고, 보이지 않으면 메모리에서 제거한 뒤 재활용한다. 이로 인해 성능을 크게 향상시킬 수 있으며, 이 재활용 과정에서 각 셀의 개수와 내용은 dataSource가, 셀 선택 등의 사용자 이벤트는 delegate가 처리한다.]]></summary></entry><entry><title type="html">[TableView] 14. DiffableDataSource</title><link href="http://localhost:4000/UIKit-tableView14/" rel="alternate" type="text/html" title="[TableView] 14. DiffableDataSource" /><published>2025-06-14T00:00:00+00:00</published><updated>2025-06-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView14</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView14/"><![CDATA[<!-- https://www.youtube.com/watch?v=sBybUm8yVbI&list=PLgOlaPUIbynpuq9GKCwAedgWkkPm2Wo8v&index=18 -->

<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="diffabledatasource">DiffableDataSource</h2>

<p>Diffable</p>
<ul>
  <li>다른 이라는 뜻이다.</li>
  <li>아이템들간의 서로 다름을 알게 되는 것이다.</li>
  <li>애니메이션 처리가 자연스럽게 되는 데이터소스이다.</li>
</ul>

<p>datasource</p>
<ul>
  <li>cellProvider - 셀 만들기 가능하다.</li>
</ul>

<p>snapshot(사진 찍어둠)</p>
<ul>
  <li>테이블뷰 로드방식이 기존 테이블뷰와 다르다.</li>
  <li>dataSource.apply(스냅샷) -&gt; 이런 데이터를 보여줄거라고 스냅샷이라는 사진을 찍어두고 찍어둔 사진을 반영한다.</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[DiffableDataSource Diffable 다른 이라는 뜻이다. 아이템들간의 서로 다름을 알게 되는 것이다. 애니메이션 처리가 자연스럽게 되는 데이터소스이다. datasource cellProvider - 셀 만들기 가능하다. snapshot(사진 찍어둠) 테이블뷰 로드방식이 기존 테이블뷰와 다르다. dataSource.apply(스냅샷) -&gt; 이런 데이터를 보여줄거라고 스냅샷이라는 사진을 찍어두고 찍어둔 사진을 반영한다.]]></summary></entry><entry><title type="html">[Haruhancut] Widget</title><link href="http://localhost:4000/Haruhancut-Widget/" rel="alternate" type="text/html" title="[Haruhancut] Widget" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BHaruhancut%5D-Widget</id><content type="html" xml:base="http://localhost:4000/Haruhancut-Widget/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="widget-도입">Widget 도입</h2>
<p>하루한컷 앱에 위젯을 추가하여 앱의 사진을 위젯으로 보여주려고 한다.</p>

<h2 id="기존-번들-식별자에-app-groups-체크-및-저장">기존 번들 식별자에 App Groups 체크 및 저장</h2>
<p>Identifiers에서 com.indextrown.Haruhancut를 찾아서 App Groups 체크박스를 추가 및 저장한다.</p>

<h3 id="1-위젯용-번들-식별자-준비">1. 위젯용 번들 식별자 준비</h3>
<p><img src="/assets/img/2025-05-30-%5BHaruhancut%5D-Widget/image-20250610145644562.png" alt="이미지" width="30%" /><br />
com.indextrown.Haruhancut.WidgetExtension로 번들 식별자를 만들고 App Groups만 체크해준다.<br />
이제 프로비저닝 프로파일을 만들건데 편의를 위해 fastlane을 사용하겠다.</p>

<h3 id="2-프로비저닝-프로파일-만들기">2. 프로비저닝 프로파일 만들기</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 기존 프로젝트가 이거면  </span>
<span class="c"># match Development com.indextrown.Haruhancut</span>

<span class="c"># 위젯은 아래와 같이 프로비저닝 프로파일을 만들어준다.   </span>
<span class="c"># match Development com.indextrown.Haruhancut.WidgetExtension</span>

<span class="c"># 개발용</span>
fastlane match development <span class="nt">--app_identifier</span> <span class="s2">"com.indextrown.Haruhancut.WidgetExtension"</span>

<span class="c"># 배포용</span>
fastlane match appstore <span class="nt">--app_identifier</span> <span class="s2">"com.indextrown.Haruhancut.WidgetExtension"</span>

<span class="c"># ⚠️Provisioning profile "" doesn't include signing ...발생시</span>
fastlane match development <span class="nt">--force</span>
fastlane match appstore <span class="nt">--force</span>  
</code></pre></div></div>

<h3 id="3-widget-extension-생성">3. Widget Extension 생성</h3>

<ul>
  <li>Targets목록 아래 + 버튼 눌러서 WIdget Extension 생성한다.</li>
</ul>

<h3 id="4-app-groups-설정">4. App Groups 설정</h3>
<p>기존 프로젝트와 WIdgetExtension 프로젝트에 각각 App Groups 추가한다.</p>

<h2 id="widgetkit">WidgetKit</h2>
<ul>
  <li>iOS 14부터 도입되었으며 SwiftUI로만 구현 가능하다.</li>
  <li>UIViewRepresentable 불가능하다.</li>
</ul>

<h3 id="widget-configuration속성-편집에-대한-기능">Widget COnfiguration(속성 편집에 대한 기능)</h3>
<ul>
  <li>Static configuration
    <ul>
      <li>위젯 편집 항목이 나타나지 않으며, 사용자가 설정을 변경할 수 있는 옵션이 없다.</li>
    </ul>
  </li>
  <li>Intent Configuration
    <ul>
      <li>위젯 편집 기능을 통해 여러 Intent 값을 수정할 수 있도록 위젯을 구성할 수 있다.</li>
      <li>iOS 17부터 AppIntentCOnfiguration으로 변경</li>
    </ul>
  </li>
  <li>Activity Configuration
    <ul>
      <li>Live Activity</li>
    </ul>
  </li>
</ul>

<h3 id="widget은-크게-4가지의-struct로-구성">Widget은 크게 4가지의 struct로 구성</h3>

<p><img src="/assets/img/2025-05-30-%5BHaruhancut%5D-Widget/image-20250610173933798.png" alt="이미지" width="30%" /></p>

<ul>
  <li>Provider에서 사용자가 설정한 시간에 맞춰 위젯을 업데이트할 수 있게 한다</li>
  <li>Entry에서 위젯에 필요한 데이터를 제공한다</li>
  <li>EntryView는 Entry를 통해 구성하며, UI를 담당하는 역할과 유사하다</li>
  <li>Widget에서는 static, intent, activity인지에 따라 최종적인 위젯을 구성한다</li>
</ul>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://velog.io/@s_sub/새싹-iOS-20주차</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Haruhancut" /><summary type="html"><![CDATA[Widget 도입 하루한컷 앱에 위젯을 추가하여 앱의 사진을 위젯으로 보여주려고 한다. 기존 번들 식별자에 App Groups 체크 및 저장 Identifiers에서 com.indextrown.Haruhancut를 찾아서 App Groups 체크박스를 추가 및 저장한다. 1. 위젯용 번들 식별자 준비 com.indextrown.Haruhancut.WidgetExtension로 번들 식별자를 만들고 App Groups만 체크해준다. 이제 프로비저닝 프로파일을 만들건데 편의를 위해 fastlane을 사용하겠다. 2. 프로비저닝 프로파일 만들기 # 기존 프로젝트가 이거면 # match Development com.indextrown.Haruhancut # 위젯은 아래와 같이 프로비저닝 프로파일을 만들어준다. # match Development com.indextrown.Haruhancut.WidgetExtension # 개발용 fastlane match development --app_identifier "com.indextrown.Haruhancut.WidgetExtension" # 배포용 fastlane match appstore --app_identifier "com.indextrown.Haruhancut.WidgetExtension" # ⚠️Provisioning profile "" doesn't include signing ...발생시 fastlane match development --force fastlane match appstore --force 3. Widget Extension 생성 Targets목록 아래 + 버튼 눌러서 WIdget Extension 생성한다. 4. App Groups 설정 기존 프로젝트와 WIdgetExtension 프로젝트에 각각 App Groups 추가한다. WidgetKit iOS 14부터 도입되었으며 SwiftUI로만 구현 가능하다. UIViewRepresentable 불가능하다. Widget COnfiguration(속성 편집에 대한 기능) Static configuration 위젯 편집 항목이 나타나지 않으며, 사용자가 설정을 변경할 수 있는 옵션이 없다. Intent Configuration 위젯 편집 기능을 통해 여러 Intent 값을 수정할 수 있도록 위젯을 구성할 수 있다. iOS 17부터 AppIntentCOnfiguration으로 변경 Activity Configuration Live Activity Widget은 크게 4가지의 struct로 구성 Provider에서 사용자가 설정한 시간에 맞춰 위젯을 업데이트할 수 있게 한다 Entry에서 위젯에 필요한 데이터를 제공한다 EntryView는 Entry를 통해 구성하며, UI를 담당하는 역할과 유사하다 Widget에서는 static, intent, activity인지에 따라 최종적인 위젯을 구성한다 Reference https://velog.io/@s_sub/새싹-iOS-20주차]]></summary></entry><entry><title type="html">[CustomView] Segmented Control 커스텀 with PageViewController</title><link href="http://localhost:4000/CustomView-Segmented-Control2/" rel="alternate" type="text/html" title="[CustomView] Segmented Control 커스텀 with PageViewController" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BCustomView%5D-Segmented%20Control2</id><content type="html" xml:base="http://localhost:4000/CustomView-Segmented-Control2/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<div style="display: flex; justify-content: center; gap: 20px;">
  <img src="/assets/img/2025-05-30-%5BCustomView%5D-Segmented%20Control2/image-20250603015019716.png" alt="셀1" width="50%" />
  <img src="/assets/img/2025-05-30-%5BCustomView%5D-Segmented%20Control2/image-20250603015140369.png" alt="셀2" width="50%" />
</div>

<h1 id="uikit-세그먼-컨트롤-커스텀-사용법">UIKit 세그먼 컨트롤 커스텀 사용법</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CustomSegmentControlVC.swift</span>
<span class="c1">//  UIComponentTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 6/2/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomSegmentControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span> <span class="p">{</span>

    <span class="c1">// MARK: - UI</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">underlineLeadingConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>
    <span class="kd">private</span> <span class="k">var</span> <span class="nv">underlineWidthConstraint</span><span class="p">:</span> <span class="kt">NSLayoutConstraint</span><span class="o">!</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineHeight</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mf">4.0</span> <span class="c1">// 원하는 두께로 변경</span>

    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="kt">CGRect</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="n">frame</span><span class="p">)</span>
        <span class="nf">setup</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="kt">Any</span><span class="p">]?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="n">items</span><span class="p">)</span>
        <span class="nf">setup</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">removeBackgroundAndDivider</span><span class="p">()</span>

        <span class="n">underlineView</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">black</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="nf">addSubview</span><span class="p">(</span><span class="n">underlineView</span><span class="p">)</span>
        
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            
        <span class="p">])</span>
        

        <span class="c1">// 초기 제약조건</span>
        <span class="k">let</span> <span class="nv">width</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">?</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">numberOfSegments</span><span class="p">)</span> <span class="p">:</span> <span class="mi">0</span>
        <span class="n">underlineLeadingConstraint</span> <span class="o">=</span> <span class="n">underlineView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">leadingAnchor</span><span class="p">)</span>
        <span class="n">underlineWidthConstraint</span> <span class="o">=</span> <span class="n">underlineView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="n">width</span><span class="p">)</span>

        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">underlineLeadingConstraint</span><span class="p">,</span>
            <span class="n">underlineWidthConstraint</span><span class="p">,</span>
            <span class="n">underlineView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">bottomAnchor</span><span class="p">),</span>
            <span class="n">underlineView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
        <span class="c1">// 항상 최신 크기/위치 반영</span>
        <span class="nf">updateUnderlinePosition</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">updateUnderlinePosition</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span> <span class="o">=</span> <span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">width</span> <span class="o">=</span> <span class="n">bounds</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">numberOfSegments</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">leading</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">selectedSegmentIndex</span><span class="p">)</span> <span class="o">*</span> <span class="n">width</span>

        <span class="n">underlineWidthConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">width</span>
        <span class="n">underlineLeadingConstraint</span><span class="o">.</span><span class="n">constant</span> <span class="o">=</span> <span class="n">leading</span>

        <span class="k">if</span> <span class="n">animated</span> <span class="p">{</span>
            <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.15</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="nf">layoutIfNeeded</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">removeBackgroundAndDivider</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">highlighted</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="nf">setDividerImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>



<span class="kd">final</span> <span class="kd">class</span> <span class="kt">CustomSegmentControlVC</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">segmentedControl</span><span class="p">:</span> <span class="kt">UISegmentedControl</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segment</span> <span class="o">=</span> <span class="kt">UISegmentedControl</span><span class="p">(</span><span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="s">"첫번째"</span><span class="p">,</span> <span class="s">"두번째"</span><span class="p">,</span> <span class="s">"세번째"</span><span class="p">])</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="c1">// 스타일 커스텀</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">gray</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setTitleTextAttributes</span><span class="p">([</span>
            <span class="kt">NSAttributedString</span><span class="o">.</span><span class="kt">Key</span><span class="o">.</span><span class="nv">foregroundColor</span><span class="p">:</span> <span class="kt">UIColor</span><span class="o">.</span><span class="n">invertedSystemBackground</span><span class="p">,</span>
            <span class="o">.</span><span class="nv">font</span><span class="p">:</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">15</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="p">],</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="n">selectedSegmentTintColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">clear</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImage</span><span class="p">()</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setBackgroundImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">highlighted</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="n">segment</span><span class="o">.</span><span class="nf">setDividerImage</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="nv">forLeftSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">selected</span><span class="p">,</span> <span class="nv">rightSegmentState</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">,</span> <span class="nv">barMetrics</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">segment</span>
    <span class="p">}()</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">underlineView</span><span class="p">:</span> <span class="kt">UIView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UIView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">invertedSystemBackground</span>
        <span class="n">view</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">vc1</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">red</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">vc2</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">blue</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">vc3</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIViewController</span><span class="p">()</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">green</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>
    <span class="k">var</span> <span class="nv">dataViewControllers</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIViewController</span><span class="p">]</span> <span class="p">{</span> <span class="p">[</span><span class="n">vc1</span><span class="p">,</span> <span class="n">vc2</span><span class="p">,</span> <span class="n">vc3</span><span class="p">]</span> <span class="p">}</span>

    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">UIPageViewController</span><span class="p">(</span><span class="nv">transitionStyle</span><span class="p">:</span> <span class="o">.</span><span class="n">scroll</span><span class="p">,</span> <span class="nv">navigationOrientation</span><span class="p">:</span> <span class="o">.</span><span class="n">horizontal</span><span class="p">)</span>
        <span class="n">vc</span><span class="o">.</span><span class="nf">setViewControllers</span><span class="p">([</span><span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span> <span class="nv">direction</span><span class="p">:</span> <span class="o">.</span><span class="n">forward</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">vc</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">return</span> <span class="n">vc</span>
    <span class="p">}()</span>

    <span class="k">var</span> <span class="nv">currentPage</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="k">let</span> <span class="nv">direction</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="o">.</span><span class="kt">NavigationDirection</span> <span class="o">=</span> <span class="n">oldValue</span> <span class="o">&lt;=</span> <span class="k">self</span><span class="o">.</span><span class="n">currentPage</span> <span class="p">?</span> <span class="o">.</span><span class="nv">forward</span> <span class="p">:</span> <span class="o">.</span><span class="n">reverse</span>
            <span class="k">self</span><span class="o">.</span><span class="n">pageViewController</span><span class="o">.</span><span class="nf">setViewControllers</span><span class="p">(</span>
                <span class="p">[</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="k">self</span><span class="o">.</span><span class="n">currentPage</span><span class="p">]],</span>
                <span class="nv">direction</span><span class="p">:</span> <span class="n">direction</span><span class="p">,</span>
                <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
                <span class="nv">completion</span><span class="p">:</span> <span class="kc">nil</span>
            <span class="p">)</span>
            <span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">segmentedControl</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">underlineView</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="p">)</span>

        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">80</span><span class="p">),</span>
            <span class="n">segmentedControl</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">50</span><span class="p">),</span>

            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
            <span class="n">pageViewController</span><span class="o">.</span><span class="n">view</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">segmentedControl</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">),</span>
        <span class="p">])</span>

        <span class="c1">// 언더라인의 높이와 최초 위치 설정 (width, x는 viewDidLayoutSubviews에서)</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">y</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">width</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>

        <span class="n">segmentedControl</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="nf">changeValue</span><span class="p">(</span><span class="nv">control</span><span class="p">:)),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">valueChanged</span><span class="p">)</span>
        <span class="n">segmentedControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="nf">changeValue</span><span class="p">(</span><span class="nv">control</span><span class="p">:</span> <span class="n">segmentedControl</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLayoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLayoutSubviews</span><span class="p">()</span>
        <span class="c1">// 최초 렌더링 시 언더라인 위치 정확히 세팅</span>
        <span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="c1">// 언더라인의 y위치를 세그먼트 하단에 맞추기</span>
        <span class="k">let</span> <span class="nv">segFrame</span> <span class="o">=</span> <span class="n">segmentedControl</span><span class="o">.</span><span class="n">frame</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">maxY</span> <span class="o">-</span> <span class="mi">4</span>
        <span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="mi">4</span>
    <span class="p">}</span>

    <span class="kd">@objc</span> <span class="kd">private</span> <span class="kd">func</span> <span class="nf">changeValue</span><span class="p">(</span><span class="nv">control</span><span class="p">:</span> <span class="kt">UISegmentedControl</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentPage</span> <span class="o">=</span> <span class="n">control</span><span class="o">.</span><span class="n">selectedSegmentIndex</span>
    <span class="p">}</span>

    <span class="c1">/// 언더라인 이동 (frame 연산)</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">segFrame</span> <span class="o">=</span> <span class="n">segmentedControl</span><span class="o">.</span><span class="n">frame</span>
        <span class="k">let</span> <span class="nv">segmentCount</span> <span class="o">=</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentedControl</span><span class="o">.</span><span class="n">numberOfSegments</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">segmentWidth</span> <span class="o">=</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">width</span> <span class="o">/</span> <span class="n">segmentCount</span>
        <span class="k">let</span> <span class="nv">targetX</span> <span class="o">=</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">minX</span> <span class="o">+</span> <span class="n">segmentWidth</span> <span class="o">*</span> <span class="kt">CGFloat</span><span class="p">(</span><span class="n">segmentedControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span><span class="p">)</span>

        <span class="k">let</span> <span class="nv">newFrame</span> <span class="o">=</span> <span class="kt">CGRect</span><span class="p">(</span><span class="nv">x</span><span class="p">:</span> <span class="n">targetX</span><span class="p">,</span>
                              <span class="nv">y</span><span class="p">:</span> <span class="n">segFrame</span><span class="o">.</span><span class="n">maxY</span> <span class="o">-</span> <span class="mi">4</span><span class="p">,</span>
                              <span class="nv">width</span><span class="p">:</span> <span class="n">segmentWidth</span><span class="p">,</span>
                              <span class="nv">height</span><span class="p">:</span> <span class="mi">4</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">animated</span> <span class="p">{</span>
            <span class="kt">UIView</span><span class="o">.</span><span class="nf">animate</span><span class="p">(</span><span class="nv">withDuration</span><span class="p">:</span> <span class="mf">0.2</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">self</span><span class="o">.</span><span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span>
            <span class="p">}</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">underlineView</span><span class="o">.</span><span class="n">frame</span> <span class="o">=</span> <span class="n">newFrame</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">CustomSegmentControlVC</span><span class="p">:</span> <span class="kt">UIPageViewControllerDataSource</span><span class="p">,</span> <span class="kt">UIPageViewControllerDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">pageViewController</span><span class="p">(</span><span class="n">_</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="p">,</span> <span class="n">viewControllerBefore</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UIViewController</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">viewController</span><span class="p">),</span> <span class="n">index</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="n">index</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">pageViewController</span><span class="p">(</span><span class="n">_</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="p">,</span> <span class="n">viewControllerAfter</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UIViewController</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">viewController</span><span class="p">),</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="n">count</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="p">[</span><span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">pageViewController</span><span class="p">(</span><span class="n">_</span> <span class="nv">pageViewController</span><span class="p">:</span> <span class="kt">UIPageViewController</span><span class="p">,</span> <span class="n">didFinishAnimating</span> <span class="nv">finished</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">,</span> <span class="nv">previousViewControllers</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIViewController</span><span class="p">],</span> <span class="n">transitionCompleted</span> <span class="nv">completed</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">viewController</span> <span class="o">=</span> <span class="n">pageViewController</span><span class="o">.</span><span class="n">viewControllers</span><span class="p">?[</span><span class="mi">0</span><span class="p">],</span> <span class="k">let</span> <span class="nv">index</span> <span class="o">=</span> <span class="k">self</span><span class="o">.</span><span class="n">dataViewControllers</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">viewController</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="k">self</span><span class="o">.</span><span class="n">currentPage</span> <span class="o">=</span> <span class="n">index</span>
        <span class="k">self</span><span class="o">.</span><span class="n">segmentedControl</span><span class="o">.</span><span class="n">selectedSegmentIndex</span> <span class="o">=</span> <span class="n">index</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">moveUnderline</span><span class="p">(</span><span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">CustomSegmentControlVC</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UIColor</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">invertedSystemBackground</span><span class="p">:</span> <span class="kt">UIColor</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UIColor</span> <span class="p">{</span> <span class="n">traitCollection</span> <span class="k">in</span>
            <span class="k">switch</span> <span class="n">traitCollection</span><span class="o">.</span><span class="n">userInterfaceStyle</span> <span class="p">{</span>
            <span class="k">case</span> <span class="o">.</span><span class="nv">dark</span><span class="p">:</span>
                <span class="c1">// 다크 모드에서는 밝은 배경색</span>
                <span class="k">return</span> <span class="o">.</span><span class="n">white</span>
            <span class="k">default</span><span class="p">:</span>
                <span class="c1">// 라이트 모드에서는 어두운 배경색</span>
                <span class="k">return</span> <span class="o">.</span><span class="n">black</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="reference">Reference</h2>
<ul>
  <li>https://ios-development.tistory.com/963</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CustomView" /><summary type="html"><![CDATA[UIKit 세그먼 컨트롤 커스텀 사용법 // // CustomSegmentControlVC.swift // UIComponentTutorial // // Created by 김동현 on 6/2/25. // import UIKit final class CustomSegmentControl: UISegmentedControl { // MARK: - UI private let underlineView: UIView = { let view = UIView() view.backgroundColor = .black return view }() private var underlineLeadingConstraint: NSLayoutConstraint! private var underlineWidthConstraint: NSLayoutConstraint! private let underlineHeight: CGFloat = 4.0 // 원하는 두께로 변경 override init(frame: CGRect) { super.init(frame: frame) setup() } override init(items: [Any]?) { super.init(items: items) setup() } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } private func setup() { self.removeBackgroundAndDivider() underlineView.backgroundColor = .black underlineView.translatesAutoresizingMaskIntoConstraints = false underlineView.layer.cornerRadius = 0 addSubview(underlineView) NSLayoutConstraint.activate([ ]) // 초기 제약조건 let width = bounds.width &gt; 0 ? bounds.width / CGFloat(numberOfSegments) : 0 underlineLeadingConstraint = underlineView.leadingAnchor.constraint(equalTo: leadingAnchor) underlineWidthConstraint = underlineView.widthAnchor.constraint(equalToConstant: width) NSLayoutConstraint.activate([ underlineLeadingConstraint, underlineWidthConstraint, underlineView.bottomAnchor.constraint(equalTo: bottomAnchor), underlineView.heightAnchor.constraint(equalToConstant: 20) ]) } override func layoutSubviews() { super.layoutSubviews() // 항상 최신 크기/위치 반영 updateUnderlinePosition(animated: false) } func updateUnderlinePosition(animated: Bool = true) { let width = bounds.width / CGFloat(numberOfSegments) let leading = CGFloat(selectedSegmentIndex) * width underlineWidthConstraint.constant = width underlineLeadingConstraint.constant = leading if animated { UIView.animate(withDuration: 0.15) { self.layoutIfNeeded() } } else { self.layoutIfNeeded() } } private func removeBackgroundAndDivider() { let image = UIImage() setBackgroundImage(image, for: .normal, barMetrics: .default) setBackgroundImage(image, for: .selected, barMetrics: .default) setBackgroundImage(image, for: .highlighted, barMetrics: .default) setDividerImage(image, forLeftSegmentState: .selected, rightSegmentState: .normal, barMetrics: .default) } } final class CustomSegmentControlVC: UIViewController { private let segmentedControl: UISegmentedControl = { let segment = UISegmentedControl(items: ["첫번째", "두번째", "세번째"]) segment.translatesAutoresizingMaskIntoConstraints = false segment.selectedSegmentIndex = 0 // 스타일 커스텀 segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.gray ], for: .normal) segment.setTitleTextAttributes([ NSAttributedString.Key.foregroundColor: UIColor.invertedSystemBackground, .font: UIFont.systemFont(ofSize: 15, weight: .bold) ], for: .selected) segment.selectedSegmentTintColor = .clear let image = UIImage() segment.setBackgroundImage(image, for: .normal, barMetrics: .default) segment.setBackgroundImage(image, for: .selected, barMetrics: .default) segment.setBackgroundImage(image, for: .highlighted, barMetrics: .default) segment.setDividerImage(image, forLeftSegmentState: .selected, rightSegmentState: .normal, barMetrics: .default) return segment }() private let underlineView: UIView = { let view = UIView() view.backgroundColor = .invertedSystemBackground view.layer.cornerRadius = 0 return view }() private let vc1: UIViewController = { let vc = UIViewController() vc.view.backgroundColor = .red return vc }() private let vc2: UIViewController = { let vc = UIViewController() vc.view.backgroundColor = .blue return vc }() private let vc3: UIViewController = { let vc = UIViewController() vc.view.backgroundColor = .green return vc }() var dataViewControllers: [UIViewController] { [vc1, vc2, vc3] } private lazy var pageViewController: UIPageViewController = { let vc = UIPageViewController(transitionStyle: .scroll, navigationOrientation: .horizontal) vc.setViewControllers([self.dataViewControllers[0]], direction: .forward, animated: true) vc.delegate = self vc.dataSource = self vc.view.translatesAutoresizingMaskIntoConstraints = false return vc }() var currentPage: Int = 0 { didSet { let direction: UIPageViewController.NavigationDirection = oldValue &lt;= self.currentPage ? .forward : .reverse self.pageViewController.setViewControllers( [dataViewControllers[self.currentPage]], direction: direction, animated: true, completion: nil ) moveUnderline(animated: true) } } override func viewDidLoad() { super.viewDidLoad() self.view.addSubview(self.segmentedControl) self.view.addSubview(self.underlineView) self.view.addSubview(self.pageViewController.view) NSLayoutConstraint.activate([ segmentedControl.leadingAnchor.constraint(equalTo: view.leadingAnchor), segmentedControl.trailingAnchor.constraint(equalTo: view.trailingAnchor), segmentedControl.topAnchor.constraint(equalTo: view.topAnchor, constant: 80), segmentedControl.heightAnchor.constraint(equalToConstant: 50), pageViewController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor), pageViewController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor), pageViewController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor), pageViewController.view.topAnchor.constraint(equalTo: segmentedControl.bottomAnchor), ]) // 언더라인의 높이와 최초 위치 설정 (width, x는 viewDidLayoutSubviews에서) underlineView.frame = CGRect(x: 0, y: 0, width: 0, height: 4) segmentedControl.addTarget(self, action: #selector(changeValue(control:)), for: .valueChanged) segmentedControl.selectedSegmentIndex = 0 changeValue(control: segmentedControl) } override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() // 최초 렌더링 시 언더라인 위치 정확히 세팅 moveUnderline(animated: false) // 언더라인의 y위치를 세그먼트 하단에 맞추기 let segFrame = segmentedControl.frame underlineView.frame.origin.y = segFrame.maxY - 4 underlineView.frame.size.height = 4 } @objc private func changeValue(control: UISegmentedControl) { self.currentPage = control.selectedSegmentIndex } /// 언더라인 이동 (frame 연산) private func moveUnderline(animated: Bool) { let segFrame = segmentedControl.frame let segmentCount = CGFloat(segmentedControl.numberOfSegments) let segmentWidth = segFrame.width / segmentCount let targetX = segFrame.minX + segmentWidth * CGFloat(segmentedControl.selectedSegmentIndex) let newFrame = CGRect(x: targetX, y: segFrame.maxY - 4, width: segmentWidth, height: 4) if animated { UIView.animate(withDuration: 0.2) { self.underlineView.frame = newFrame } } else { self.underlineView.frame = newFrame } } } extension CustomSegmentControlVC: UIPageViewControllerDataSource, UIPageViewControllerDelegate { func pageViewController(_ pageViewController: UIPageViewController, viewControllerBefore viewController: UIViewController) -&gt; UIViewController? { guard let index = self.dataViewControllers.firstIndex(of: viewController), index - 1 &gt;= 0 else { return nil } return self.dataViewControllers[index - 1] } func pageViewController(_ pageViewController: UIPageViewController, viewControllerAfter viewController: UIViewController) -&gt; UIViewController? { guard let index = self.dataViewControllers.firstIndex(of: viewController), index + 1 &lt; self.dataViewControllers.count else { return nil } return self.dataViewControllers[index + 1] } func pageViewController(_ pageViewController: UIPageViewController, didFinishAnimating finished: Bool, previousViewControllers: [UIViewController], transitionCompleted completed: Bool) { guard let viewController = pageViewController.viewControllers?[0], let index = self.dataViewControllers.firstIndex(of: viewController) else { return } self.currentPage = index self.segmentedControl.selectedSegmentIndex = index self.moveUnderline(animated: true) } } #Preview { CustomSegmentControlVC() } extension UIColor { static var invertedSystemBackground: UIColor { return UIColor { traitCollection in switch traitCollection.userInterfaceStyle { case .dark: // 다크 모드에서는 밝은 배경색 return .white default: // 라이트 모드에서는 어두운 배경색 return .black } } } } Reference https://ios-development.tistory.com/963]]></summary></entry></feed>