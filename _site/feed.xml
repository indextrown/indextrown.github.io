<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-14T14:55:27+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[Recommendation System] 1. 추천시스템 소개</title><link href="http://localhost:4000/Recommendation-System-Section1/" rel="alternate" type="text/html" title="[Recommendation System] 1. 추천시스템 소개" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BRecommendation%20System%5D-Section1</id><content type="html" xml:base="http://localhost:4000/Recommendation-System-Section1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="추천-시스템이란">추천 시스템이란</h1>
<p>추천 시스템이란 사용자의 과거 행동 데이터를 바탕으로 사용자에게 필요한 정보나 제품을 제시하는 시스템이다.</p>

<h1 id="추천-시스템의-여러-기술">추천 시스템의 여러 기술</h1>
<ul>
  <li>협업 필터링(Collaborative Filtering)</li>
  <li>내용 기반 필터링(Content-Based Filtering)</li>
  <li>지식 기반 필터링(Knowledge-Based Filtering)</li>
  <li>딥러닝(Deep Learning)</li>
  <li>하이브리드 필터링(협업필터링 &amp; 딥러닝)</li>
</ul>

<h1 id="11-협업-필터링-collaborative-filtering">1.1 협업 필터링 (Collaborative Filtering)</h1>
<p>구매 및 소비한 제품에 대한 소비자의 평가 패턴이 비슷한 집단 속에서 서로 접하지 않은 제품을 추천하는 기술이다.<br />
한계 - 소비자의 평가정보를 구하기 어렵다 ex)신규/휴먼 고객<br />
해결책 - 구매가 아니라 클릭, 체류시간으로 간접적인 데이터로 협업 필터링 가능</p>

<h1 id="12-내용-기반-필터링content-based-filtering">1.2 내용 기반 필터링(Content-Based Filtering)</h1>
<p>제품의 내용을 분석해서 추천하는 기술이다.</p>

<h1 id="14-지식-기반-필터링knowledge-based-filtering">1.4 지식 기반 필터링(Knowledge-Based Filtering)</h1>
<p>특정 분야 전문가의 도움을 받아서 그 분야에 대한 전체적인 지식 구조를 만들어서 활용하는 방법이다.</p>

<h1 id="15-딥러닝deep-learning">1.5 딥러닝(Deep Learning)</h1>
<p>AI 알고리즘 중 현재 가장 많이 사용되는 딥러닝 방법이다.</p>

<h1 id="16-하이브리드-필터링협업필터링--딥러닝">1.6 하이브리드 필터링(협업필터링 &amp; 딥러닝)</h1>
<p>두가지 이상의 알고리즘 혼합을 통한 하이브리드 형태이다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="Recommendation System" /><summary type="html"><![CDATA[추천 시스템이란 추천 시스템이란 사용자의 과거 행동 데이터를 바탕으로 사용자에게 필요한 정보나 제품을 제시하는 시스템이다. 추천 시스템의 여러 기술 협업 필터링(Collaborative Filtering) 내용 기반 필터링(Content-Based Filtering) 지식 기반 필터링(Knowledge-Based Filtering) 딥러닝(Deep Learning) 하이브리드 필터링(협업필터링 &amp; 딥러닝) 1.1 협업 필터링 (Collaborative Filtering) 구매 및 소비한 제품에 대한 소비자의 평가 패턴이 비슷한 집단 속에서 서로 접하지 않은 제품을 추천하는 기술이다. 한계 - 소비자의 평가정보를 구하기 어렵다 ex)신규/휴먼 고객 해결책 - 구매가 아니라 클릭, 체류시간으로 간접적인 데이터로 협업 필터링 가능 1.2 내용 기반 필터링(Content-Based Filtering) 제품의 내용을 분석해서 추천하는 기술이다. 1.4 지식 기반 필터링(Knowledge-Based Filtering) 특정 분야 전문가의 도움을 받아서 그 분야에 대한 전체적인 지식 구조를 만들어서 활용하는 방법이다. 1.5 딥러닝(Deep Learning) AI 알고리즘 중 현재 가장 많이 사용되는 딥러닝 방법이다. 1.6 하이브리드 필터링(협업필터링 &amp; 딥러닝) 두가지 이상의 알고리즘 혼합을 통한 하이브리드 형태이다.]]></summary></entry><entry><title type="html">[CodeLounge] Admob</title><link href="http://localhost:4000/CodeLounge-Admob/" rel="alternate" type="text/html" title="[CodeLounge] Admob" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BCodeLounge%5D-Admob</id><content type="html" xml:base="http://localhost:4000/CodeLounge-Admob/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="swiftui에-admob-광고-적용하기">SwiftUI에 Admob 광고 적용하기</h2>

<h2 id="1-admob-설정-및-테스트-광고-id">1. Admob 설정 및 테스트 광고 ID</h2>

<h3 id="httpsadmobgooglecomv2home">https://admob.google.com/v2/home</h3>

<ul>
  <li>Admob 계정 생성(필수)</li>
  <li>애플 앱스토어 등록(선택)
    <ul>
      <li>어플을 앱스토어에 등록 후 Admob 작업을 진행하는 게 훨 씬 수월하다.</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514222826541.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223016444.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223225011.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223435839.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223505826.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223554014.png" alt="이미지" width="100%" /></p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223724779.png" alt="이미지" width="100%" /><br />
ca-app-pub-xxxxx와 같은 형태의 App ID가 발급된다.</p>

<p><img src="/assets/img/2025-05-14-%5BCodeLounge%5D-Admob/image-20250514223858027.png" alt="이미지" width="100%" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SKAdNetworkItems - IDFA 없이도 광고 성과 추적 (Apple 정책 대응)</span>
<span class="c1">// NSUserTrackingUsageDescription - 사용자에게 추적 허용 요청 팝업 표시</span>
<span class="c1">// requestTrackingAuthorization() - 실제로 권한 요청하는 코드</span>
<span class="c1">// 기타 옵션들 - 광고 관련 기능(예: SKOverlay 등) 자동 지원 목적</span>

<span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">GADApplicationIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ca</span><span class="o">-</span><span class="n">app</span><span class="o">-</span><span class="n">pub</span><span class="o">-</span><span class="n">xxxxxxxxxxxxxxxx</span><span class="o">~</span><span class="n">yyyyyyyyyy</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkItems</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">array</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">cstr6suwn9</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4</span><span class="n">fzdc2evr5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4</span><span class="n">pfyvq9l8r</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">2</span><span class="n">fnua5tdw4</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ydx93a7ass</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">5</span><span class="n">a6flpkh64</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">p78axxw29g</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v72qych5uu</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ludvb6z3bs</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">cp8zw746q7</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">sh42y64q3</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">c6k4g5qg8m</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">s39g8k73mm</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">qy4746246</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">f38h382jlk</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">hs6bdukanm</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v4nxqhlyqp</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">wzmmz9fp6w</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">yclnxrl5pm</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">t38b2kh725</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">7</span><span class="n">ug5zh24hu</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">gta9lk7p23</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">vutu7akeur</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">y5ghdn5j9k</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">n6fk4nfna4</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">v9wttpbfk9</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">n38lu8286q</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">47</span><span class="n">vhws6wlr</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">kbd757ywx3</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">9</span><span class="n">t245vhmpl</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">eh6m2bh4zr</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">a2p9lx4jpn</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">22</span><span class="n">mmun2rn5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4468</span><span class="n">km3ulz</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">2</span><span class="n">u9pt9hc89</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">8</span><span class="n">s468mfl3y</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">klf5c3l5u5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ppxm28t8ap</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">ecpz2srf59</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">uw77j35x4d</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">pwa73g5rt2</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">mlmmfzh3r3</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">578</span><span class="n">prtvx9j</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">4</span><span class="n">dzt52r2t5</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">e5fvkxwrpn</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">8</span><span class="n">c4e2ghe7u</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="n">zq492l623r</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">rd42ekr43</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">dict</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">key</span><span class="o">&gt;</span><span class="kt">SKAdNetworkIdentifier</span><span class="o">&lt;/</span><span class="n">key</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="mi">3</span><span class="n">qcr597p9d</span><span class="o">.</span><span class="n">skadnetwork</span><span class="o">&lt;/</span><span class="n">string</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">dict</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">array</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>발급된 App ID를 Info.plist에 추가한다.</p>

<h2 id="2-google-mobile-ads-설치spm">2. Google Mobile Ads 설치(SPM)</h2>

<ol>
  <li>Xcode -&gt; File -&gt; Add Package</li>
  <li>입력 URL
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> https://github.com/googleads/swift-package-manager-google-mobile-ads.git
</code></pre></div>    </div>
  </li>
  <li>버전: 최신 선택</li>
  <li>메인 앱 타겟만 체크 -&gt; Extension이 포함된 앱이더라도, 메인 앱에만 적용이 가능하다고 한다.</li>
</ol>

<h2 id="3-appdelegate설정광고-초기화">3. AppDelegate설정(광고 초기화)</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// AppDelegate.swift</span>
<span class="kd">import</span> <span class="kt">GoogleMobileAds</span>

<span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
                     <span class="n">didFinishLaunchingWithOptions</span> <span class="nv">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIApplication</span><span class="o">.</span><span class="kt">LaunchOptionsKey</span> <span class="p">:</span> <span class="kt">Any</span><span class="p">]?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
		<span class="kt">MobileAds</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">start</span><span class="p">(</span><span class="nv">completionHandler</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// 추가</span>
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://royzero.tistory.com/entry/SwiftUI-AdMob-적용하기</li>
  <li>https://velog.io/@heejin62/SwiftUI-앱에-AdMob-적용하기-근데-이제-Trouble-Shooting을-곁들인</li>
  <li>https://developers.google.com/admob/ios/test-ads?hl=ko</li>
  <li>https://actumn.tistory.com/99</li>
  <li>https://developers.google.com/admob/ios/privacy/strategies?hl=ko#skadnetwork</li>
  <li>https://dev-apple.tistory.com/30</li>
  <li>https://developers.google.com/admob/ios/test-ads?hl=ko#swift</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CodeLounge" /><summary type="html"><![CDATA[SwiftUI에 Admob 광고 적용하기 1. Admob 설정 및 테스트 광고 ID https://admob.google.com/v2/home Admob 계정 생성(필수) 애플 앱스토어 등록(선택) 어플을 앱스토어에 등록 후 Admob 작업을 진행하는 게 훨 씬 수월하다. ca-app-pub-xxxxx와 같은 형태의 App ID가 발급된다. // SKAdNetworkItems - IDFA 없이도 광고 성과 추적 (Apple 정책 대응) // NSUserTrackingUsageDescription - 사용자에게 추적 허용 요청 팝업 표시 // requestTrackingAuthorization() - 실제로 권한 요청하는 코드 // 기타 옵션들 - 광고 관련 기능(예: SKOverlay 등) 자동 지원 목적 &lt;key&gt;GADApplicationIdentifier&lt;/key&gt; &lt;string&gt;ca-app-pub-xxxxxxxxxxxxxxxx~yyyyyyyyyy&lt;/string&gt; &lt;key&gt;SKAdNetworkItems&lt;/key&gt; &lt;array&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;cstr6suwn9.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4fzdc2evr5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4pfyvq9l8r.skadnetwork&lt;/string&gt; &lt;/dict &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;2fnua5tdw4.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ydx93a7ass.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;5a6flpkh64.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;p78axxw29g.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;v72qych5uu.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ludvb6z3bs.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;cp8zw746q7.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3sh42y64q3.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;c6k4g5qg8m.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;s39g8k73mm.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3qy4746246.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;f38h382jlk.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;hs6bdukanm.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;v4nxqhlyqp.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;wzmmz9fp6w.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;yclnxrl5pm.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;t38b2kh725.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;7ug5zh24hu.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;gta9lk7p23.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;vutu7akeur.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;y5ghdn5j9k.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;n6fk4nfna4.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;v9wttpbfk9.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;n38lu8286q.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;47vhws6wlr.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;kbd757ywx3.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;9t245vhmpl.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;eh6m2bh4zr.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;a2p9lx4jpn.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;22mmun2rn5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4468km3ulz.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;2u9pt9hc89.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;8s468mfl3y.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;klf5c3l5u5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ppxm28t8ap.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;ecpz2srf59.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;uw77j35x4d.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;pwa73g5rt2.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;mlmmfzh3r3.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;578prtvx9j.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;4dzt52r2t5.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;e5fvkxwrpn.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;8c4e2ghe7u.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;zq492l623r.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3rd42ekr43.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;SKAdNetworkIdentifier&lt;/key&gt; &lt;string&gt;3qcr597p9d.skadnetwork&lt;/string&gt; &lt;/dict&gt; &lt;/array&gt; 발급된 App ID를 Info.plist에 추가한다. 2. Google Mobile Ads 설치(SPM) Xcode -&gt; File -&gt; Add Package 입력 URL https://github.com/googleads/swift-package-manager-google-mobile-ads.git 버전: 최신 선택 메인 앱 타겟만 체크 -&gt; Extension이 포함된 앱이더라도, 메인 앱에만 적용이 가능하다고 한다. 3. AppDelegate설정(광고 초기화) // AppDelegate.swift import GoogleMobileAds class AppDelegate: NSObject, UIApplicationDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey : Any]? = nil) -&gt; Bool { MobileAds.shared.start(completionHandler: nil) // 추가 return true } } Reference https://royzero.tistory.com/entry/SwiftUI-AdMob-적용하기 https://velog.io/@heejin62/SwiftUI-앱에-AdMob-적용하기-근데-이제-Trouble-Shooting을-곁들인 https://developers.google.com/admob/ios/test-ads?hl=ko https://actumn.tistory.com/99 https://developers.google.com/admob/ios/privacy/strategies?hl=ko#skadnetwork https://dev-apple.tistory.com/30 https://developers.google.com/admob/ios/test-ads?hl=ko#swift]]></summary></entry><entry><title type="html">[Docker] Docker?</title><link href="http://localhost:4000/Docker-docker1/" rel="alternate" type="text/html" title="[Docker] Docker?" /><published>2025-05-14T00:00:00+00:00</published><updated>2025-05-14T00:00:00+00:00</updated><id>http://localhost:4000/%5BDocker%5D-docker1</id><content type="html" xml:base="http://localhost:4000/Docker-docker1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="docker">Docker</h2>
<p>이식성 - 명령어 한 줄로 어떤 컴퓨터에서든 동일한 환경설정이 가능해 에러를 피할 수 있다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="Docker" /><summary type="html"><![CDATA[Docker 이식성 - 명령어 한 줄로 어떤 컴퓨터에서든 동일한 환경설정이 가능해 에러를 피할 수 있다.]]></summary></entry><entry><title type="html">[TableView] 9. 테이블뷰 콤바인 적용</title><link href="http://localhost:4000/UIKit-tableView9/" rel="alternate" type="text/html" title="[TableView] 9. 테이블뷰 콤바인 적용" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView9</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView9/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="테이블뷰-콤바인-적용">테이블뷰 콤바인 적용</h2>

<h2 id="combine이란">Combine이란?</h2>

<ul>
  <li>iOS 13 이상부터 지원한다.</li>
  <li>데이터를 리액티브 흐름으로 만들어서 데이터가 변경되면 이벤트 처리를 받을 수 있도록 설정할 수 있는데 보내는쪽을Publisher,  받는쪽을 Subscribe라고 한다.</li>
  <li>기존 테이블뷰에서는 데이터를 dataSource에서 처리하였는데 ViewController에서 데이터 변경이 일어나면 dataSource와 연결시켜서 바로 테이블뷰에 보여줄 수 있다.</li>
</ul>

<p><img src="/assets/img/2025-05-13-%5BUIKit%5D-tableView9/image-20250513181643441.png" alt="이미지" width="70%" /><br />
우선 CombineList.storyboard라는 이름으로 파일을 생성하고 테이블뷰를 만들어준다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Combine</span>

<span class="kd">class</span> <span class="kt">CombineListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// Combine 메모리 처리를 위해 생성</span>
    <span class="k">var</span> <span class="nv">subscriptions</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">AnyCancellable</span><span class="o">&gt;</span><span class="p">()</span>
    
    <span class="c1">// Published를 하게 되면 dummies 데이터가 추가나 값 변경시 이벤트를 받을 수 있다.</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">dummies</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>

   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
        
        
        <span class="cm">/*
        - sink는 @Published가 수정된 스레드에서 실행된다
        - 그래서 Published변수 수정시 메인 스레드에서 수정해주자
        - @Published 값을 메인 스레드에서 수정하든, 백그라운드에서 수정하든, .receive(on: .main)만 붙이면 sink는 메인에서 실행되고reloadData()도 안전하게 실행된다
         */</span>
        
        <span class="c1">// $ 붙이면 데이터 이벤트를 받을 수 있는 상태가 됨</span>
        <span class="c1">// sink는 구독하는 것이다.</span>
        <span class="c1">// AnyCancellable 구독한다고 한다.</span>
        <span class="c1">// store: 구독했던거에 대한 메모리 참조가 들어오게 되는데 이를 관리하기 위해 subscriptions에 넣어준다.</span>
        <span class="n">$dummies</span>
            <span class="o">.</span><span class="nf">receive</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="p">)</span>
            <span class="c1">// 데이터 변경시마다 동작</span>
            <span class="o">.</span><span class="nf">sink</span><span class="p">(</span><span class="nv">receiveValue</span><span class="p">:</span> <span class="p">{</span> <span class="p">(</span><span class="nv">changedDummies</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummyData</span><span class="p">])</span> <span class="k">in</span>
                <span class="nf">print</span><span class="p">(</span><span class="s">"changedDummies: </span><span class="se">\(</span><span class="n">changedDummies</span><span class="o">.</span><span class="n">count</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                
                <span class="c1">// sink는 메인스레드에서 동작해서 Dispatch안해도된다</span>
                <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">reloadData</span><span class="p">()</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">store</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">subscriptions</span><span class="p">)</span>
        
        <span class="c1">// 2초 뒤에 더미데이터 10개 추가</span>
        <span class="kt">DispatchQueue</span><span class="o">.</span><span class="nf">global</span><span class="p">()</span><span class="o">.</span><span class="nf">asyncAfter</span><span class="p">(</span><span class="nv">deadline</span><span class="p">:</span> <span class="o">.</span><span class="nf">now</span><span class="p">()</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="nv">execute</span><span class="p">:</span> <span class="p">{</span>
            <span class="k">self</span><span class="o">.</span><span class="n">dummies</span> <span class="o">+=</span> <span class="kt">DummyData</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">})</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
<span class="c1">//        self.myTableView.delegate = self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CombineListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>

    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummies</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>

    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>

        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">dummies</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>

        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>

        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>

        <span class="n">cell</span><span class="o">.</span><span class="n">detailTextLabel</span><span class="p">?</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 연결할 CombineListViewController를 만들어준다.</p>

<p><img src="/assets/img/2025-05-13-%5BUIKit%5D-tableView9/image-20250513183738608.png" alt="이미지" width="70%" /><br />
Main.storyboard에서 Combine버튼 생성 후 reference 생성하고 Stoayboard이름과 Referenced ID도 추가해준다.</p>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[테이블뷰 콤바인 적용 Combine이란? iOS 13 이상부터 지원한다. 데이터를 리액티브 흐름으로 만들어서 데이터가 변경되면 이벤트 처리를 받을 수 있도록 설정할 수 있는데 보내는쪽을Publisher, 받는쪽을 Subscribe라고 한다. 기존 테이블뷰에서는 데이터를 dataSource에서 처리하였는데 ViewController에서 데이터 변경이 일어나면 dataSource와 연결시켜서 바로 테이블뷰에 보여줄 수 있다. 우선 CombineList.storyboard라는 이름으로 파일을 생성하고 테이블뷰를 만들어준다. import UIKit import Combine class CombineListViewController: UIViewController { // Combine 메모리 처리를 위해 생성 var subscriptions = Set&lt;AnyCancellable&gt;() // Published를 하게 되면 dummies 데이터가 추가나 값 변경시 이벤트를 받을 수 있다. @Published var dummies: [DummyData] = [] @IBOutlet weak var myTableView: UITableView! override func viewDidLoad() { super.viewDidLoad() configureTableView() /* - sink는 @Published가 수정된 스레드에서 실행된다 - 그래서 Published변수 수정시 메인 스레드에서 수정해주자 - @Published 값을 메인 스레드에서 수정하든, 백그라운드에서 수정하든, .receive(on: .main)만 붙이면 sink는 메인에서 실행되고reloadData()도 안전하게 실행된다 */ // $ 붙이면 데이터 이벤트를 받을 수 있는 상태가 됨 // sink는 구독하는 것이다. // AnyCancellable 구독한다고 한다. // store: 구독했던거에 대한 메모리 참조가 들어오게 되는데 이를 관리하기 위해 subscriptions에 넣어준다. $dummies .receive(on: DispatchQueue.main) // 데이터 변경시마다 동작 .sink(receiveValue: { (changedDummies: [DummyData]) in print("changedDummies: \(changedDummies.count)") // sink는 메인스레드에서 동작해서 Dispatch안해도된다 self.myTableView.reloadData() }) .store(in: &amp;subscriptions) // 2초 뒤에 더미데이터 10개 추가 DispatchQueue.global().asyncAfter(deadline: .now() + 2, execute: { self.dummies += DummyData.getDumies(10) }) } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CodeCell.self, forCellReuseIdentifier: CodeCell.reuseIdentifier) self.myTableView.dataSource = self // self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CombineListViewController: UITableViewDataSource { /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummies.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let cellData: DummyData = dummies[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body cell.detailTextLabel?.numberOfLines = 0 return cell } } 그리고 연결할 CombineListViewController를 만들어준다. Main.storyboard에서 Combine버튼 생성 후 reference 생성하고 Stoayboard이름과 Referenced ID도 추가해준다.]]></summary></entry><entry><title type="html">[TableView] 7. UITableViewCell 확장을 통해 셀 식별자 코드 재사용</title><link href="http://localhost:4000/UIKit-tableView7/" rel="alternate" type="text/html" title="[TableView] 7. UITableViewCell 확장을 통해 셀 식별자 코드 재사용" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView7</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView7/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="코드-재사용">코드 재사용</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
<span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
<span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
<span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
    <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>

    <span class="c1">// [guard let] 방식</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"StoryBoardCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>

    <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>

    <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>

    <span class="c1">/// 셀의 서브 타이틀 설정</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>

    <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<p>지금까지 재사용되는 셀은 고유한 식별자를 상수로 넣어주는데 보통 클래스 명을 써주었다. <br />
프로그래밍 하면서 상수가 있는 부분은 최대한 피하는게 좋다. 이유는 상수를 재사용할 수도 있고 오타가 발생할 수 있기 때문이다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 변수로</span>
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"StoryboardCell"</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그래서 셀에서 static으로 상수로 추가해둔다. 이 방법도 충분하지만 조금 더 편하게 할 수 있다.<br />
UITableviewCell 자체가 전부 reuseIdentifier라는 static변수를 가질 수 있게 하면 더 편리해질 수 있다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<p>참고로 확장에서는 저장 속성을 정의할 수 없음으로 계산 속성으로 변경해준다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UICollectionView</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="c1">// 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>하지만 이 방식도 UItableView, UICollectionVIew각각마다 만들어줘야하는 불편함이 있다.  반복을 더 줄일 수 있다.<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// ReuseIdentifiable 채택</span>
<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="p">,</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>프로토콜을 활용해서 해결하자. 프로토콜 이름은 아래 컨벤션을 따르면 좋다.<br />
https://www.swift.org/documentation/api-design-guidelines/<br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이를 활용하면 Nib파일을 등록할때도 적용할 수 있다. NibCell을 상수로 사용하지 않고 프로토로 해결해보자.<br />
<br /></p>

<h2 id="최종-코드">최종 코드</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">protocol</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">),</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UITableViewCell</span><span class="p">:</span> <span class="kt">Nibbed</span><span class="p">,</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{}</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="c1">// let cellNib = UINib(nibName: "NibCell", bundle: nil)</span>
        
        <span class="c1">// self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell")</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[코드 재사용 /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } 지금까지 재사용되는 셀은 고유한 식별자를 상수로 넣어주는데 보통 클래스 명을 써주었다. 프로그래밍 하면서 상수가 있는 부분은 최대한 피하는게 좋다. 이유는 상수를 재사용할 수도 있고 오타가 발생할 수 있기 때문이다. class StoryboardCell: UITableViewCell { // 변수로 static let reuseIdentifier: String = "StoryboardCell" @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } 그래서 셀에서 static으로 상수로 추가해둔다. 이 방법도 충분하지만 조금 더 편하게 할 수 있다. UITableviewCell 자체가 전부 reuseIdentifier라는 static변수를 가질 수 있게 하면 더 편리해질 수 있다. extension UITableViewCell { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } 참고로 확장에서는 저장 속성을 정의할 수 없음으로 계산 속성으로 변경해준다. extension UITableViewCell { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } extension UICollectionView { static var reuseIdentifier: String { return String(describing: Self.self) // 현재 타입.현재 타입의 타입 그자체, 현재 타입의 타입 객체(메타타입) } } 하지만 이 방식도 UItableView, UICollectionVIew각각마다 만들어줘야하는 불편함이 있다. 반복을 더 줄일 수 있다. protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } // ReuseIdentifiable 채택 class StoryboardCell: UITableViewCell, ReuseIdentifiable { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } 프로토콜을 활용해서 해결하자. 프로토콜 이름은 아래 컨벤션을 따르면 좋다. https://www.swift.org/documentation/api-design-guidelines/ class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } 이를 활용하면 Nib파일을 등록할때도 적용할 수 있다. NibCell을 상수로 사용하지 않고 프로토로 해결해보자. 최종 코드 import UIKit protocol Nibbed { static var uinib: UINib { get } } extension Nibbed { static var uinib: UINib { return UINib(nibName: String(describing: Self.self), bundle: nil) } } protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } extension UITableViewCell: Nibbed, ReuseIdentifiable {} class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. // let cellNib = UINib(nibName: "NibCell", bundle: nil) // self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) self.myTableView.dataSource = self self.myTableView.delegate = self } }]]></summary></entry><entry><title type="html">[TableView] 8. 데이터 소스 이해, 따로써보기</title><link href="http://localhost:4000/UIKit-tableView8/" rel="alternate" type="text/html" title="[TableView] 8. 데이터 소스 이해, 따로써보기" /><published>2025-05-13T00:00:00+00:00</published><updated>2025-05-13T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView8</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView8/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="8-데이터-소스-이해-따로써보기">8. 데이터 소스 이해, 따로써보기</h2>

<h2 id="테이블-뷰-만들기list">테이블 뷰 만들기(List)</h2>

<ul>
  <li>테이블뷰 컨트롤러로 만들기(기능이 한정적) vs 일반 뷰 컨트롤러로 만들기</li>
  <li>우리는 일반 뷰 컨트롤러를 주로 쓰자</li>
  <li>구성
    <ul>
      <li>
        <p>데이터 소스 - 데이터와 연관, 셀의 종류를 정하기, 보여줄 셀의 개수가 몇개인지 정하기</p>

        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{}</span>
        
  <span class="kd">extension</span> <span class="nv">viewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
      <span class="c1">/// 섹션 내의 셀 개수를 반환하는 메서드</span>
      <span class="c1">/// - Parameters:</span>
      <span class="c1">///   - tableView: 데이터를 표시할 테이블 뷰</span>
      <span class="c1">///   - section: 현재 섹션 인덱스</span>
      <span class="c1">/// - Returns: 해당 섹션에 표시할 행(row)의 개수</span>
      <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
          <span class="c1">// 예: return items.count</span>
      <span class="p">}</span>
            
      <span class="c1">/// 각 행에 표시될 셀을 반환하는 메서드</span>
      <span class="c1">/// - Parameters:</span>
      <span class="c1">///   - tableView: 셀을 표시할 테이블 뷰</span>
      <span class="c1">///   - indexPath: 현재 행의 위치 정보 (섹션, row)</span>
      <span class="c1">/// - Returns: 구성된 UITableViewCell 객체</span>
      <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
          <span class="c1">// 예:</span>
          <span class="c1">// let cell = tableView.dequeueReusableCell(withIdentifier: "CellIdentifier", for: indexPath)</span>
          <span class="c1">// cell.textLabel?.text = items[indexPath.row]</span>
          <span class="c1">// return cell</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>        </div>
      </li>
      <li>델리겟 - 이벤트 처리(특정 셀 선택) = 테이블뷰에 대한 액션</li>
      <li>셀 - 테이블뷰에 들어가는 알맹이</li>
    </ul>
  </li>
</ul>

<h2 id="datasource를-따로-빼보기">DataSource를 따로 빼보기</h2>

<h3 id="기존-코드">기존 코드</h3>

<p>Cell 파일은 수정 x</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">Nibbed</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">uinib</span><span class="p">:</span> <span class="kt">UINib</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">),</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span>
    <span class="c1">// 로직에 대한 정의는 Extension에서 간능</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">String</span><span class="p">(</span><span class="nv">describing</span><span class="p">:</span> <span class="k">Self</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">UITableViewCell</span><span class="p">:</span> <span class="kt">Nibbed</span> <span class="p">{}</span>
<span class="kd">extension</span> <span class="kt">UITableViewCell</span> <span class="p">:</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{</span> <span class="p">}</span>
<span class="kd">extension</span> <span class="kt">UITableViewHeaderFooterView</span> <span class="p">:</span> <span class="kt">ReuseIdentifiable</span> <span class="p">{}</span>

<span class="kd">class</span> <span class="kt">StoryboardCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 변수로</span>
    <span class="c1">//static let reuseIdentifier: String = "StoryboardCell"</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="c1">/// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">/// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- awakeFromNib()"</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="수정된-코드">수정된 코드</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MyDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dataSource</span><span class="p">:</span> <span class="kt">MyDataSource</span> <span class="o">=</span> <span class="kt">MyDataSource</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">StoryboardListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="niblistviewcontroller도-mydatasource로수정-가능">NibListViewController도 MyDataSource로수정 가능</h2>

<h3 id="기존-코드-1">기존 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="c1">// let cellNib = UINib(nibName: "NibCell", bundle: nil)</span>
        
        <span class="c1">// self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell")</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="수정된-코드-1">수정된 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MyDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="kd">enum</span> <span class="kt">ListType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">storyboard</span>
        <span class="k">case</span> <span class="n">nib</span>
        <span class="k">case</span> <span class="n">code</span>
        <span class="k">case</span> <span class="n">cellConfig</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">listType</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">()</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">listType</span> <span class="o">=</span> <span class="n">type</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 셀을 등록하는 소스 관련</span>
    <span class="c1">/// 셀을 등록</span>
    <span class="c1">/// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다</span>
    <span class="c1">/// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell")</span>
    <span class="c1">/// - Parameter tableView: 등록할 테이블뷰</span>
    <span class="kd">func</span> <span class="nf">registerCells</span><span class="p">(</span><span class="n">with</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: -  테이블뷰 데이터 소스 관련</span>
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        
        <span class="k">switch</span> <span class="n">listType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">storyboard</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">nib</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">code</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">cellConfig</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    
    <span class="k">var</span> <span class="nv">dataSource</span><span class="p">:</span> <span class="kt">MyDataSource</span> <span class="o">=</span> <span class="kt">MyDataSource</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">nib</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier)</span>
        
        <span class="c1">// 셀을 등록</span>
        <span class="k">self</span><span class="o">.</span><span class="n">dataSource</span><span class="o">.</span><span class="nf">registerCells</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="cellconfigurationlistviewcontroller도-mydatasource로수정-가능">CellConfigurationListViewController도 MyDataSource로수정 가능</h2>

<h3 id="기존-코드-2">기존 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="c1">// cell.titleLabel.text = cellData.title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="c1">// cell.bodyLabel.text = cellData.body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        
        <span class="c1">// 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="수정된-코드-2">수정된 코드</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MyDataSource</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="kd">enum</span> <span class="kt">ListType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="n">storyboard</span>
        <span class="k">case</span> <span class="n">nib</span>
        <span class="k">case</span> <span class="n">code</span>
        <span class="k">case</span> <span class="n">cellConfig</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">listType</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">convenience</span> <span class="nf">init</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="kt">ListType</span> <span class="o">=</span> <span class="o">.</span><span class="n">storyboard</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">listType</span> <span class="o">=</span> <span class="n">type</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - 셀을 등록하는 소스 관련</span>
    <span class="c1">/// 셀을 등록</span>
    <span class="c1">/// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다</span>
    <span class="c1">/// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell")</span>
    <span class="c1">/// - Parameter tableView: 등록할 테이블뷰</span>
    <span class="kd">func</span> <span class="nf">registerCells</span><span class="p">(</span><span class="n">with</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">/// Nib 방식으로 만든 셀(NibCell.xib 파일)을 테이블 뷰에 등록</span>
        <span class="c1">/// - NibCell.uinib : UINib(nibName: "NibCell", bundle: nil) 을 반환</span>
        <span class="c1">/// - NibCell.reuseIdentifier : "NibCell" 문자열을 반환 (보통 클래스명을 기반으로 자동 생성)</span>
        <span class="c1">/// → 이후 dequeue 시 이 identifier로 셀을 재사용할 수 있게 됨</span>
        <span class="c1">/// tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier)</span>
        
        <span class="c1">/// 코드로만 구현된 셀 클래스를 테이블 뷰에 등록</span>
        <span class="c1">/// - CellConfigTableViewCell.self : 클래스 자체를 등록</span>
        <span class="c1">/// - reuseIdentifier : "CellConfigTableViewCell" 문자열</span>
        <span class="c1">/// → register(class:) 방식은 .xib 없이 순수 코드로 UI 구성한 셀에 사용</span>
        <span class="c1">/// tableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: CellConfigTableViewCell.reuseIdentifier)</span>
        <span class="k">switch</span> <span class="n">listType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">nib</span><span class="p">:</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">NibCell</span><span class="o">.</span><span class="n">uinib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
            
        <span class="k">case</span> <span class="o">.</span><span class="nv">code</span><span class="p">:</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
            
        <span class="k">case</span> <span class="o">.</span><span class="nv">cellConfig</span><span class="p">:</span>
            <span class="n">tableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">)</span>
            
        <span class="k">case</span> <span class="o">.</span><span class="nv">storyboard</span><span class="p">:</span>
            <span class="c1">// ❌ 스토리보드는 register 필요 없음!</span>
            <span class="k">break</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: -  테이블뷰 데이터 소스 관련</span>
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        
        <span class="k">switch</span> <span class="n">listType</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">storyboard</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">StoryboardCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">StoryboardCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">nib</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">NibCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">code</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CodeCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span> <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>   <span class="c1">/// 셀의 서브 타이틀 설정</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">cellConfig</span><span class="p">:</span>
            <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="n">reuseIdentifier</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
            <span class="p">}</span>
            <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
            <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
            <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
            <span class="k">return</span> <span class="n">cell</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDummies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    <span class="k">var</span> <span class="nv">dataSource</span><span class="p">:</span> <span class="kt">MyDataSource</span> <span class="o">=</span> <span class="kt">MyDataSource</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">cellConfig</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
<span class="c1">//        self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell")</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">dataSource</span><span class="o">.</span><span class="nf">registerCells</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">myTableView</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[8. 데이터 소스 이해, 따로써보기 테이블 뷰 만들기(List) 테이블뷰 컨트롤러로 만들기(기능이 한정적) vs 일반 뷰 컨트롤러로 만들기 우리는 일반 뷰 컨트롤러를 주로 쓰자 구성 데이터 소스 - 데이터와 연관, 셀의 종류를 정하기, 보여줄 셀의 개수가 몇개인지 정하기 class viewController: UIViewController {} extension viewController: UITableViewDataSource { /// 섹션 내의 셀 개수를 반환하는 메서드 /// - Parameters: /// - tableView: 데이터를 표시할 테이블 뷰 /// - section: 현재 섹션 인덱스 /// - Returns: 해당 섹션에 표시할 행(row)의 개수 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { // 예: return items.count } /// 각 행에 표시될 셀을 반환하는 메서드 /// - Parameters: /// - tableView: 셀을 표시할 테이블 뷰 /// - indexPath: 현재 행의 위치 정보 (섹션, row) /// - Returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { // 예: // let cell = tableView.dequeueReusableCell(withIdentifier: "CellIdentifier", for: indexPath) // cell.textLabel?.text = items[indexPath.row] // return cell } } 델리겟 - 이벤트 처리(특정 셀 선택) = 테이블뷰에 대한 액션 셀 - 테이블뷰에 들어가는 알맹이 DataSource를 따로 빼보기 기존 코드 Cell 파일은 수정 x protocol Nibbed { static var uinib: UINib { get } } extension Nibbed { static var uinib: UINib { return UINib(nibName: String(describing: Self.self), bundle: nil) } } protocol ReuseIdentifiable { // 프로토콜에서 로직을 정의할 수 없어서 가져올 수 있도록 설정 static var reuseIdentifier: String { get } } extension ReuseIdentifiable { // 로직에 대한 정의는 Extension에서 간능 static var reuseIdentifier: String { return String(describing: Self.self) } } extension UITableViewCell: Nibbed {} extension UITableViewCell : ReuseIdentifiable { } extension UITableViewHeaderFooterView : ReuseIdentifiable {} class StoryboardCell: UITableViewCell { // 변수로 //static let reuseIdentifier: String = "StoryboardCell" @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! /// 1. 셀을 스토리보드에 추가하거나 Nib파일에 추가하게 되면 이 자체의 라이프사이클이 생긴다. awakeFromNib override func awakeFromNib() { /// 2. 상속을 한것이기 때문에 부모에 있는 awakeFromNib 로직을 터트려줘야한다 super.awakeFromNib() print(#fileID, #function, #line, "- awakeFromNib()") self.backgroundColor = .systemYellow } } import UIKit class StoryboardListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) override func viewDidLoad() { super.viewDidLoad() self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension StoryboardListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension StoryboardListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 수정된 코드 import UIKit class MyDataSource: NSObject, UITableViewDataSource { var dummySections: [DummySection] = DummySection.getDummies() override init() { super.init() } /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } } import UIKit class StoryboardListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dataSource: MyDataSource = MyDataSource() override func viewDidLoad() { super.viewDidLoad() self.myTableView.dataSource = dataSource self.myTableView.delegate = self } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension StoryboardListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } NibListViewController도 MyDataSource로수정 가능 기존 코드 import UIKit class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. // let cellNib = UINib(nibName: "NibCell", bundle: nil) // self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension NibListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "NibCell", for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension NibListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 수정된 코드 import UIKit class MyDataSource: NSObject, UITableViewDataSource { enum ListType { case storyboard case nib case code case cellConfig } var listType: ListType = .storyboard var dummySections: [DummySection] = DummySection.getDummies() override init() { super.init() } convenience init(type: ListType = .storyboard) { self.init() self.listType = type } // MARK: - 셀을 등록하는 소스 관련 /// 셀을 등록 /// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다 /// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell") /// - Parameter tableView: 등록할 테이블뷰 func registerCells(with tableView: UITableView) { tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) } // MARK: - 테이블뷰 데이터 소스 관련 /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 switch listType { case .storyboard: guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .nib: guard let cell = tableView.dequeueReusableCell(withIdentifier: NibCell.reuseIdentifier, for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .code: guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .cellConfig: guard let cell = tableView.dequeueReusableCell(withIdentifier: CellConfigTableViewCell.reuseIdentifier, for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } } } import UIKit class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dataSource: MyDataSource = MyDataSource(type: .nib) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // self.myTableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) // 셀을 등록 self.dataSource.registerCells(with: myTableView) self.myTableView.dataSource = dataSource self.myTableView.delegate = self } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension NibListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } CellConfigurationListViewController도 MyDataSource로수정 가능 기존 코드 import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CellConfigurationListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 // cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 // cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 // 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근 cell.title = cellData.title cell.body = cellData.body return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 수정된 코드 import UIKit class MyDataSource: NSObject, UITableViewDataSource { enum ListType { case storyboard case nib case code case cellConfig } var listType: ListType = .storyboard var dummySections: [DummySection] = DummySection.getDummies(10) override init() { super.init() } convenience init(type: ListType = .storyboard) { self.init() self.listType = type } // MARK: - 셀을 등록하는 소스 관련 /// 셀을 등록 /// 스토리보드에서 셀을 추가하면 Xcode가 내부적으로 셀을 자동 등록한다 /// 이코드가 자동 등록된다고 생각 tableView.dequeueReusableCell(withIdentifier: "StoryboardCell") /// - Parameter tableView: 등록할 테이블뷰 func registerCells(with tableView: UITableView) { /// Nib 방식으로 만든 셀(NibCell.xib 파일)을 테이블 뷰에 등록 /// - NibCell.uinib : UINib(nibName: "NibCell", bundle: nil) 을 반환 /// - NibCell.reuseIdentifier : "NibCell" 문자열을 반환 (보통 클래스명을 기반으로 자동 생성) /// → 이후 dequeue 시 이 identifier로 셀을 재사용할 수 있게 됨 /// tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) /// 코드로만 구현된 셀 클래스를 테이블 뷰에 등록 /// - CellConfigTableViewCell.self : 클래스 자체를 등록 /// - reuseIdentifier : "CellConfigTableViewCell" 문자열 /// → register(class:) 방식은 .xib 없이 순수 코드로 UI 구성한 셀에 사용 /// tableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: CellConfigTableViewCell.reuseIdentifier) switch listType { case .nib: tableView.register(NibCell.uinib, forCellReuseIdentifier: NibCell.reuseIdentifier) case .code: tableView.register(CodeCell.self, forCellReuseIdentifier: CodeCell.reuseIdentifier) case .cellConfig: tableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: CellConfigTableViewCell.reuseIdentifier) case .storyboard: // ❌ 스토리보드는 register 필요 없음! break } } // MARK: - 테이블뷰 데이터 소스 관련 /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 switch listType { case .storyboard: guard let cell = tableView.dequeueReusableCell(withIdentifier: StoryboardCell.reuseIdentifier, for: indexPath) as? StoryboardCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .nib: guard let cell = tableView.dequeueReusableCell(withIdentifier: NibCell.reuseIdentifier, for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .code: guard let cell = tableView.dequeueReusableCell(withIdentifier: CodeCell.reuseIdentifier, for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.titleLabel.text = cellData.title /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.bodyLabel.text = cellData.body /// 셀의 서브 타이틀 설정 return cell case .cellConfig: guard let cell = tableView.dequeueReusableCell(withIdentifier: CellConfigTableViewCell.reuseIdentifier, for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } } } import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDummies(10) var dataSource: MyDataSource = MyDataSource(type: .cellConfig) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 // self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.dataSource.registerCells(with: myTableView) self.myTableView.dataSource = dataSource self.myTableView.delegate = self } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 6. Cell Configuration</title><link href="http://localhost:4000/UIKit-tableView6/" rel="alternate" type="text/html" title="[TableView] 6. Cell Configuration" /><published>2025-05-12T00:00:00+00:00</published><updated>2025-05-12T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView6</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView6/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="cell-configuration-알아보기">Cell Configuration 알아보기</h2>

<p>Cell Configuration은 iOS 14+부터 도입된 기능으로, 셀의 UI 구성과 데이터 설정을 <strong>보다 선언적으로 처리</strong>할 수 있도록 도와준다.</p>

<p>기존에는 셀마다 <code class="language-plaintext highlighter-rouge">IBOutlet</code>을 연결하거나, <code class="language-plaintext highlighter-rouge">cell.textLabel.text = ...</code> 방식으로 직접 설정했지만,  <br />
Cell Configuration은 UI와 데이터를 분리하고 <strong>설정 구조체를 통해 셀 내부 뷰를 생성 및 업데이트</strong>하는 구조다.</p>

<hr />
<h3 id="화면-구성-예시">화면 구성 예시</h3>

<p><img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160118427.png" alt="셀1" width="80%" /></p>

<ul>
  <li>테이블뷰를 스토리보드에서 추가하고, 상하좌우 제약을 0으로 설정한다</li>
</ul>

<div style="display: flex; justify-content: center; gap: 20px;">
  <img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160616153.png" alt="셀1" width="80%" />
  <img src="/assets/img/2025-05-12-%5BUIKit%5D-tableView6/image-20250512160715945.png" alt="셀2" width="80%" />
</div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Storyboard ID</code>는 <code class="language-plaintext highlighter-rouge">CellConfigurationListViewController</code>로 지정</li>
  <li><code class="language-plaintext highlighter-rouge">Reference ID</code>도 동일하게 맞춰야 코드에서 호출 가능</li>
</ul>

<hr />

<h2 id="구성">구성</h2>

<p><code class="language-plaintext highlighter-rouge">Cell Configuration</code>을 구성하는 핵심 요소는 다음과 같다:</p>

<table>
  <thead>
    <tr>
      <th>요소</th>
      <th>설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIContentConfiguration</code></td>
      <td>데이터 설정을 위한 구조체 역할 (예: <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UIContentView</code></td>
      <td>실제 UI를 그리는 뷰 (예: <code class="language-plaintext highlighter-rouge">CellConfigurationView</code>)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">UITableViewCell</code></td>
      <td>시스템이 자동으로 <code class="language-plaintext highlighter-rouge">UIContentView</code>를 삽입해주는 셀 컨테이너 (<code class="language-plaintext highlighter-rouge">CellConfigTableViewCell</code>)</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="1-mycellconfigurationswift">1. MyCellConfiguration.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">MyCellConfiguration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>

    <span class="kd">func</span> <span class="nf">makeContentView</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">UIView</span> <span class="o">&amp;</span> <span class="kt">UIContentView</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">updated</span><span class="p">(</span><span class="k">for</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UIConfigurationState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">updated</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">state</span> <span class="o">=</span> <span class="n">state</span> <span class="k">as?</span> <span class="kt">UICellConfigurationState</span><span class="p">,</span> <span class="n">state</span><span class="o">.</span><span class="n">isSelected</span> <span class="p">{</span>
            <span class="n">updated</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"선택됨: "</span> <span class="o">+</span> <span class="n">updated</span><span class="o">.</span><span class="n">title</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">updated</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>데이터(title, body)를 담고 있고, 상태(state)에 따라 동적으로 내용도 바꿀 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">makeContentView()</code>를 통해 실제 UIContentView (<code class="language-plaintext highlighter-rouge">CellConfigurationView</code>) 생성</li>
</ul>

<hr />

<h3 id="2-cellconfigurationviewswift">2. CellConfigurationView.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CellConfigurationView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">UIContentView</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">customConfiguration</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="n">newValue</span> <span class="k">as?</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
                <span class="nf">applyConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">configureUI</span><span class="p">()</span>
        <span class="nf">applyConfig</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyConfig</span><span class="p">(</span><span class="n">_</span> <span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customConfiguration</span> <span class="o">=</span> <span class="n">config</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">title</span>
        <span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">config</span><span class="o">.</span><span class="n">body</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UIView</code>이자 <code class="language-plaintext highlighter-rouge">UIContentView</code>를 채택</li>
  <li>외부에서 전달받은 <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>을 적용해서 <code class="language-plaintext highlighter-rouge">UILabel</code>에 반영</li>
  <li>내부적으로 <code class="language-plaintext highlighter-rouge">titleLabel</code>, <code class="language-plaintext highlighter-rouge">bodyLabel</code>을 AutoLayout으로 배치</li>
</ul>

<hr />

<h3 id="3-cellconfigtableviewcellswift">3. CellConfigTableViewCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">CellConfigTableViewCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span> <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span> <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">updateConfiguration</span><span class="p">(</span><span class="n">using</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UICellConfigurationState</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">MyCellConfiguration</span><span class="p">()</span><span class="o">.</span><span class="nf">updated</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        <span class="n">config</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">config</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentConfiguration</span> <span class="o">=</span> <span class="n">config</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">setNeedsUpdateConfiguration()</code> 호출 시 시스템이 <code class="language-plaintext highlighter-rouge">updateConfiguration(using:)</code>을 호출</li>
  <li><code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">body</code>를 가지고 <code class="language-plaintext highlighter-rouge">MyCellConfiguration</code>을 만든 뒤 <code class="language-plaintext highlighter-rouge">contentConfiguration</code>에 설정</li>
  <li>시스템은 이 설정을 보고 자동으로 <code class="language-plaintext highlighter-rouge">CellConfigurationView</code>를 생성 및 삽입</li>
</ul>

<hr />

<h3 id="4-cellconfigurationlistviewcontrollerswift">4. CellConfigurationListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="k">let</span> <span class="nv">cellData</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
    <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
    <span class="k">return</span> <span class="n">cell</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>더미 데이터를 불러와 <code class="language-plaintext highlighter-rouge">title</code>, <code class="language-plaintext highlighter-rouge">body</code>만 할당하면 자동으로 UI가 구성된다</li>
  <li>직접적으로 <code class="language-plaintext highlighter-rouge">UILabel</code>에 접근하거나 <code class="language-plaintext highlighter-rouge">cell.subviews</code>를 조작하지 않아도 된다</li>
</ul>

<hr />

<h2 id="전체-예제-코드">전체 예제 코드</h2>

<h3 id="1-mycellconfigurationswift-1">1. MyCellConfiguration.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 커스텀 셀에 대한 설정</span>
<span class="kd">struct</span> <span class="kt">MyCellConfiguration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span><span class="p">,</span> <span class="kt">Hashable</span> <span class="p">{</span>
    
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
    
    <span class="c1">// 보여줄 화면</span>
    <span class="c1">// UIView이면서 UIContentView인 애를 반화내라</span>
    <span class="kd">func</span> <span class="nf">makeContentView</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kd">any</span> <span class="kt">UIView</span> <span class="o">&amp;</span> <span class="kt">UIContentView</span> <span class="p">{</span>
        <span class="k">return</span> <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
    
    
    <span class="c1">/// 셀 상태가 변경되면 발동</span>
    <span class="c1">/// - Parameter state: 셀 상태</span>
    <span class="c1">/// - Returns: 셀 설정 자체</span>
    <span class="kd">func</span> <span class="nf">updated</span><span class="p">(</span><span class="k">for</span> <span class="nv">state</span><span class="p">:</span> <span class="kd">any</span> <span class="kt">UIConfigurationState</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">state</span> <span class="o">=</span> <span class="n">state</span> <span class="k">as?</span> <span class="kt">UICellConfigurationState</span> <span class="p">{</span>
            <span class="k">var</span> <span class="nv">updatedConfig</span> <span class="o">=</span> <span class="k">self</span>
            
            <span class="k">if</span> <span class="n">state</span><span class="o">.</span><span class="n">isSelected</span> <span class="p">{</span>
                <span class="n">updatedConfig</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="s">"선택됨: "</span> <span class="o">+</span> <span class="n">updatedConfig</span><span class="o">.</span><span class="n">title</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">updatedConfig</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="2-cellconfigurationviewswift-1">2. CellConfigurationView.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 뷰 안에 컨텐츠 Config를 가지고 있는 뷰</span>
<span class="kd">class</span> <span class="kt">CellConfigurationView</span><span class="p">:</span> <span class="kt">UIView</span><span class="p">,</span> <span class="kt">UIContentView</span> <span class="p">{</span>
    
    <span class="c1">// 여러 데이터를 가진 덩어리</span>
    <span class="kd">fileprivate</span> <span class="k">var</span> <span class="nv">customConfiguration</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="o">!</span>
    
    <span class="c1">// 데이터와 UI를 연결</span>
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">_</span> <span class="nv">newConfiguration</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">customConfiguration</span> <span class="o">=</span> <span class="n">newConfiguration</span>
        <span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newConfiguration</span><span class="o">.</span><span class="n">title</span>
        <span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">newConfiguration</span><span class="o">.</span><span class="n">body</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">configuration</span><span class="p">:</span> <span class="kt">UIContentConfiguration</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="n">customConfiguration</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span>
            <span class="k">if</span> <span class="k">let</span> <span class="nv">newConfiguration</span> <span class="o">=</span> <span class="n">newValue</span> <span class="k">as?</span> <span class="kt">MyCellConfiguration</span> <span class="p">{</span>
                <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">newConfiguration</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
   
    <span class="nf">init</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">frame</span><span class="p">:</span> <span class="o">.</span><span class="n">zero</span><span class="p">)</span>
        <span class="nf">configureUI</span><span class="p">()</span>
        <span class="nf">applyConfigAndChangeUI</span><span class="p">(</span><span class="n">config</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">textColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemBlue</span>
        
        <span class="c1">// 타이틀 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
        
        <span class="c1">// 바디 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">bodyLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CellConfigurationView_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CellConfigurationView</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="kt">MyCellConfiguration</span><span class="p">(</span><span class="nv">title</span><span class="p">:</span> <span class="s">"오늘도 코딩"</span><span class="p">,</span> <span class="nv">body</span><span class="p">:</span> <span class="s">"바디부분"</span><span class="p">))</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<h3 id="3-cellconfigtableviewcellswift-1">3. CellConfigTableViewCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="c1">// 기존 테이블뷰 셀은 데이터만 신경쓰면 됨</span>
<span class="kd">class</span> <span class="kt">CellConfigTableViewCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="c1">// 데이터 변경시 UI 변경해라</span>
    <span class="k">var</span> <span class="nv">title</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span> <span class="p">{</span>
        <span class="k">didSet</span> <span class="p">{</span>
            <span class="nf">setNeedsUpdateConfiguration</span><span class="p">()</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">updateConfiguration</span><span class="p">(</span><span class="n">using</span> <span class="nv">state</span><span class="p">:</span> <span class="kt">UICellConfigurationState</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">updateConfiguration</span><span class="p">(</span><span class="nv">using</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        
        <span class="k">var</span> <span class="nv">contentConfig</span> <span class="o">=</span> <span class="kt">MyCellConfiguration</span><span class="p">()</span><span class="o">.</span><span class="nf">updated</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">state</span><span class="p">)</span>
        <span class="n">contentConfig</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
        <span class="n">contentConfig</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentConfiguration</span> <span class="o">=</span> <span class="n">contentConfig</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CellConfigTableViewCell_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CodeCell</span><span class="p">()</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>
</code></pre></div></div>

<h3 id="4-cellconfigurationlistviewcontrollerswift-1">4. CellConfigurationListViewController.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CellConfigTableViewCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CellConfigTableViewCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CellConfigTableViewCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="c1">// cell.titleLabel.text = cellData.title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="c1">// cell.bodyLabel.text = cellData.body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        
        <span class="c1">// 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        <span class="k">return</span> <span class="n">cell</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CellConfigurationListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[Cell Configuration 알아보기 Cell Configuration은 iOS 14+부터 도입된 기능으로, 셀의 UI 구성과 데이터 설정을 보다 선언적으로 처리할 수 있도록 도와준다. 기존에는 셀마다 IBOutlet을 연결하거나, cell.textLabel.text = ... 방식으로 직접 설정했지만, Cell Configuration은 UI와 데이터를 분리하고 설정 구조체를 통해 셀 내부 뷰를 생성 및 업데이트하는 구조다. 화면 구성 예시 테이블뷰를 스토리보드에서 추가하고, 상하좌우 제약을 0으로 설정한다 Storyboard ID는 CellConfigurationListViewController로 지정 Reference ID도 동일하게 맞춰야 코드에서 호출 가능 구성 Cell Configuration을 구성하는 핵심 요소는 다음과 같다: 요소 설명 UIContentConfiguration 데이터 설정을 위한 구조체 역할 (예: MyCellConfiguration) UIContentView 실제 UI를 그리는 뷰 (예: CellConfigurationView) UITableViewCell 시스템이 자동으로 UIContentView를 삽입해주는 셀 컨테이너 (CellConfigTableViewCell) 1. MyCellConfiguration.swift struct MyCellConfiguration: UIContentConfiguration, Hashable { var title: String = "" var body: String = "" func makeContentView() -&gt; UIView &amp; UIContentView { return CellConfigurationView(config: self) } func updated(for state: UIConfigurationState) -&gt; MyCellConfiguration { var updated = self if let state = state as? UICellConfigurationState, state.isSelected { updated.title = "선택됨: " + updated.title } return updated } } 데이터(title, body)를 담고 있고, 상태(state)에 따라 동적으로 내용도 바꿀 수 있다. makeContentView()를 통해 실제 UIContentView (CellConfigurationView) 생성 2. CellConfigurationView.swift class CellConfigurationView: UIView, UIContentView { var configuration: UIContentConfiguration { get { customConfiguration } set { if let config = newValue as? MyCellConfiguration { applyConfig(config) } } } init(config: MyCellConfiguration) { super.init(frame: .zero) configureUI() applyConfig(config) } fileprivate func applyConfig(_ config: MyCellConfiguration) { self.customConfiguration = config titleLabel.text = config.title bodyLabel.text = config.body } } UIView이자 UIContentView를 채택 외부에서 전달받은 MyCellConfiguration을 적용해서 UILabel에 반영 내부적으로 titleLabel, bodyLabel을 AutoLayout으로 배치 3. CellConfigTableViewCell.swift class CellConfigTableViewCell: UITableViewCell { var title: String = "" { didSet { setNeedsUpdateConfiguration() } } var body: String = "" { didSet { setNeedsUpdateConfiguration() } } override func updateConfiguration(using state: UICellConfigurationState) { var config = MyCellConfiguration().updated(for: state) config.title = title config.body = body self.contentConfiguration = config } } setNeedsUpdateConfiguration() 호출 시 시스템이 updateConfiguration(using:)을 호출 title, body를 가지고 MyCellConfiguration을 만든 뒤 contentConfiguration에 설정 시스템은 이 설정을 보고 자동으로 CellConfigurationView를 생성 및 삽입 4. CellConfigurationListViewController.swift func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let cellData = dummySections[indexPath.section].rows[indexPath.row] cell.title = cellData.title cell.body = cellData.body return cell } 더미 데이터를 불러와 title, body만 할당하면 자동으로 UI가 구성된다 직접적으로 UILabel에 접근하거나 cell.subviews를 조작하지 않아도 된다 전체 예제 코드 1. MyCellConfiguration.swift import UIKit // 커스텀 셀에 대한 설정 struct MyCellConfiguration: UIContentConfiguration, Hashable { var title: String = "" var body: String = "" // 보여줄 화면 // UIView이면서 UIContentView인 애를 반화내라 func makeContentView() -&gt; any UIView &amp; UIContentView { return CellConfigurationView(config: self) } /// 셀 상태가 변경되면 발동 /// - Parameter state: 셀 상태 /// - Returns: 셀 설정 자체 func updated(for state: any UIConfigurationState) -&gt; MyCellConfiguration { if let state = state as? UICellConfigurationState { var updatedConfig = self if state.isSelected { updatedConfig.title = "선택됨: " + updatedConfig.title } return updatedConfig } return self } } 2. CellConfigurationView.swift import UIKit // 뷰 안에 컨텐츠 Config를 가지고 있는 뷰 class CellConfigurationView: UIView, UIContentView { // 여러 데이터를 가진 덩어리 fileprivate var customConfiguration: MyCellConfiguration! // 데이터와 UI를 연결 fileprivate func applyConfigAndChangeUI(_ newConfiguration: MyCellConfiguration) { self.customConfiguration = newConfiguration titleLabel.text = newConfiguration.title bodyLabel.text = newConfiguration.body } var configuration: UIContentConfiguration { get { customConfiguration } set { if let newConfiguration = newValue as? MyCellConfiguration { applyConfigAndChangeUI(newConfiguration) } } } init(config: MyCellConfiguration) { super.init(frame: .zero) configureUI() applyConfigAndChangeUI(config) } lazy var titleLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨" label.numberOfLines = 1 label.textColor = .white label.font = UIFont.systemFont(ofSize: 14, weight: .bold) return label }() lazy var bodyLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨" label.numberOfLines = 0 label.textColor = .white label.font = UIFont.systemFont(ofSize: 12, weight: .regular) return label }() fileprivate func configureUI() { self.backgroundColor = .systemBlue // 타이틀 라벨 설정 self.addSubview(self.titleLabel) NSLayoutConstraint.activate([ titleLabel.topAnchor.constraint(equalTo: self.topAnchor, constant: 10), titleLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 10), titleLabel.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -10), ]) // 바디 라벨 설정 self.addSubview(self.bodyLabel) NSLayoutConstraint.activate([ bodyLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: 10), bodyLabel.leadingAnchor.constraint(equalTo: self.leadingAnchor, constant: 10), bodyLabel.trailingAnchor.constraint(equalTo: self.trailingAnchor, constant: -10), bodyLabel.bottomAnchor.constraint(equalTo: self.bottomAnchor, constant: -10) ]) } required init?(coder: NSCoder) { super.init(coder: coder) } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI struct CellConfigurationView_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CellConfigurationView(config: MyCellConfiguration(title: "오늘도 코딩", body: "바디부분")).getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif 3. CellConfigTableViewCell.swift import UIKit // 기존 테이블뷰 셀은 데이터만 신경쓰면 됨 class CellConfigTableViewCell: UITableViewCell { // 데이터 변경시 UI 변경해라 var title: String = "" { didSet { setNeedsUpdateConfiguration() } } var body: String = "" { didSet { setNeedsUpdateConfiguration() } } override func updateConfiguration(using state: UICellConfigurationState) { super.updateConfiguration(using: state) var contentConfig = MyCellConfiguration().updated(for: state) contentConfig.title = title contentConfig.body = body self.contentConfiguration = contentConfig } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI struct CellConfigTableViewCell_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CodeCell().getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif 4. CellConfigurationListViewController.swift import UIKit class CellConfigurationListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CellConfigTableViewCell.self, forCellReuseIdentifier: "CellConfigTableViewCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CellConfigurationListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CellConfigTableViewCell", for: indexPath) as? CellConfigTableViewCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 // cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 // cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 // 여기서는 UI에 접근하는게 아니라 Cell이 가지고 있는 멤버변수 데이터 자체에 접근 cell.title = cellData.title cell.body = cellData.body return cell } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CellConfigurationListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 5. 코드기반 커스텀 테이블뷰 구현하기</title><link href="http://localhost:4000/UIKit-tableView5/" rel="alternate" type="text/html" title="[TableView] 5. 코드기반 커스텀 테이블뷰 구현하기" /><published>2025-05-11T00:00:00+00:00</published><updated>2025-05-11T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView5</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView5/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="코드기반-커스텀-테이블뷰-구현하기">코드기반 커스텀 테이블뷰 구현하기</h2>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509020704480.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511173004744.png" alt="커스텀셀" width="85%" /></td>
      <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView5/image-20250511181826302.png" alt="커스텀셀" width="85%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Storyboard 커스텀 셀</td>
    <td style="text-align:center;">Nib 커스텀 셀</td>
      <td style="text-align:center;">Code 커스텀 셀</td>
  </tr>
</table>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView5/image-20250511174809378.png" alt="커스텀셀" width="30%" /> <br />
CodeList.xiv파일로 와서 테이블뷰를 드래그해서 추가 후 제약조건을 상하좌우 전부 0으로 해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView5/image-20250511175003817.png" alt="커스텀셀" width="70%" /> <br />
myTableView를 ViewController로 드래그해서 IBOutlet 추가한다. 이떄 추가가안되면 xib파일의 viewController가 연결되있는지 확인한다.<br />
<br /></p>

<h3 id="codecellswift">CodeCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CodeCell.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/11/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CodeCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">1</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
        <span class="n">label</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨"</span>
        <span class="n">label</span><span class="o">.</span><span class="n">numberOfLines</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">label</span><span class="o">.</span><span class="n">font</span> <span class="o">=</span> <span class="kt">UIFont</span><span class="o">.</span><span class="nf">systemFont</span><span class="p">(</span><span class="nv">ofSize</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">label</span>
    <span class="p">}()</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemYellow</span>
        
        <span class="c1">// 타이틀 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">titleLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
        <span class="p">])</span>
        
        <span class="c1">// 바디 라벨 설정</span>
        <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">bodyLabel</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">),</span>
            <span class="n">bodyLabel</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="k">self</span><span class="o">.</span><span class="n">contentView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">10</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="c1">// 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다.</span>
    <span class="k">override</span> <span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="kt">UITableViewCell</span><span class="o">.</span><span class="kt">CellStyle</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">,</span> <span class="nv">reuseIdentifier</span><span class="p">:</span> <span class="n">reuseIdentifier</span><span class="p">)</span> <span class="c1">/// 부모의 로직을 싱행시키는 의미</span>
        <span class="nf">configureUI</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">coder</span><span class="p">:</span> <span class="n">coder</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">layoutSubviews</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">layoutSubviews</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>



<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">extension</span> <span class="kt">UIView</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="kd">struct</span> <span class="kt">ViewRepresentable</span><span class="p">:</span> <span class="kt">UIViewRepresentable</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">uiView</span><span class="p">:</span> <span class="kt">UIView</span>
        <span class="kd">func</span> <span class="nf">updateUIView</span><span class="p">(</span><span class="n">_</span> <span class="nv">uiView</span><span class="p">:</span> <span class="kt">UIViewType</span><span class="p">,</span> <span class="nv">context</span><span class="p">:</span> <span class="kt">Context</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">}</span>
        <span class="kd">func</span> <span class="nf">makeUIView</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="kt">Context</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">UIView</span> <span class="p">{</span>
            <span class="n">uiView</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">getPreview</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">ViewRepresentable</span><span class="p">(</span><span class="nv">uiView</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>

<span class="cp">#if DEBUG</span>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">CodeCell_PreviewProvider_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">CodeCell</span><span class="p">()</span><span class="o">.</span><span class="nf">getPreview</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">previewLayout</span><span class="p">(</span><span class="o">.</span><span class="nf">fixed</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mi">100</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">#endif</span>

</code></pre></div></div>

<h3 id="codelistviewcontroller">CodeListViewController</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  CodeListViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">CodeListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// CodeCell에서는 이 줄만 필요</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">CodeListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">CodeListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="참고-테이블뷰도-완전-코드베이스로-하는법">참고: 테이블뷰도 완전 코드베이스로 하는법</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  MainViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">MainViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"MainViewController loaded"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">codeButtonTapped</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"눌림"</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">vc</span> <span class="o">=</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationController</span><span class="p">?</span><span class="o">.</span><span class="nf">pushViewController</span><span class="p">(</span><span class="n">vc</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  OnlyCodeBaseViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/11/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">tableView</span> <span class="o">=</span> <span class="kt">UITableView</span><span class="p">()</span>
        <span class="n">tableView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="k">return</span> <span class="n">tableView</span>
    <span class="p">}()</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupTableView</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">myTableView</span><span class="p">)</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">),</span>
            <span class="n">myTableView</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">bottomAnchor</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="kt">CodeCell</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">)</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="nf">setupTableView</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"CodeCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">CodeCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">OnlyCodeBaseViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[코드기반 커스텀 테이블뷰 구현하기 Storyboard 커스텀 셀 Nib 커스텀 셀 Code 커스텀 셀 CodeList.xiv파일로 와서 테이블뷰를 드래그해서 추가 후 제약조건을 상하좌우 전부 0으로 해준다. myTableView를 ViewController로 드래그해서 IBOutlet 추가한다. 이떄 추가가안되면 xib파일의 viewController가 연결되있는지 확인한다. CodeCell.swift // // CodeCell.swift // UITableViewTutorial // // Created by 김동현 on 5/11/25. // import UIKit class CodeCell: UITableViewCell { lazy var titleLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨타이틀 라벨" label.numberOfLines = 1 label.font = UIFont.systemFont(ofSize: 14, weight: .bold) return label }() lazy var bodyLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.text = "바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨바디 라벨" label.numberOfLines = 0 label.font = UIFont.systemFont(ofSize: 12, weight: .regular) return label }() fileprivate func configureUI() { self.backgroundColor = .systemYellow // 타이틀 라벨 설정 self.contentView.addSubview(self.titleLabel) NSLayoutConstraint.activate([ titleLabel.topAnchor.constraint(equalTo: self.contentView.topAnchor, constant: 10), titleLabel.leadingAnchor.constraint(equalTo: self.contentView.leadingAnchor, constant: 10), titleLabel.trailingAnchor.constraint(equalTo: self.contentView.trailingAnchor, constant: -10), ]) // 바디 라벨 설정 self.contentView.addSubview(self.bodyLabel) NSLayoutConstraint.activate([ bodyLabel.topAnchor.constraint(equalTo: self.titleLabel.bottomAnchor, constant: 10), bodyLabel.leadingAnchor.constraint(equalTo: self.contentView.leadingAnchor, constant: 10), bodyLabel.trailingAnchor.constraint(equalTo: self.contentView.trailingAnchor, constant: -10), bodyLabel.bottomAnchor.constraint(equalTo: self.contentView.bottomAnchor, constant: -10) ]) } // 원래는 awakefromnib을 타지만 코드로 UI를 진행한다면 awakefromnib을 타지 않는다. override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) { super.init(style: style, reuseIdentifier: reuseIdentifier) /// 부모의 로직을 싱행시키는 의미 configureUI() } required init?(coder: NSCoder) { super.init(coder: coder) } override func layoutSubviews() { super.layoutSubviews() } } #if DEBUG import SwiftUI extension UIView { private struct ViewRepresentable: UIViewRepresentable { let uiView: UIView func updateUIView(_ uiView: UIViewType, context: Context) { } func makeUIView(context: Context) -&gt; some UIView { uiView } } func getPreview() -&gt; some View { ViewRepresentable(uiView: self) } } #endif #if DEBUG import SwiftUI struct CodeCell_PreviewProvider_Previews: PreviewProvider { static var previews: some View { CodeCell().getPreview() .previewLayout(.fixed(width: 200, height: 100)) } } #endif CodeListViewController // // CodeListViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class CodeListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // CodeCell에서는 이 줄만 필요 self.myTableView.register(CodeCell.self, forCellReuseIdentifier: "CodeCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension CodeListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CodeCell", for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension CodeListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } } 참고: 테이블뷰도 완전 코드베이스로 하는법 // // MainViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class MainViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() print("MainViewController loaded") } @IBAction func codeButtonTapped(_ sender: UIButton) { print("눌림") let vc = OnlyCodeBaseViewController() self.navigationController?.pushViewController(vc, animated: true) } } // // OnlyCodeBaseViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/11/25. // import UIKit class OnlyCodeBaseViewController: UIViewController { private let myTableView: UITableView = { let tableView = UITableView() tableView.translatesAutoresizingMaskIntoConstraints = false return tableView }() private func setupTableView() { view.addSubview(myTableView) NSLayoutConstraint.activate([ myTableView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), myTableView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor), myTableView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor), myTableView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor) ]) } private func configureTableView() { myTableView.register(CodeCell.self, forCellReuseIdentifier: "CodeCell") myTableView.dataSource = self myTableView.delegate = self } var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = .white setupTableView() configureTableView() } } /// UITableView의 데이터 관리 역할을 담당 extension OnlyCodeBaseViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "CodeCell", for: indexPath) as? CodeCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension OnlyCodeBaseViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 4. Nib으로 커스텀 테이블뷰 구현하기</title><link href="http://localhost:4000/UIKit-tableView4/" rel="alternate" type="text/html" title="[TableView] 4. Nib으로 커스텀 테이블뷰 구현하기" /><published>2025-05-10T00:00:00+00:00</published><updated>2025-05-10T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView4</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView4/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="nib으로-커스텀-테이블뷰-구현하기">Nib으로 커스텀 테이블뷰 구현하기</h2>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView3/image-20250509020704480.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511173004744.png" alt="커스텀셀" width="85%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Storyboard 커스텀 셀</td>
    <td style="text-align:center;">Nib 커스텀 셀</td>
  </tr>
</table>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511162051512.png" alt="커스텀셀" width="70%" /></p>

<p>파일만들기 -&gt; Cocoa Toucn -&gt; Nib파일이름, 체크박스 체크로 2개의 파일을 만든다. 그러면 Nib파일과, Swift파일이 생성된다.<br />
<br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511163641185.png" alt="커스텀셀" width="70%" /></p>

<p>TitleLabel만들고 ContentView로 드래그하여 Leading, Top, Trailing을 체크해준다. 그리고 이번에는 타이틀 Label의 number of lines를 1로 하자.<br />
<br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511164303585.png" alt="커스텀셀" width="70%" /></p>

<p>BodyLabel을 TitleLabel로 드래그하여 Leading, Vertical Spacing 체크해준다. <br />
그리고 BodyLabel을 ContentView로 드래그하여 Trailing을 채크해준다.(TitleLabel은 한줄이라서..?)<br />
<br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511170258909.png" alt="커스텀셀" width="70%" /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511170350423.png" alt="커스텀셀" width="70%" /></p>

<p>Identifier, Class 설정해준다.<br />
 <br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511170649565.png" alt="커스텀셀" width="70%" /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemMint</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p>IBOutlet 추가한다.<br />
 <br /><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511171224918.png" alt="커스텀셀" width="70%" /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511171534370.png" alt="커스텀셀" width="70%" /></p>

<p>NibListStoryboard에서 테이블만들고 My Table View 이름 지정.해준다. 그리고 이를 NibListViewController에 드래그하여 myTableView만들어준다.<br />
 <br /><br />
<br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>

    <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
    <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>

    <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
    <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이대로 실행하면 에러가난다. Storyboard 방식과 달리 Nib 방식으로 할때는 등록 절차를 직접 해줘야 한다.<br />
 <br /><br />
<br /></p>

<h2 id="전체코드">전체코드</h2>

<h3 id="nibcellxib">NibCell.xib</h3>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView4/image-20250511172511582.png" alt="커스텀셀" width="70%" /></p>

<h3 id="nibcellswift">NibCell.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  NibCell.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/11/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibCell</span><span class="p">:</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">titleLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">bodyLabel</span><span class="p">:</span> <span class="kt">UILabel</span><span class="o">!</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">awakeFromNib</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">awakeFromNib</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">systemMint</span>
    <span class="p">}</span>

    <span class="cm">/*
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)

        // Configure the view for the selected state
    }
     */</span>
<span class="p">}</span>

</code></pre></div></div>

<h3 id="niblistviewcontroller">NibListViewController</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  NibListViewController.swift</span>
<span class="c1">//  UITableViewTutorial</span>
<span class="c1">//</span>
<span class="c1">//  Created by 김동현 on 5/8/25.</span>
<span class="c1">//</span>

<span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">class</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>

    
    <span class="kd">@IBOutlet</span> <span class="k">weak</span> <span class="k">var</span> <span class="nv">myTableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="o">!</span>
    <span class="k">var</span> <span class="nv">dummySections</span><span class="p">:</span> <span class="p">[</span><span class="kt">DummySection</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DummySection</span><span class="o">.</span><span class="nf">getDumies</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">configureTableView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">fileprivate</span> <span class="kd">func</span> <span class="nf">configureTableView</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다.</span>
        <span class="k">let</span> <span class="nv">cellNib</span> <span class="o">=</span> <span class="kt">UINib</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="nf">register</span><span class="p">(</span><span class="n">cellNib</span><span class="p">,</span> <span class="nv">forCellReuseIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">)</span>
        
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">dataSource</span> <span class="o">=</span> <span class="k">self</span>
        <span class="k">self</span><span class="o">.</span><span class="n">myTableView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// UITableView의 데이터 관리 역할을 담당</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 섹션의 타이틀 설정</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForHeaderInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"헤더: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">titleForFooterInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="s">"푸터: "</span> <span class="o">+</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">title</span>
    <span class="p">}</span>
    
    <span class="c1">/// 섹션이 여러개일때만 사용</span>
    <span class="c1">/// 현재 섹션이 몇개인지</span>
    <span class="kd">func</span> <span class="nf">numberOfSections</span><span class="p">(</span><span class="k">in</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 하나의 섹션에 몇개의 rows가 있냐</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">numberOfRowsInSection</span> <span class="nv">section</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">section</span><span class="p">]</span><span class="o">.</span><span class="n">rows</span><span class="o">.</span><span class="n">count</span>
    <span class="p">}</span>
    
    <span class="c1">/// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라</span>
    <span class="c1">/// - indexPath: 셀의 위치를 나타내는 인덱스 경로</span>
    <span class="c1">/// - returns: 구성된 UITableViewCell 객체</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">cellForRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UITableViewCell</span> <span class="p">{</span>
        <span class="c1">/// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함)</span>
        <span class="c1">/// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell")</span>
        
        <span class="c1">// [guard let] 방식</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">cell</span> <span class="o">=</span> <span class="n">tableView</span><span class="o">.</span><span class="nf">dequeueReusableCell</span><span class="p">(</span><span class="nv">withIdentifier</span><span class="p">:</span> <span class="s">"NibCell"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="n">indexPath</span><span class="p">)</span> <span class="k">as?</span> <span class="kt">NibCell</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kt">UITableViewCell</span><span class="p">()</span>
        <span class="p">}</span>
        
        <span class="k">let</span> <span class="nv">sectionData</span><span class="p">:</span> <span class="kt">DummySection</span> <span class="o">=</span> <span class="n">dummySections</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">section</span><span class="p">]</span>
        
        <span class="k">let</span> <span class="nv">cellData</span><span class="p">:</span> <span class="kt">DummyData</span> <span class="o">=</span> <span class="n">sectionData</span><span class="o">.</span><span class="n">rows</span><span class="p">[</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="p">]</span>
        
        <span class="c1">/// 셀의 주 텍스트를 더미 데이터에서 가져오기</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">titleLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">title</span>
        
        <span class="c1">/// 셀의 서브 타이틀 설정</span>
        <span class="n">cell</span><span class="o">.</span><span class="n">bodyLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">cellData</span><span class="o">.</span><span class="n">body</span>
        
        <span class="c1">//cell.detailTextLabel?.numberOfLines = 0</span>
        <span class="k">return</span> <span class="n">cell</span>
        
        <span class="cm">/*
        [if let] 방식
        if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell {
            let sectionData: DummySection = dummySections[indexPath.section]
            
            let cellData: DummyData = sectionData.rows[indexPath.row]
            
            /// 셀의 주 텍스트를 더미 데이터에서 가져오기
            cell.titleLabel.text = cellData.title
            
            /// 셀의 서브 타이틀 설정
            cell.bodyLabel.text = cellData.body
            
            //cell.detailTextLabel?.numberOfLines = 0
            return cell
        } else {
            return UITableViewCell()
        }
        */</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">/// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리</span>
<span class="kd">extension</span> <span class="kt">NibListViewController</span><span class="p">:</span> <span class="kt">UITableViewDelegate</span> <span class="p">{</span>
    <span class="c1">/// 사용자가 특정 셀을 선택했을 때 호출되는 메서드</span>
    <span class="c1">/// - Parameters:</span>
    <span class="c1">///   - tableView: 이벤트가 발생한 테이블 뷰</span>
    <span class="c1">///   - indexPath: 선택된 셀의 위치</span>
    <span class="kd">func</span> <span class="nf">tableView</span><span class="p">(</span><span class="n">_</span> <span class="nv">tableView</span><span class="p">:</span> <span class="kt">UITableView</span><span class="p">,</span> <span class="n">didSelectRowAt</span> <span class="nv">indexPath</span><span class="p">:</span> <span class="kt">IndexPath</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="k">#fileID</span><span class="p">,</span> <span class="k">#function</span><span class="p">,</span> <span class="k">#line</span><span class="p">,</span> <span class="s">"- indexPath: </span><span class="se">\(</span><span class="n">indexPath</span><span class="o">.</span><span class="n">row</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[Nib으로 커스텀 테이블뷰 구현하기 Storyboard 커스텀 셀 Nib 커스텀 셀 파일만들기 -&gt; Cocoa Toucn -&gt; Nib파일이름, 체크박스 체크로 2개의 파일을 만든다. 그러면 Nib파일과, Swift파일이 생성된다. TitleLabel만들고 ContentView로 드래그하여 Leading, Top, Trailing을 체크해준다. 그리고 이번에는 타이틀 Label의 number of lines를 1로 하자. BodyLabel을 TitleLabel로 드래그하여 Leading, Vertical Spacing 체크해준다. 그리고 BodyLabel을 ContentView로 드래그하여 Trailing을 채크해준다.(TitleLabel은 한줄이라서..?) Identifier, Class 설정해준다. import UIKit class NibCell: UITableViewCell { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() self.backgroundColor = .systemMint } } IBOutlet 추가한다. NibListStoryboard에서 테이블만들고 My Table View 이름 지정.해준다. 그리고 이를 NibListViewController에 드래그하여 myTableView만들어준다. fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } 이대로 실행하면 에러가난다. Storyboard 방식과 달리 Nib 방식으로 할때는 등록 절차를 직접 해줘야 한다. 전체코드 NibCell.xib NibCell.swift // // NibCell.swift // UITableViewTutorial // // Created by 김동현 on 5/11/25. // import UIKit class NibCell: UITableViewCell { @IBOutlet weak var titleLabel: UILabel! @IBOutlet weak var bodyLabel: UILabel! override func awakeFromNib() { super.awakeFromNib() self.backgroundColor = .systemMint } /* override func setSelected(_ selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Configure the view for the selected state } */ } NibListViewController // // NibListViewController.swift // UITableViewTutorial // // Created by 김동현 on 5/8/25. // import UIKit class NibListViewController: UIViewController { @IBOutlet weak var myTableView: UITableView! var dummySections: [DummySection] = DummySection.getDumies(10) override func viewDidLoad() { super.viewDidLoad() configureTableView() } fileprivate func configureTableView() { // storyboard에서는 테이블뷰에서 셀을 직접 드래그하기때문에 등록이 되지만 Nib 방식에서 등록을 시켜줘야한다. let cellNib = UINib(nibName: "NibCell", bundle: nil) self.myTableView.register(cellNib, forCellReuseIdentifier: "NibCell") self.myTableView.dataSource = self self.myTableView.delegate = self } } /// UITableView의 데이터 관리 역할을 담당 extension NibListViewController: UITableViewDataSource { /// 섹션이 여러개일때만 사용 /// 섹션의 타이틀 설정 func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -&gt; String? { return "헤더: " + dummySections[section].title } func tableView(_ tableView: UITableView, titleForFooterInSection section: Int) -&gt; String? { return "푸터: " + dummySections[section].title } /// 섹션이 여러개일때만 사용 /// 현재 섹션이 몇개인지 func numberOfSections(in tableView: UITableView) -&gt; Int { return dummySections.count } /// 하나의 섹션에 몇개의 rows가 있냐 func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { return dummySections[section].rows.count } /// 각 셀에 대한 내용을 구성하여 반환 -&gt; 셀의 종류를 정하기 - 테이블뷰 셀을 만들어서 반환해라 /// - indexPath: 셀의 위치를 나타내는 인덱스 경로 /// - returns: 구성된 UITableViewCell 객체 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { /// 기본 스타일의 셀 생성 (textLabel과 detailTextLabel 포함) /// let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "MyCell") // [guard let] 방식 guard let cell = tableView.dequeueReusableCell(withIdentifier: "NibCell", for: indexPath) as? NibCell else { return UITableViewCell() } let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell /* [if let] 방식 if let cell = tableView.dequeueReusableCell(withIdentifier: "StoryBoardCell", for: indexPath) as? StoryboardCell { let sectionData: DummySection = dummySections[indexPath.section] let cellData: DummyData = sectionData.rows[indexPath.row] /// 셀의 주 텍스트를 더미 데이터에서 가져오기 cell.titleLabel.text = cellData.title /// 셀의 서브 타이틀 설정 cell.bodyLabel.text = cellData.body //cell.detailTextLabel?.numberOfLines = 0 return cell } else { return UITableViewCell() } */ } } /// 이벤트 관련 부분 - 셀 선택 등 사용자 인터랙션(이벤트) 관련 처리 extension NibListViewController: UITableViewDelegate { /// 사용자가 특정 셀을 선택했을 때 호출되는 메서드 /// - Parameters: /// - tableView: 이벤트가 발생한 테이블 뷰 /// - indexPath: 선택된 셀의 위치 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) { print(#fileID, #function, #line, "- indexPath: \(indexPath.row)") } }]]></summary></entry><entry><title type="html">[TableView] 2. 스토리보드로 여러 화면 분기하기</title><link href="http://localhost:4000/UIKit-tableView2/" rel="alternate" type="text/html" title="[TableView] 2. 스토리보드로 여러 화면 분기하기" /><published>2025-05-08T00:00:00+00:00</published><updated>2025-05-08T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-tableView2</id><content type="html" xml:base="http://localhost:4000/UIKit-tableView2/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="커스텀셀" width="30%"> -->

<h2 id="스토리보드로-여러-화면-분기하기">스토리보드로 여러 화면 분기하기</h2>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508214538806.png" alt="커스텀셀" width="70%" /></p>

<h3 id="필요-파일">필요 파일</h3>

<ul>
  <li>MainViewController</li>
  <li>Main.storyboard</li>
</ul>

<p>MainStoryboard에서 Command + Shift + L을 눌러서 Storyboard를 추가하고 우측 하단의 Embeded In을 눌러서 Navigation Controller(화면 이동 관할)을 추가한다.   <br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508215655099.png" alt="커스텀셀" width="70%" /><br />
다음으로 현재 Main스토리보드에서 어떤 화변이 먼저 실행이 될 지 정해줘야 한다. Attribute Inspector에서 is Initial View Controller 클릭해서 첫 시작 뷰 컨트롤러를 설정해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508220915956.png" alt="커스텀셀" width="70%" /><br />
filled버튼들을 추가하고 전체 버튼들을 드래그하여 Embed In 클릭 후 Stack View를 눌러준다 그러면 버튼들이 StackView로 묶인다. 버튼들을 Stack에 같은 크기로 채우려면 alignment를 fill로 해주고 Distribution은 Fill Equally로 해준다. 그 이후 StackView를 SafeArea로 드래그하여 horizontal, vertical 각각 center 지정해준다. 주황색이 뜨면 새로고침 눌러준다.<br />
<br /></p>

<p>alignment(정렬)는 요소들이 한 축을 기준으로 어떻게 정렬될지를 결정한다.<br />
<code class="language-plaintext highlighter-rouge">horizontal</code> stack view일 경우:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">.leading</code> → 왼쪽 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">.center</code> → 가운데 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">.trailing</code> → 오른쪽 정렬</li>
  <li><code class="language-plaintext highlighter-rouge">.top</code>, <code class="language-plaintext highlighter-rouge">.bottom</code> → 요소들의 <strong>수직 위치</strong> 정렬 방식도 있음<br />
<br /></li>
</ul>

<p>distribution(분배)는 여러 UI 요소를 Stack View 안에서 얼마나 넓게 어떻게 나눌지 결정한다.<br />
<code class="language-plaintext highlighter-rouge">.fill</code> → 가능한 공간만큼 채움<br />
<code class="language-plaintext highlighter-rouge">.fillEqually</code> → 모든 요소가 <strong>동일한 크기</strong>로 공간 분배<br />
<code class="language-plaintext highlighter-rouge">.fillProportionally</code> → 각 요소의 <strong>원래 크기 비율</strong>에 따라 분배<br />
<code class="language-plaintext highlighter-rouge">.equalSpacing</code> → 요소들 사이 간격을 <strong>동일하게 유지</strong><br />
<code class="language-plaintext highlighter-rouge">.equalCentering</code> → 중심점 기준으로 <strong>균등하게 배치</strong><br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508222122754.png" alt="커스텀셀" width="70%" /><br />
Default버튼을 우측 ViewController쪽으로 드래그하여 Show를 눌러준다 이때 ViewController는 CustomClass에서 Class설정을 해줘서 ViewController코드와 연결해둬야한다. 그러면 Default를 누르면 화면이동이 된다. 동일하게 나머지 버튼들도 ViewController를 만들어서 연결해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-08%20%EC%98%A4%ED%9B%84%2010.56.48(2).png" alt="커스텀셀" width="70%" /><br />
완성하면 이렇게 되는데 MainStoryBoard 파일 안에서 View가 많아지게 되면 상당히 무거워지기 때문에 작업이 힘들어 진다. 추천하는 방식은 Reference 방식이다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508230321228.png" alt="커스텀셀" width="70%" /><br />
StoryboardList.storyboard를 만들고 만들면 제공되는 ViewController를 없앤다. 그럼 이렇게 빈 화면이 나온다. 그리고 MainStoryboard에 있는 Storyboard 타이틀 VC를 Control + X로 잘라내어 StoryboardList.storyboard에 붙여넣는다<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508230739196.png" alt="커스텀셀" width="70%" /><br />
그리고 나서 타이틀을 설정해준다. 그리고 MainStoryboard로 가서 Command + Shift + L로 reference검색해서 드래그한다. 이는 스토리보드에 대한 참조(메모리 주소)이다. 즉 이로 서로 연걸이 되게끔 할 수 있다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508231122558.png" alt="커스텀셀" width="70%" /><br />
스토리보드Id를 설정한다 보통 클래스이름과 동일하게 적는다. 여기서 사진에는 표시 안되어 있지만 Use StoryboardId 체크 클릭해준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508231515586.png" alt="커스텀셀" width="70%" /><br />
<img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508231740354.png" alt="커스텀셀" width="70%" /><br />
스토리보드와 스토리보드Id를 적어준다. 그리고 Identifier도 동일하게 스토리보드Id를 적어준다.<br />
<br /></p>

<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508232019316.png" alt="커스텀셀" width="70%" /><br />
최종적으로 참조에 드래그를 해서 show로 지정해준다. 이러면 이전의 방식과 동일한 방식이다. 이렇게 하면 작업이 용이해진다. 나머지 코드들도 동일하게 해주자. <br />
<br /></p>

<h2 id="최종화면">최종화면</h2>
<p><img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%83%B7%202025-05-08%20%EC%98%A4%ED%9B%84%2011.46.20(2).png" alt="커스텀셀" width="70%" /><br />
<img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/image-20250508234707587.png" alt="커스텀셀" width="30%" /></p>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="TableView" /><summary type="html"><![CDATA[스토리보드로 여러 화면 분기하기 필요 파일 MainViewController Main.storyboard MainStoryboard에서 Command + Shift + L을 눌러서 Storyboard를 추가하고 우측 하단의 Embeded In을 눌러서 Navigation Controller(화면 이동 관할)을 추가한다. 다음으로 현재 Main스토리보드에서 어떤 화변이 먼저 실행이 될 지 정해줘야 한다. Attribute Inspector에서 is Initial View Controller 클릭해서 첫 시작 뷰 컨트롤러를 설정해준다. filled버튼들을 추가하고 전체 버튼들을 드래그하여 Embed In 클릭 후 Stack View를 눌러준다 그러면 버튼들이 StackView로 묶인다. 버튼들을 Stack에 같은 크기로 채우려면 alignment를 fill로 해주고 Distribution은 Fill Equally로 해준다. 그 이후 StackView를 SafeArea로 드래그하여 horizontal, vertical 각각 center 지정해준다. 주황색이 뜨면 새로고침 눌러준다. alignment(정렬)는 요소들이 한 축을 기준으로 어떻게 정렬될지를 결정한다. horizontal stack view일 경우: .leading → 왼쪽 정렬 .center → 가운데 정렬 .trailing → 오른쪽 정렬 .top, .bottom → 요소들의 수직 위치 정렬 방식도 있음 distribution(분배)는 여러 UI 요소를 Stack View 안에서 얼마나 넓게 어떻게 나눌지 결정한다. .fill → 가능한 공간만큼 채움 .fillEqually → 모든 요소가 동일한 크기로 공간 분배 .fillProportionally → 각 요소의 원래 크기 비율에 따라 분배 .equalSpacing → 요소들 사이 간격을 동일하게 유지 .equalCentering → 중심점 기준으로 균등하게 배치 Default버튼을 우측 ViewController쪽으로 드래그하여 Show를 눌러준다 이때 ViewController는 CustomClass에서 Class설정을 해줘서 ViewController코드와 연결해둬야한다. 그러면 Default를 누르면 화면이동이 된다. 동일하게 나머지 버튼들도 ViewController를 만들어서 연결해준다. 완성하면 이렇게 되는데 MainStoryBoard 파일 안에서 View가 많아지게 되면 상당히 무거워지기 때문에 작업이 힘들어 진다. 추천하는 방식은 Reference 방식이다. StoryboardList.storyboard를 만들고 만들면 제공되는 ViewController를 없앤다. 그럼 이렇게 빈 화면이 나온다. 그리고 MainStoryboard에 있는 Storyboard 타이틀 VC를 Control + X로 잘라내어 StoryboardList.storyboard에 붙여넣는다 그리고 나서 타이틀을 설정해준다. 그리고 MainStoryboard로 가서 Command + Shift + L로 reference검색해서 드래그한다. 이는 스토리보드에 대한 참조(메모리 주소)이다. 즉 이로 서로 연걸이 되게끔 할 수 있다. 스토리보드Id를 설정한다 보통 클래스이름과 동일하게 적는다. 여기서 사진에는 표시 안되어 있지만 Use StoryboardId 체크 클릭해준다. 스토리보드와 스토리보드Id를 적어준다. 그리고 Identifier도 동일하게 스토리보드Id를 적어준다. 최종적으로 참조에 드래그를 해서 show로 지정해준다. 이러면 이전의 방식과 동일한 방식이다. 이렇게 하면 작업이 용이해진다. 나머지 코드들도 동일하게 해주자. 최종화면]]></summary></entry></feed>