<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-30T06:25:59+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[CustomView] 커스텀 캘린더뷰 만들기</title><link href="http://localhost:4000/CustomView-CalendarView/" rel="alternate" type="text/html" title="[CustomView] 커스텀 캘린더뷰 만들기" /><published>2025-05-30T00:00:00+00:00</published><updated>2025-05-30T00:00:00+00:00</updated><id>http://localhost:4000/%5BCustomView%5D-CalendarView</id><content type="html" xml:base="http://localhost:4000/CustomView-CalendarView/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="ios-16부터-기본-제공되는-캘린더">iOS 16부터 기본 제공되는 캘린더</h1>

<h3 id="기본-캘린더">기본 캘린더</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">BasicCalendarViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">// MARK: - UI Conponent</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">UICalendarView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UICalendarView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="c1">/// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성</span>
        <span class="n">view</span><span class="o">.</span><span class="n">wantsDateDecorations</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">calendarView</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">calendarViewConstraints</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">(</span><span class="n">calendarViewConstraints</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="uicalendarselectionsingledatedelegate를-설정하여-날짜-선택시-이모지-표시">UICalendarSelectionSingleDateDelegate를 설정하여 날짜 선택시 이모지 표시</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">BasicCalendarViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="c1">/// 현재 선택된 날짜</span>
    <span class="k">var</span> <span class="nv">selectedDate</span><span class="p">:</span> <span class="kt">DateComponents</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
    
    <span class="c1">// MARK: - UI Conponent</span>
    <span class="c1">/// 날짜별 데코레이션(점, 이모지 등)을 지원하는 캘린더 뷰</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">UICalendarView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">view</span> <span class="o">=</span> <span class="kt">UICalendarView</span><span class="p">()</span>
        <span class="n">view</span><span class="o">.</span><span class="n">locale</span> <span class="o">=</span> <span class="kt">Locale</span><span class="p">(</span><span class="nv">identifier</span><span class="p">:</span> <span class="s">"ko_KR"</span><span class="p">)</span>
        <span class="n">view</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="c1">/// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성</span>
        <span class="n">view</span><span class="o">.</span><span class="n">wantsDateDecorations</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">view</span>
    <span class="p">}()</span>
   
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="k">self</span><span class="o">.</span><span class="nf">makeUI</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">constraints</span><span class="p">()</span>
        <span class="k">self</span><span class="o">.</span><span class="nf">setCalendar</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">/// 캘린더 delegate 및 날짜 선택 동작 설정</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">setCalendar</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">calendarView</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        
        <span class="c1">/// 한 번에 한 날짜만 선택 가능</span>
        <span class="k">let</span> <span class="nv">dateSection</span> <span class="o">=</span> <span class="kt">UICalendarSelectionSingleDate</span><span class="p">(</span><span class="nv">delegate</span><span class="p">:</span> <span class="k">self</span><span class="p">)</span>
        <span class="c1">/// 선택 이벤트(날짜 선택 시 콜백)를 BasicCalendarViewController에서 직접 처리하겠다</span>
        <span class="n">calendarView</span><span class="o">.</span><span class="n">selectionBehavior</span> <span class="o">=</span> <span class="n">dateSection</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">calendarView</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">calendarViewConstraints</span> <span class="o">=</span> <span class="p">[</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">topAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">topAnchor</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">leadingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="mi">20</span><span class="p">),</span>
            <span class="n">calendarView</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">safeAreaLayoutGuide</span><span class="o">.</span><span class="n">trailingAnchor</span><span class="p">,</span> <span class="nv">constant</span><span class="p">:</span> <span class="o">-</span><span class="mi">20</span><span class="p">)</span>
        <span class="p">]</span>
        
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">(</span><span class="n">calendarViewConstraints</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">/// 특정 날짜 셀만 데코레이션 새로고침(이모지 추가)</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">reloadDateView</span><span class="p">(</span><span class="nv">date</span><span class="p">:</span> <span class="kt">Date</span><span class="p">?)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">date</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
        <span class="k">let</span> <span class="nv">calendar</span> <span class="o">=</span> <span class="kt">Calendar</span><span class="o">.</span><span class="n">current</span>
        <span class="n">calendarView</span><span class="o">.</span><span class="nf">reloadDecorations</span><span class="p">(</span><span class="nv">forDateComponents</span><span class="p">:</span> <span class="p">[</span><span class="n">calendar</span><span class="o">.</span><span class="nf">dateComponents</span><span class="p">([</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="o">.</span><span class="n">month</span><span class="p">,</span> <span class="o">.</span><span class="n">year</span><span class="p">],</span> <span class="nv">from</span><span class="p">:</span> <span class="n">date</span><span class="o">!</span><span class="p">)],</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// MARK: - 캘린더 Delegate</span>
<span class="kd">extension</span> <span class="kt">BasicCalendarViewController</span><span class="p">:</span> <span class="kt">UICalendarViewDelegate</span><span class="p">,</span> <span class="kt">UICalendarSelectionSingleDateDelegate</span> <span class="p">{</span>
    
    <span class="c1">/// 날짜별 데코레이션 표시 커스텀(필요시 구현)</span>
    <span class="c1">/// 선택된 날자의 셀에 이모지로 커스텀 데코레이션을 보여준다</span>
    <span class="kd">func</span> <span class="nf">calendarView</span><span class="p">(</span><span class="n">_</span> <span class="nv">calendarView</span><span class="p">:</span> <span class="kt">UICalendarView</span><span class="p">,</span> <span class="n">decorationFor</span> <span class="nv">dateComponents</span><span class="p">:</span> <span class="kt">DateComponents</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">UICalendarView</span><span class="o">.</span><span class="kt">Decoration</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">if</span> <span class="k">let</span> <span class="nv">selectedDate</span> <span class="o">=</span> <span class="n">selectedDate</span><span class="p">,</span> <span class="n">selectedDate</span> <span class="o">==</span> <span class="n">dateComponents</span> <span class="p">{</span>
            <span class="k">return</span> <span class="o">.</span><span class="n">customView</span> <span class="p">{</span>
                <span class="k">let</span> <span class="nv">label</span> <span class="o">=</span> <span class="kt">UILabel</span><span class="p">()</span>
                <span class="n">label</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"🐶"</span>
                <span class="n">label</span><span class="o">.</span><span class="n">textAlignment</span> <span class="o">=</span> <span class="o">.</span><span class="n">center</span>
                <span class="k">return</span> <span class="n">label</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="kc">nil</span>
    <span class="p">}</span>
    
    <span class="c1">/// 날짜 선택 시 동작</span>
    <span class="kd">func</span> <span class="nf">dateSelection</span><span class="p">(</span><span class="n">_</span> <span class="nv">selection</span><span class="p">:</span> <span class="kt">UICalendarSelectionSingleDate</span><span class="p">,</span> <span class="n">didSelectDate</span> <span class="nv">dateComponents</span><span class="p">:</span> <span class="kt">DateComponents</span><span class="p">?)</span> <span class="p">{</span>
        <span class="c1">/// selection 객체에 저장</span>
        <span class="n">selection</span><span class="o">.</span><span class="nf">setSelected</span><span class="p">(</span><span class="n">dateComponents</span><span class="p">,</span> <span class="nv">animated</span><span class="p">:</span> <span class="kc">true</span><span class="p">)</span>
        <span class="c1">/// selectedDate 프로퍼티를 업데이트</span>
        <span class="n">selectedDate</span> <span class="o">=</span> <span class="n">dateComponents</span>
        <span class="c1">/// 선택한 날짜 셀의 데코레이션만 새로고침(🐶 이모지가 바로 반영되게)</span>
        <span class="nf">reloadDateView</span><span class="p">(</span><span class="nv">date</span><span class="p">:</span> <span class="kt">Calendar</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="nf">date</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">dateComponents</span><span class="o">!</span><span class="p">))</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="/assets/img/2025-05-30-%5BCustomView%5D-CalendarView/image-20250530145103523.png" alt="이미지" width="50%" /></p>

<div align="center">참고: 한국어로 설정해도 시뮬레이터에서는 요일이 영어로 보이는 버그가 있다.
</div>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://ohwhatisthis.tistory.com/23</li>
  <li>https://maramincho.tistory.com/106</li>
  <li>https://dongdida.tistory.com/128</li>
  <li>https://velog.io/@xanxnu/iOSSwift-UICalendarView-사용해-보기</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="CustomView" /><summary type="html"><![CDATA[iOS 16부터 기본 제공되는 캘린더 기본 캘린더 import UIKit final class BasicCalendarViewController: UIViewController { // MARK: - UI Conponent private lazy var calendarView: UICalendarView = { let view = UICalendarView() view.translatesAutoresizingMaskIntoConstraints = false /// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성 view.wantsDateDecorations = true return view }() override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() } private func makeUI() { view.backgroundColor = .white view.addSubview(calendarView) } private func constraints() { let calendarViewConstraints = [ calendarView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), calendarView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20), calendarView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -20) ] NSLayoutConstraint.activate(calendarViewConstraints) } } UICalendarSelectionSingleDateDelegate를 설정하여 날짜 선택시 이모지 표시 import UIKit final class BasicCalendarViewController: UIViewController { /// 현재 선택된 날짜 var selectedDate: DateComponents? = nil // MARK: - UI Conponent /// 날짜별 데코레이션(점, 이모지 등)을 지원하는 캘린더 뷰 private lazy var calendarView: UICalendarView = { let view = UICalendarView() view.locale = Locale(identifier: "ko_KR") view.translatesAutoresizingMaskIntoConstraints = false /// 점이나 뱃지 표시 등 달력 Custom 하기 위해 설정해야 하는 속성 view.wantsDateDecorations = true return view }() override func viewDidLoad() { super.viewDidLoad() self.makeUI() self.constraints() self.setCalendar() } /// 캘린더 delegate 및 날짜 선택 동작 설정 private func setCalendar() { self.calendarView.delegate = self /// 한 번에 한 날짜만 선택 가능 let dateSection = UICalendarSelectionSingleDate(delegate: self) /// 선택 이벤트(날짜 선택 시 콜백)를 BasicCalendarViewController에서 직접 처리하겠다 calendarView.selectionBehavior = dateSection } private func makeUI() { view.backgroundColor = .white view.addSubview(calendarView) } private func constraints() { let calendarViewConstraints = [ calendarView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), calendarView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 20), calendarView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -20) ] NSLayoutConstraint.activate(calendarViewConstraints) } /// 특정 날짜 셀만 데코레이션 새로고침(이모지 추가) private func reloadDateView(date: Date?) { if date == nil { return } let calendar = Calendar.current calendarView.reloadDecorations(forDateComponents: [calendar.dateComponents([.day, .month, .year], from: date!)], animated: true) } } // MARK: - 캘린더 Delegate extension BasicCalendarViewController: UICalendarViewDelegate, UICalendarSelectionSingleDateDelegate { /// 날짜별 데코레이션 표시 커스텀(필요시 구현) /// 선택된 날자의 셀에 이모지로 커스텀 데코레이션을 보여준다 func calendarView(_ calendarView: UICalendarView, decorationFor dateComponents: DateComponents) -&gt; UICalendarView.Decoration? { if let selectedDate = selectedDate, selectedDate == dateComponents { return .customView { let label = UILabel() label.text = "🐶" label.textAlignment = .center return label } } return nil } /// 날짜 선택 시 동작 func dateSelection(_ selection: UICalendarSelectionSingleDate, didSelectDate dateComponents: DateComponents?) { /// selection 객체에 저장 selection.setSelected(dateComponents, animated: true) /// selectedDate 프로퍼티를 업데이트 selectedDate = dateComponents /// 선택한 날짜 셀의 데코레이션만 새로고침(🐶 이모지가 바로 반영되게) reloadDateView(date: Calendar.current.date(from: dateComponents!)) } } 참고: 한국어로 설정해도 시뮬레이터에서는 요일이 영어로 보이는 버그가 있다. Reference https://ohwhatisthis.tistory.com/23 https://maramincho.tistory.com/106 https://dongdida.tistory.com/128 https://velog.io/@xanxnu/iOSSwift-UICalendarView-사용해-보기]]></summary></entry><entry><title type="html">[Ubuntu] 우분투 원격 서버 설정</title><link href="http://localhost:4000/Ubuntu-Ubuntu1/" rel="alternate" type="text/html" title="[Ubuntu] 우분투 원격 서버 설정" /><published>2025-05-29T00:00:00+00:00</published><updated>2025-05-29T00:00:00+00:00</updated><id>http://localhost:4000/%5BUbuntu%5D-Ubuntu1</id><content type="html" xml:base="http://localhost:4000/Ubuntu-Ubuntu1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="우분투-원격-서버-설정">우분투 원격 서버 설정</h1>

<p><a href="http://172.30.1.254:8899">kt 공유기 링크</a><br />
장치설정 -&gt; 트래픽 관리 -&gt; 포트포워딩 추가</p>

<p><img src="/assets/img/2025-05-28-%5BUbuntu%5D-Ubuntu1/image-20250529234134757.png" alt="이미지" width="30%" /></p>

<h2 id="cui-세팅-및-접속">CUI 세팅 및 접속</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>openssh-server

<span class="c"># 직접 실행</span>
<span class="nb">sudo </span>systemctl start ssh

<span class="c"># 부팅 시 자동 실행</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>ssh

<span class="c"># 서버 접속</span>
ssh 로그인유저@링크 <span class="nt">-p</span> 포트번호  
</code></pre></div></div>

<h2 id="gui-세틸-및-접속">GUI 세틸 및 접속</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># xrdp, xfce4, lightdm</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>xrdp xfce4 lightdm <span class="nt">-y</span>

<span class="c"># .xsession 파일 재설정</span>
<span class="nb">echo</span> <span class="s2">"startxfce4"</span> <span class="o">&gt;</span> ~/.xsession
<span class="nb">chmod</span> +x ~/.xsession

<span class="c"># 권한/세션 파일 정리</span>
<span class="nb">rm</span> <span class="nt">-f</span> ~/.Xauthority ~/.ICEauthority

<span class="c"># xrdp 서비스 재시작</span>
<span class="nb">sudo </span>systemctl restart xrdp

<span class="c"># lightdm 디스플레이 매니저로 고정</span>
<span class="nb">sudo </span>dpkg-reconfigure lightdm

<span class="c"># Windows APP 프로그램으로 GUI 접속 진행</span>
</code></pre></div></div>

<h2 id="우분투-wake-on-lan-설정">우분투 wake on lan 설정</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># ethtool 설치</span>
<span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>ethtool <span class="nt">-y</span>

<span class="c"># 현재 설정 확인 (유선 NIC명 확인, 예: enp1s0) -&gt; enp1s0, eth0 등 유선랜 이름 확인</span>
ip <span class="nb">link</span>

<span class="c"># "Wake-on: g" 라고 나오면 WOL 지원</span>
<span class="nb">sudo </span>ethtool enp1s0

<span class="c"># d로 되있으면 wake on lan 활성화</span>
<span class="nb">sudo </span>ethtool <span class="nt">-s</span> enp1s0 wol g
<span class="nb">sudo </span>ethtool enp1s0

<span class="c"># 재부팅 시 자동으로 WOL이 켜지도록,</span>
<span class="nb">sudo </span>nmcli connection show

<span class="c"># NAME            UUID                                  TYPE      DEVICE </span>
<span class="c"># netplan-enp1s0  cac41fbe-bc18-3d87-bba7-af2af7f8ffab  ethernet  enp1s0 </span>
<span class="c"># lo              5ee3992e-8232-483a-88d7-6cf21f44d700  loopback  lo     </span>

<span class="c"># 아래 명령어를 입력</span>
<span class="nb">sudo </span>nmcli connection modify <span class="s2">"netplan-enp1s0"</span> 802-3-ethernet.wake-on-lan magic
<span class="nb">sudo </span>systemctl restart NetworkManager




</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Xcode" /><summary type="html"><![CDATA[우분투 원격 서버 설정 kt 공유기 링크 장치설정 -&gt; 트래픽 관리 -&gt; 포트포워딩 추가 CUI 세팅 및 접속 sudo apt update sudo apt install openssh-server # 직접 실행 sudo systemctl start ssh # 부팅 시 자동 실행 sudo systemctl enable ssh # 서버 접속 ssh 로그인유저@링크 -p 포트번호 GUI 세틸 및 접속 # xrdp, xfce4, lightdm sudo apt update sudo apt install xrdp xfce4 lightdm -y # .xsession 파일 재설정 echo "startxfce4" &gt; ~/.xsession chmod +x ~/.xsession # 권한/세션 파일 정리 rm -f ~/.Xauthority ~/.ICEauthority # xrdp 서비스 재시작 sudo systemctl restart xrdp # lightdm 디스플레이 매니저로 고정 sudo dpkg-reconfigure lightdm # Windows APP 프로그램으로 GUI 접속 진행 우분투 wake on lan 설정 # ethtool 설치 sudo apt update sudo apt install ethtool -y # 현재 설정 확인 (유선 NIC명 확인, 예: enp1s0) -&gt; enp1s0, eth0 등 유선랜 이름 확인 ip link # "Wake-on: g" 라고 나오면 WOL 지원 sudo ethtool enp1s0 # d로 되있으면 wake on lan 활성화 sudo ethtool -s enp1s0 wol g sudo ethtool enp1s0 # 재부팅 시 자동으로 WOL이 켜지도록, sudo nmcli connection show # NAME UUID TYPE DEVICE # netplan-enp1s0 cac41fbe-bc18-3d87-bba7-af2af7f8ffab ethernet enp1s0 # lo 5ee3992e-8232-483a-88d7-6cf21f44d700 loopback lo # 아래 명령어를 입력 sudo nmcli connection modify "netplan-enp1s0" 802-3-ethernet.wake-on-lan magic sudo systemctl restart NetworkManager]]></summary></entry><entry><title type="html">[UIComponent] 네비게이션 버튼</title><link href="http://localhost:4000/UIKit-%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98-%EB%B2%84%ED%8A%BC/" rel="alternate" type="text/html" title="[UIComponent] 네비게이션 버튼" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98%20%EB%B2%84%ED%8A%BC</id><content type="html" xml:base="http://localhost:4000/UIKit-%EB%84%A4%EB%B9%84%EA%B2%8C%EC%9D%B4%EC%85%98-%EB%B2%84%ED%8A%BC/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<p>##</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">setupNavigation</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">navigationItem</span><span class="o">.</span><span class="n">rightBarButtonItem</span> <span class="o">=</span> <span class="kt">UIBarButtonItem</span><span class="p">(</span>
            <span class="nv">image</span><span class="p">:</span> <span class="kt">UIImage</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"gearshape.fill"</span><span class="p">),</span>
            <span class="nv">style</span><span class="p">:</span> <span class="o">.</span><span class="n">plain</span><span class="p">,</span>
            <span class="nv">target</span><span class="p">:</span> <span class="k">self</span><span class="p">,</span>
            <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><category term="UIComponent" /><summary type="html"><![CDATA[## private func setupNavigation() { self.navigationItem.rightBarButtonItem = UIBarButtonItem( image: UIImage(systemName: "gearshape.fill"), style: .plain, target: self, action: #selector(test) ) }]]></summary></entry><entry><title type="html">[RxSwift] 3. RX + MVVM + Input/output 패턴</title><link href="http://localhost:4000/RxSwift-RxSwift-3/" rel="alternate" type="text/html" title="[RxSwift] 3. RX + MVVM + Input/output 패턴" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BRxSwift%5D-RxSwift-3</id><content type="html" xml:base="http://localhost:4000/RxSwift-RxSwift-3/"><![CDATA[<h1 id="rx---mvvm-예시">RX - MVVM 예시</h1>

<h3 id="기존-코드---view와-viewmodel-구분-없이-하나의-코드로-작성">기존 코드 - view와 viewModel 구분 없이 하나의 코드로 작성</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBaag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">coordinator</span><span class="p">:</span> <span class="kt">HomeCoordinator</span><span class="p">?</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="p">()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">homeViewModel</span> <span class="o">=</span> <span class="n">homeViewModel</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">logoutBtn</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"로그아웃"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">addTarget</span><span class="p">(</span><span class="k">self</span><span class="p">,</span> <span class="nv">action</span><span class="p">:</span> <span class="k">#selector</span><span class="p">(</span><span class="n">logout</span><span class="p">),</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">touchUpInside</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">background</span>
        
        <span class="p">[</span><span class="n">logoutBtn</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>

       
    <span class="kd">@objc</span> <span class="kd">func</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeUser</span><span class="p">()</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeGroup</span><span class="p">()</span>
            <span class="k">try</span> <span class="kt">Auth</span><span class="o">.</span><span class="nf">auth</span><span class="p">()</span><span class="o">.</span><span class="nf">signOut</span><span class="p">()</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 성공"</span><span class="p">)</span>
            <span class="n">coordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">showLogin</span><span class="p">()</span>
            <span class="n">homeViewModel</span><span class="o">.</span><span class="nf">stopObservingGroup</span><span class="p">()</span>
            
            
        <span class="p">}</span> <span class="k">catch</span> <span class="k">let</span> <span class="nv">signOutError</span> <span class="k">as</span> <span class="kt">NSError</span> <span class="p">{</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 실패: %@"</span><span class="p">,</span> <span class="n">signOutError</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">SettingViewController</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">StubHomeViewModel</span><span class="p">(</span><span class="nv">previewPost</span><span class="p">:</span> <span class="o">.</span><span class="n">samplePosts</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="개선-코드---view와-viewmodel-구분">개선 코드 - view와 viewModel 구분</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// View</span>
<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBaag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">coordinator</span><span class="p">:</span> <span class="kt">HomeCoordinator</span><span class="p">?</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="p">()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">homeViewModel</span> <span class="o">=</span> <span class="n">homeViewModel</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">logoutBtn</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"로그아웃"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">bindViewModdel</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">background</span>
        
        <span class="p">[</span><span class="n">logoutBtn</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Binding</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">bindViewModdel</span><span class="p">()</span> <span class="p">{</span>
        
        <span class="c1">// [Input] 로그아웃 버튼 탭 이벤트를 ViewModel에 전달</span>
        <span class="n">logoutBtn</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">tap</span>
            <span class="o">.</span><span class="nf">bind</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                <span class="k">self</span><span class="o">.</span><span class="n">viewModel</span><span class="o">.</span><span class="nf">logout</span><span class="p">()</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBaag</span><span class="p">)</span>
        
        <span class="c1">// [Output] 로그아웃 처리 결과에 따라 UI 반응</span>
        <span class="n">viewModel</span><span class="o">.</span><span class="n">logoutResult</span>
            <span class="o">.</span><span class="nf">observe</span><span class="p">(</span><span class="nv">on</span><span class="p">:</span> <span class="kt">MainScheduler</span><span class="o">.</span><span class="n">instance</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">subscribe</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                
                <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
                <span class="k">case</span> <span class="o">.</span><span class="nv">success</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 성공"</span><span class="p">)</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">coordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">showLogin</span><span class="p">()</span>
                <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 실패: </span><span class="se">\(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
            <span class="p">})</span>
            <span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBaag</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// ViewModel</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>
<span class="kd">import</span> <span class="kt">RxCocoa</span>

<span class="kd">protocol</span> <span class="kt">SettingViewModelType</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">logout</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewModel</span><span class="p">:</span> <span class="kt">SettingViewModelType</span> <span class="p">{</span>
    
    <span class="c1">// 로그아웃 결과 이벤트</span>
    <span class="c1">// 로그아웃 결과는 상태가 아닌 한번 일어나는 일회성 이벤트</span>
    <span class="k">let</span> <span class="nv">logoutResult</span> <span class="o">=</span> <span class="kt">PublishRelay</span><span class="o">&lt;</span><span class="kt">Result</span><span class="o">&lt;</span><span class="kt">Void</span><span class="p">,</span> <span class="kt">Error</span><span class="o">&gt;&gt;</span><span class="p">()</span>
    
    <span class="kd">func</span> <span class="nf">logout</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
            <span class="k">try</span> <span class="kt">Auth</span><span class="o">.</span><span class="nf">auth</span><span class="p">()</span><span class="o">.</span><span class="nf">signOut</span><span class="p">()</span>
            <span class="n">logoutResult</span><span class="o">.</span><span class="nf">accept</span><span class="p">(</span><span class="o">.</span><span class="nf">success</span><span class="p">(()))</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeUser</span><span class="p">()</span>
            <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeGroup</span><span class="p">()</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
            <span class="n">logoutResult</span><span class="o">.</span><span class="nf">accept</span><span class="p">(</span><span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="개선-코드---view와-viewmodel-구분-및-inputoutput-패턴-추가">개선 코드 - view와 viewModel 구분 및 Input/Output 패턴 추가</h3>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// View</span>
<span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBaag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="k">weak</span> <span class="k">var</span> <span class="nv">coordinator</span><span class="p">:</span> <span class="kt">HomeCoordinator</span><span class="p">?</span>

    <span class="kd">private</span> <span class="k">let</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="p">()</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">homeViewModel</span><span class="p">:</span> <span class="kt">HomeViewModelType</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">homeViewModel</span> <span class="o">=</span> <span class="n">homeViewModel</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">nibName</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span> <span class="nv">bundle</span><span class="p">:</span> <span class="kc">nil</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="kd">required</span> <span class="nf">init</span><span class="p">?(</span><span class="nv">coder</span><span class="p">:</span> <span class="kt">NSCoder</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">fatalError</span><span class="p">(</span><span class="s">"init(coder:) has not been implemented"</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Component</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">logoutBtn</span><span class="p">:</span> <span class="kt">UIButton</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">button</span> <span class="o">=</span> <span class="kt">UIButton</span><span class="p">(</span><span class="nv">type</span><span class="p">:</span> <span class="o">.</span><span class="n">system</span><span class="p">)</span>
        <span class="n">button</span><span class="o">.</span><span class="nf">setTitle</span><span class="p">(</span><span class="s">"로그아웃"</span><span class="p">,</span> <span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">normal</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">button</span>
    <span class="p">}()</span>

    <span class="c1">// MARK: - LifeCycle</span>
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">bindViewModel</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - UI Setting</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">background</span>
        
        <span class="p">[</span><span class="n">logoutBtn</span><span class="p">]</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span>
            <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span>
            <span class="nv">$0</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            <span class="n">logoutBtn</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="c1">// MARK: - Binding</span>
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">bindViewModel</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Input: 버튼 탭 이벤트를 viewModel로 전달</span>
        <span class="k">let</span> <span class="nv">input</span> <span class="o">=</span> <span class="kt">SettingViewModel</span><span class="o">.</span><span class="kt">Input</span><span class="p">(</span><span class="nv">logoutTapped</span><span class="p">:</span> <span class="n">logoutBtn</span><span class="o">.</span><span class="n">rx</span><span class="o">.</span><span class="n">tap</span><span class="o">.</span><span class="nf">asObservable</span><span class="p">())</span>
        
        <span class="c1">// Output: transform으로부터 결과 스트림 반환</span>
        <span class="k">let</span> <span class="nv">output</span> <span class="o">=</span> <span class="n">viewModel</span><span class="o">.</span><span class="nf">transform</span><span class="p">(</span><span class="nv">input</span><span class="p">:</span> <span class="n">input</span><span class="p">)</span>
            
        <span class="c1">// Output에 따라 UI 처리</span>
        <span class="n">output</span><span class="o">.</span><span class="n">logoutResult</span>
            <span class="o">.</span><span class="nf">drive</span><span class="p">(</span><span class="nv">onNext</span><span class="p">:</span> <span class="p">{</span> <span class="p">[</span><span class="k">weak</span> <span class="k">self</span><span class="p">]</span> <span class="n">result</span> <span class="k">in</span>
                <span class="k">guard</span> <span class="k">let</span> <span class="nv">self</span> <span class="o">=</span> <span class="k">self</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                
                <span class="k">switch</span> <span class="n">result</span> <span class="p">{</span>
                <span class="k">case</span> <span class="o">.</span><span class="nv">success</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 성공"</span><span class="p">)</span>
                    <span class="k">self</span><span class="o">.</span><span class="n">coordinator</span><span class="p">?</span><span class="o">.</span><span class="nf">showLogin</span><span class="p">()</span>
                <span class="k">case</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="k">let</span> <span class="nv">error</span><span class="p">):</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"로그아웃 실패: </span><span class="se">\(</span><span class="n">error</span><span class="o">.</span><span class="n">localizedDescription</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                <span class="p">}</span>
                
            <span class="p">})</span><span class="o">.</span><span class="nf">disposed</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">disposeBaag</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// ViewModel</span>
<span class="kd">import</span> <span class="kt">FirebaseAuth</span>
<span class="kd">import</span> <span class="kt">RxSwift</span>
<span class="kd">import</span> <span class="kt">RxCocoa</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">SettingViewModel</span> <span class="p">{</span>
    
    <span class="c1">// Rx 리소스 해제를 위한 DisposeBag</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">disposeBag</span> <span class="o">=</span> <span class="kt">DisposeBag</span><span class="p">()</span>
    
    <span class="c1">// View로부터 전달받을 사용자 이벤트 정의</span>
    <span class="kd">struct</span> <span class="kt">Input</span> <span class="p">{</span>
        <span class="c1">// 로그아웃 버튼 탭이벤트</span>
        <span class="k">let</span> <span class="nv">logoutTapped</span><span class="p">:</span> <span class="kt">Observable</span><span class="o">&lt;</span><span class="kt">Void</span><span class="o">&gt;</span>
    <span class="p">}</span>
    
    <span class="c1">// View에 전달할 출력 데이터 정의</span>
    <span class="kd">struct</span> <span class="kt">Output</span> <span class="p">{</span>
        <span class="c1">// 로그아웃 성공 또는 실패에 대한 결과 스트림</span>
        <span class="c1">// Driver를 사용하여 메인스레드에서 UI 바인딩에 안전하게 처리</span>
        <span class="k">let</span> <span class="nv">logoutResult</span><span class="p">:</span> <span class="kt">Driver</span><span class="o">&lt;</span><span class="kt">Result</span><span class="o">&lt;</span><span class="kt">Void</span><span class="p">,</span> <span class="kt">LoginError</span><span class="o">&gt;&gt;</span>
    <span class="p">}</span>
    
    <span class="c1">/// Input을 받아 내부 로직을 수행 후 Output을 반환하는 함수</span>
    <span class="c1">/// - Parameter input: View에서 발생한 이벤트</span>
    <span class="c1">/// - Returns: 로그아웃 결과를 포함하는 Output</span>
    <span class="kd">func</span> <span class="nf">transform</span><span class="p">(</span><span class="nv">input</span><span class="p">:</span> <span class="kt">Input</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Output</span> <span class="p">{</span>
        
        <span class="c1">// 로그아웃 버튼 탭시 로직을 수행하고 결과를 result로 반환</span>
        <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="n">input</span><span class="o">.</span><span class="n">logoutTapped</span>
            <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="o">-&gt;</span> <span class="kt">Result</span><span class="o">&lt;</span><span class="kt">Void</span><span class="p">,</span> <span class="kt">LoginError</span><span class="o">&gt;</span> <span class="k">in</span>
                <span class="k">do</span> <span class="p">{</span>
                    <span class="k">try</span> <span class="kt">Auth</span><span class="o">.</span><span class="nf">auth</span><span class="p">()</span><span class="o">.</span><span class="nf">signOut</span><span class="p">()</span>
                    <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeUser</span><span class="p">()</span>
                    <span class="kt">UserDefaultsManager</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">removeGroup</span><span class="p">()</span>
                    <span class="k">return</span> <span class="o">.</span><span class="nf">success</span><span class="p">(())</span>
                <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="n">logoutError</span><span class="p">)</span>
                <span class="p">}</span>
                <span class="c1">// 에러가 발생하더라도 UI가 멈추지 않고 기본 오류값으로 처리</span>
            <span class="p">}</span><span class="o">.</span><span class="nf">asDriver</span><span class="p">(</span><span class="nv">onErrorJustReturn</span><span class="p">:</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="o">.</span><span class="n">logoutError</span><span class="p">))</span>
        
        <span class="c1">// View에서 사용할 Output rntjd</span>
        <span class="k">return</span> <span class="kt">Output</span><span class="p">(</span><span class="nv">logoutResult</span><span class="p">:</span> <span class="n">result</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="ReactiveX" /><category term="RxSwift" /><summary type="html"><![CDATA[RX - MVVM 예시 기존 코드 - view와 viewModel 구분 없이 하나의 코드로 작성 import UIKit import FirebaseAuth import RxSwift final class SettingViewController: UIViewController { private let disposeBaag = DisposeBag() weak var coordinator: HomeCoordinator? private let viewModel = SettingViewModel() private let homeViewModel: HomeViewModelType init(homeViewModel: HomeViewModelType) { self.homeViewModel = homeViewModel super.init(nibName: nil, bundle: nil) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Component private lazy var logoutBtn: UIButton = { let button = UIButton(type: .system) button.setTitle("로그아웃", for: .normal) button.addTarget(self, action: #selector(logout), for: .touchUpInside) return button }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .background [logoutBtn].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ logoutBtn.centerXAnchor.constraint(equalTo: view.centerXAnchor), logoutBtn.centerYAnchor.constraint(equalTo: view.centerYAnchor), ]) } @objc func logout() { do { UserDefaultsManager.shared.removeUser() UserDefaultsManager.shared.removeGroup() try Auth.auth().signOut() print("로그아웃 성공") coordinator?.showLogin() homeViewModel.stopObservingGroup() } catch let signOutError as NSError { print("로그아웃 실패: %@", signOutError) } } } #Preview { SettingViewController(homeViewModel: StubHomeViewModel(previewPost: .samplePosts[0])) } 개선 코드 - view와 viewModel 구분 // View import UIKit import FirebaseAuth import RxSwift final class SettingViewController: UIViewController { private let disposeBaag = DisposeBag() weak var coordinator: HomeCoordinator? private let viewModel = SettingViewModel() private let homeViewModel: HomeViewModelType init(homeViewModel: HomeViewModelType) { self.homeViewModel = homeViewModel super.init(nibName: nil, bundle: nil) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Component private lazy var logoutBtn: UIButton = { let button = UIButton(type: .system) button.setTitle("로그아웃", for: .normal) return button }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() bindViewModdel() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .background [logoutBtn].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ logoutBtn.centerXAnchor.constraint(equalTo: view.centerXAnchor), logoutBtn.centerYAnchor.constraint(equalTo: view.centerYAnchor), ]) } // MARK: - Binding private func bindViewModdel() { // [Input] 로그아웃 버튼 탭 이벤트를 ViewModel에 전달 logoutBtn.rx.tap .bind(onNext: { [weak self] in guard let self = self else { return } self.viewModel.logout() }) .disposed(by: disposeBaag) // [Output] 로그아웃 처리 결과에 따라 UI 반응 viewModel.logoutResult .observe(on: MainScheduler.instance) .subscribe(onNext: { [weak self] result in guard let self = self else { return } switch result { case .success: print("로그아웃 성공") self.coordinator?.showLogin() case .failure(let error): print("로그아웃 실패: \(error.localizedDescription)") } }) .disposed(by: disposeBaag) } } // ViewModel import FirebaseAuth import RxSwift import RxCocoa protocol SettingViewModelType { func logout() } final class SettingViewModel: SettingViewModelType { // 로그아웃 결과 이벤트 // 로그아웃 결과는 상태가 아닌 한번 일어나는 일회성 이벤트 let logoutResult = PublishRelay&lt;Result&lt;Void, Error&gt;&gt;() func logout() { do { try Auth.auth().signOut() logoutResult.accept(.success(())) UserDefaultsManager.shared.removeUser() UserDefaultsManager.shared.removeGroup() } catch { logoutResult.accept(.failure(error)) } } } 개선 코드 - view와 viewModel 구분 및 Input/Output 패턴 추가 // View import UIKit import FirebaseAuth import RxSwift final class SettingViewController: UIViewController { private let disposeBaag = DisposeBag() weak var coordinator: HomeCoordinator? private let viewModel = SettingViewModel() private let homeViewModel: HomeViewModelType init(homeViewModel: HomeViewModelType) { self.homeViewModel = homeViewModel super.init(nibName: nil, bundle: nil) } required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") } // MARK: - UI Component private lazy var logoutBtn: UIButton = { let button = UIButton(type: .system) button.setTitle("로그아웃", for: .normal) return button }() // MARK: - LifeCycle override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() bindViewModel() } // MARK: - UI Setting private func makeUI() { view.backgroundColor = .background [logoutBtn].forEach { view.addSubview($0) $0.translatesAutoresizingMaskIntoConstraints = false } } private func constraints() { NSLayoutConstraint.activate([ logoutBtn.centerXAnchor.constraint(equalTo: view.centerXAnchor), logoutBtn.centerYAnchor.constraint(equalTo: view.centerYAnchor), ]) } // MARK: - Binding private func bindViewModel() { // Input: 버튼 탭 이벤트를 viewModel로 전달 let input = SettingViewModel.Input(logoutTapped: logoutBtn.rx.tap.asObservable()) // Output: transform으로부터 결과 스트림 반환 let output = viewModel.transform(input: input) // Output에 따라 UI 처리 output.logoutResult .drive(onNext: { [weak self] result in guard let self = self else { return } switch result { case .success: print("로그아웃 성공") self.coordinator?.showLogin() case .failure(let error): print("로그아웃 실패: \(error.localizedDescription)") } }).disposed(by: disposeBaag) } } // ViewModel import FirebaseAuth import RxSwift import RxCocoa final class SettingViewModel { // Rx 리소스 해제를 위한 DisposeBag private let disposeBag = DisposeBag() // View로부터 전달받을 사용자 이벤트 정의 struct Input { // 로그아웃 버튼 탭이벤트 let logoutTapped: Observable&lt;Void&gt; } // View에 전달할 출력 데이터 정의 struct Output { // 로그아웃 성공 또는 실패에 대한 결과 스트림 // Driver를 사용하여 메인스레드에서 UI 바인딩에 안전하게 처리 let logoutResult: Driver&lt;Result&lt;Void, LoginError&gt;&gt; } /// Input을 받아 내부 로직을 수행 후 Output을 반환하는 함수 /// - Parameter input: View에서 발생한 이벤트 /// - Returns: 로그아웃 결과를 포함하는 Output func transform(input: Input) -&gt; Output { // 로그아웃 버튼 탭시 로직을 수행하고 결과를 result로 반환 let result = input.logoutTapped .map { _ -&gt; Result&lt;Void, LoginError&gt; in do { try Auth.auth().signOut() UserDefaultsManager.shared.removeUser() UserDefaultsManager.shared.removeGroup() return .success(()) } catch { return .failure(.logoutError) } // 에러가 발생하더라도 UI가 멈추지 않고 기본 오류값으로 처리 }.asDriver(onErrorJustReturn: .failure(.logoutError)) // View에서 사용할 Output rntjd return Output(logoutResult: result) } }]]></summary></entry><entry><title type="html">[Programmers] 5. 행렬의 곱셈</title><link href="http://localhost:4000/Programmers-5/" rel="alternate" type="text/html" title="[Programmers] 5. 행렬의 곱셈" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-5</id><content type="html" xml:base="http://localhost:4000/Programmers-5/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/05.cpp  <br />
https://school.programmers.co.kr/learn/courses/30/lessons/12949<br />
2차원 배열 arr1과 arr2를 입력받아 arr1에 arr2를 행렬 곱한 결과를 반환하는 solution() 함수를 완성하라</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>배열 arr1, arr2의 행과 열의 길이는 2이상 100 이하이다.</li>
  <li>배열 arr1, arr2의 데이터는 -10 이상 20 이하인 자연수다.</li>
  <li>행렬 곱 할 수 있는 배열만 주어진다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[[1, 4], [3, 2], [4, 1]] <br />
[[3, 3], [3, 3]]<br />
-&gt; [[15, 15], [15, 15], [15, 15]]</p>

<p>[[2, 3, 2], [4, 2, 4], [3, 1, 4]]<br />
[[5, 4, 3], [2, 4, 1], [3, 1, 1]]<br />
-&gt; [[22, 22, 11], [36, 28, 18], [29, 20, 14]]</p>

<h1 id="풀이">풀이</h1>
<p>행렬 ( A ) (크기 ( m \times n ))와 행렬 ( B ) (크기 ( n \times p ))의 곱은 행렬 ( C = AB ) (크기 ( m \times p ))로 정의된다.</p>

\[C_{ij} = \sum_{k=1}^{n} A_{ik} \cdot B_{kj}\]

<p>즉, ( C )의 ( i )행 ( j )열 원소는 ( A )의 ( i )행과 ( B )의 ( j )열의 내적이다.</p>

<hr />

<h2 id="-예시-1-2x2-행렬-곱셈">🔢 예시 1: 2x2 행렬 곱셈</h2>

\[A =
\begin{bmatrix}
1 &amp; 2 \\\\
3 &amp; 4
\end{bmatrix},
\quad
B =
\begin{bmatrix}
5 &amp; 6 \\\\
7 &amp; 8
\end{bmatrix}\]

\[AB =
\begin{bmatrix}
1 \cdot 5 + 2 \cdot 7 &amp; 1 \cdot 6 + 2 \cdot 8 \\\\
3 \cdot 5 + 4 \cdot 7 &amp; 3 \cdot 6 + 4 \cdot 8
\end{bmatrix}
=
\begin{bmatrix}
19 &amp; 22 \\\\
43 &amp; 50
\end{bmatrix}\]

<hr />

<h2 id="-예시-2-3x3-행렬-곱셈">🔢 예시 2: 3x3 행렬 곱셈</h2>

\[A =
\begin{bmatrix}
1 &amp; 2 &amp; 3 \\\\
4 &amp; 5 &amp; 6 \\\\
7 &amp; 8 &amp; 9
\end{bmatrix},
\quad
B =
\begin{bmatrix}
9 &amp; 8 &amp; 7 \\\\
6 &amp; 5 &amp; 4 \\\\
3 &amp; 2 &amp; 1
\end{bmatrix}\]

\[AB =
\begin{bmatrix}
30 &amp; 24 &amp; 18 \\\\
84 &amp; 69 &amp; 54 \\\\
138 &amp; 114 &amp; 90
\end{bmatrix}\]

<p>A 행렬의 크기가 (M<em>K)이고, B 행렬의 크기가 (K</em>N)일 때 두 행렬의 곱 연산은 행렬 A의 행의 개수(K)와 행렬 B의 열의 개수(k)가 같아야 하며 K를 기준으로 곱하기 때문에 행렬 곱 결과는 M * N이 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">arr1</span><span class="p">:</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]],</span> <span class="n">_</span> <span class="nv">arr2</span><span class="p">:</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]]</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">rows</span> <span class="o">=</span> <span class="n">arr1</span><span class="o">.</span><span class="n">count</span>
    <span class="k">let</span> <span class="nv">cols</span> <span class="o">=</span> <span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">count</span>

    <span class="c1">// 최종 행렬 곱 결과를 저장할 배열 선언</span>
    <span class="k">var</span> <span class="nv">answer</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="kt">Array</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">cols</span><span class="p">),</span> <span class="nv">count</span><span class="p">:</span> <span class="n">rows</span><span class="p">)</span>
    
    <span class="c1">// arr1의 각 행과 arr2의 각 열에 대해 반복문 수행</span>
    <span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">rows</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">cols</span> <span class="p">{</span>
            <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">arr2</span><span class="o">.</span><span class="n">count</span> <span class="p">{</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="o">+=</span> <span class="n">arr1</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">arr2</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">col</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>        
    <span class="k">return</span> <span class="n">answer</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">print2D</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[[</span><span class="kt">Int</span><span class="p">]])</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="n">vec</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">row</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="nf">print</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">print2D</span><span class="p">(</span><span class="nf">solution</span><span class="p">(</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
        <span class="p">]))</span>
    
    <span class="nf">print2D</span><span class="p">(</span><span class="nf">solution</span><span class="p">(</span>
        <span class="p">[</span>
           <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">4</span> <span class="p">,</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
           <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
            <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>
        <span class="p">]))</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">arr1</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">arr2</span><span class="p">)</span> <span class="p">{</span>
    
    <span class="c1">// 최종 행렬 곱 결과를 저장할 벡터 선언</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">answer</span><span class="p">;</span>
    
    <span class="c1">// arr1, arr2 행렬 곱을 수행했을 때 최종 행렬의 크기만큼 공간을 할당</span>
    <span class="n">answer</span><span class="p">.</span><span class="n">assign</span><span class="p">(</span><span class="n">arr1</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">arr2</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="n">size</span><span class="p">(),</span> <span class="mi">0</span><span class="p">));</span>
    
    <span class="c1">// arr1의 각 행과 arr2의 각 열에 대해 반복문 수행</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">arr1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">arr2</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="n">arr2</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">answer</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">arr1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">arr2</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="n">j</span><span class="p">];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/05.cpp https://school.programmers.co.kr/learn/courses/30/lessons/12949 2차원 배열 arr1과 arr2를 입력받아 arr1에 arr2를 행렬 곱한 결과를 반환하는 solution() 함수를 완성하라 제약조건 배열 arr1, arr2의 행과 열의 길이는 2이상 100 이하이다. 배열 arr1, arr2의 데이터는 -10 이상 20 이하인 자연수다. 행렬 곱 할 수 있는 배열만 주어진다. 입출력 예 [[1, 4], [3, 2], [4, 1]] [[3, 3], [3, 3]] -&gt; [[15, 15], [15, 15], [15, 15]] [[2, 3, 2], [4, 2, 4], [3, 1, 4]] [[5, 4, 3], [2, 4, 1], [3, 1, 1]] -&gt; [[22, 22, 11], [36, 28, 18], [29, 20, 14]] 풀이 행렬 ( A ) (크기 ( m \times n ))와 행렬 ( B ) (크기 ( n \times p ))의 곱은 행렬 ( C = AB ) (크기 ( m \times p ))로 정의된다. \[C_{ij} = \sum_{k=1}^{n} A_{ik} \cdot B_{kj}\] 즉, ( C )의 ( i )행 ( j )열 원소는 ( A )의 ( i )행과 ( B )의 ( j )열의 내적이다. 🔢 예시 1: 2x2 행렬 곱셈 \[A = \begin{bmatrix} 1 &amp; 2 \\\\ 3 &amp; 4 \end{bmatrix}, \quad B = \begin{bmatrix} 5 &amp; 6 \\\\ 7 &amp; 8 \end{bmatrix}\] \[AB = \begin{bmatrix} 1 \cdot 5 + 2 \cdot 7 &amp; 1 \cdot 6 + 2 \cdot 8 \\\\ 3 \cdot 5 + 4 \cdot 7 &amp; 3 \cdot 6 + 4 \cdot 8 \end{bmatrix} = \begin{bmatrix} 19 &amp; 22 \\\\ 43 &amp; 50 \end{bmatrix}\] 🔢 예시 2: 3x3 행렬 곱셈 \[A = \begin{bmatrix} 1 &amp; 2 &amp; 3 \\\\ 4 &amp; 5 &amp; 6 \\\\ 7 &amp; 8 &amp; 9 \end{bmatrix}, \quad B = \begin{bmatrix} 9 &amp; 8 &amp; 7 \\\\ 6 &amp; 5 &amp; 4 \\\\ 3 &amp; 2 &amp; 1 \end{bmatrix}\] \[AB = \begin{bmatrix} 30 &amp; 24 &amp; 18 \\\\ 84 &amp; 69 &amp; 54 \\\\ 138 &amp; 114 &amp; 90 \end{bmatrix}\] A 행렬의 크기가 (MK)이고, B 행렬의 크기가 (KN)일 때 두 행렬의 곱 연산은 행렬 A의 행의 개수(K)와 행렬 B의 열의 개수(k)가 같아야 하며 K를 기준으로 곱하기 때문에 행렬 곱 결과는 M * N이 된다. import Foundation func solution(_ arr1: [[Int]], _ arr2: [[Int]]) -&gt; [[Int]] { let rows = arr1.count let cols = arr2[0].count // 최종 행렬 곱 결과를 저장할 배열 선언 var answer = Array(repeating: Array(repeating: 0, count: cols), count: rows) // arr1의 각 행과 arr2의 각 열에 대해 반복문 수행 for row in 0..&lt;rows { for col in 0..&lt;cols { for k in 0..&lt;arr2.count { answer[row][col] += arr1[row][k] * arr2[k][col] } } } return answer } func print2D(_ vec: [[Int]]) { for row in vec { print(row.map { String($0) }.joined(separator: " ")) } print() } func main() { print2D(solution( [ [1, 4], [2, 3], [4, 1] ], [ [3, 3], [3, 3] ])) print2D(solution( [ [2, 3, 2], [4 ,2, 4], [3, 1, 4] ], [ [5, 4, 3], [2, 4, 1], [3, 1, 1] ])) } main() #include &lt;string&gt; #include &lt;vector&gt; using namespace std; vector&lt;vector&lt;int&gt;&gt; solution(vector&lt;vector&lt;int&gt;&gt; arr1, vector&lt;vector&lt;int&gt;&gt; arr2) { // 최종 행렬 곱 결과를 저장할 벡터 선언 vector&lt;vector&lt;int&gt;&gt; answer; // arr1, arr2 행렬 곱을 수행했을 때 최종 행렬의 크기만큼 공간을 할당 answer.assign(arr1.size(), vector&lt;int&gt;(arr2[1].size(), 0)); // arr1의 각 행과 arr2의 각 열에 대해 반복문 수행 for (int i=0; i&lt;arr1.size(); i++) { for (int j=0; j&lt;arr2[0].size(); j++) { for (int k=0; k&lt;arr2.size(); k++) { answer[i][j] += arr1[i][k] * arr2[k][j]; } } } return answer; }]]></summary></entry><entry><title type="html">[Library] Kingfisher</title><link href="http://localhost:4000/Library-Kingfisher/" rel="alternate" type="text/html" title="[Library] Kingfisher" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BLibrary%5D-Kingfisher</id><content type="html" xml:base="http://localhost:4000/Library-Kingfisher/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="kingfisher-기능">Kingfisher 기능</h1>
<ul>
  <li>이미지 로드 기능(url을 넘겨주면 이미지를 로드한다)</li>
  <li>이미지 캐시 기능</li>
  <li>UIImageView에 편리하게 round 처리 기능</li>
  <li>이미지 다운로드 기능</li>
</ul>

<h2 id="이미지-로드-기능">이미지 로드 기능</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">func</span> <span class="nf">loadImage</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https:</span><span class="se">\\</span><span class="s">..."</span><span class="p">)</span>
    <span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="indicator-기능">Indicator 기능</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="n">indicatorType</span> <span class="o">=</span> <span class="o">.</span><span class="n">activity</span>
<span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span>
    <span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">,</span>
    <span class="nv">placeHolder</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
    <span class="nv">options</span><span class="p">:</span> <span class="kc">nil</span><span class="o">.</span>
    <span class="nv">completionHandler</span><span class="p">:</span> <span class="kc">nil</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="예제코드">예제코드</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">Kingfisher</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">KingfisherViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
    
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">myImageView</span><span class="p">:</span> <span class="kt">UIImageView</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">image</span> <span class="o">=</span> <span class="kt">UIImageView</span><span class="p">()</span>
        <span class="n">image</span><span class="o">.</span><span class="n">layer</span><span class="o">.</span><span class="n">cornerRadius</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">image</span><span class="o">.</span><span class="n">clipsToBounds</span> <span class="o">=</span> <span class="kc">true</span>
        <span class="k">return</span> <span class="n">image</span>
    <span class="p">}()</span>
    
    <span class="k">override</span> <span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>
        
        <span class="nf">makeUI</span><span class="p">()</span>
        <span class="nf">constraints</span><span class="p">()</span>
        <span class="nf">loadImage</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">makeUI</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">view</span><span class="o">.</span><span class="n">backgroundColor</span> <span class="o">=</span> <span class="o">.</span><span class="n">white</span>
        <span class="n">view</span><span class="o">.</span><span class="nf">addSubview</span><span class="p">(</span><span class="n">myImageView</span><span class="p">)</span>
        <span class="n">myImageView</span><span class="o">.</span><span class="n">translatesAutoresizingMaskIntoConstraints</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">constraints</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">NSLayoutConstraint</span><span class="o">.</span><span class="nf">activate</span><span class="p">([</span>
            <span class="n">myImageView</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerYAnchor</span><span class="p">),</span>
            <span class="n">myImageView</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalTo</span><span class="p">:</span> <span class="n">view</span><span class="o">.</span><span class="n">centerXAnchor</span><span class="p">),</span>
            
            <span class="n">myImageView</span><span class="o">.</span><span class="n">widthAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">300</span><span class="p">),</span>
            <span class="n">myImageView</span><span class="o">.</span><span class="n">heightAnchor</span><span class="o">.</span><span class="nf">constraint</span><span class="p">(</span><span class="nv">equalToConstant</span><span class="p">:</span> <span class="mi">200</span><span class="p">)</span>
        <span class="p">])</span>
    <span class="p">}</span>
    
    <span class="kd">private</span> <span class="kd">func</span> <span class="nf">loadImage</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv8sv01DK7BoJGaJMZ972ig5mQ_JBbqxdINQ&amp;s"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
                
        <span class="n">myImageView</span><span class="o">.</span><span class="n">kf</span><span class="o">.</span><span class="nf">setImage</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="cp">#Preview {</span>
    <span class="kt">KingfisherViewController</span><span class="p">()</span>
<span class="p">}</span>

</code></pre></div></div>

<p><img src="/assets/img/2025-05-28-%5BLibrary%5D-Kingfisher/image-20250528220449050.png" alt="이미지" width="50%" /></p>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://ios-development.tistory.com/793</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Library" /><summary type="html"><![CDATA[Kingfisher 기능 이미지 로드 기능(url을 넘겨주면 이미지를 로드한다) 이미지 캐시 기능 UIImageView에 편리하게 round 처리 기능 이미지 다운로드 기능 이미지 로드 기능 private func loadImage() { guard let url = URL(string: "https:\\...") myImageView.kf.setImage(with: url) } Indicator 기능 myImageView.kf.indicatorType = .activity myImageView.kf.setImage( with: url, placeHolder: nil, options: nil. completionHandler: nil ) 예제코드 import UIKit import Kingfisher final class KingfisherViewController: UIViewController { private lazy var myImageView: UIImageView = { let image = UIImageView() image.layer.cornerRadius = 30 image.clipsToBounds = true return image }() override func viewDidLoad() { super.viewDidLoad() makeUI() constraints() loadImage() } private func makeUI() { view.backgroundColor = .white view.addSubview(myImageView) myImageView.translatesAutoresizingMaskIntoConstraints = false } private func constraints() { NSLayoutConstraint.activate([ myImageView.centerYAnchor.constraint(equalTo: view.centerYAnchor), myImageView.centerXAnchor.constraint(equalTo: view.centerXAnchor), myImageView.widthAnchor.constraint(equalToConstant: 300), myImageView.heightAnchor.constraint(equalToConstant: 200) ]) } private func loadImage() { guard let url = URL(string: "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQv8sv01DK7BoJGaJMZ972ig5mQ_JBbqxdINQ&amp;s") else { return } myImageView.kf.setImage(with: url) } } #Preview { KingfisherViewController() } Reference https://ios-development.tistory.com/793]]></summary></entry><entry><title type="html">[Xcode] 라이브러리 설치 에러 해결</title><link href="http://localhost:4000/Xcode-XcodeError/" rel="alternate" type="text/html" title="[Xcode] 라이브러리 설치 에러 해결" /><published>2025-05-28T00:00:00+00:00</published><updated>2025-05-28T00:00:00+00:00</updated><id>http://localhost:4000/%5BXcode%5D-XcodeError</id><content type="html" xml:base="http://localhost:4000/Xcode-XcodeError/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="해결법">해결법</h1>

<p>✅ Package.resolved 삭제 명령어<br />
rm -f ./Package.resolved<br />
rm -f ./EUMMEYO.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved<br />
두 파일이 둘 다 존재할 수 있으니, 둘 다 삭제하는 게 좋습니다.<br />
✅ 이후 조치<br />
Xcode 완전히 종료 (⌘ + Q)<br />
다시 Xcode 실행<br />
메뉴에서 → File → Packages → Resolve Package Versions 선택<br />
🔁 그래도 안 되면?<br />
Xcode &gt; Preferences &gt; Locations &gt; DerivedData 열기 → 전체 삭제<br />
또는 터미널에서:<br />
rm -rf ~/Library/Developer/Xcode/DerivedData</p>]]></content><author><name>Dong Hyeon</name></author><category term="Xcode" /><summary type="html"><![CDATA[해결법 ✅ Package.resolved 삭제 명령어 rm -f ./Package.resolved rm -f ./EUMMEYO.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved 두 파일이 둘 다 존재할 수 있으니, 둘 다 삭제하는 게 좋습니다. ✅ 이후 조치 Xcode 완전히 종료 (⌘ + Q) 다시 Xcode 실행 메뉴에서 → File → Packages → Resolve Package Versions 선택 🔁 그래도 안 되면? Xcode &gt; Preferences &gt; Locations &gt; DerivedData 열기 → 전체 삭제 또는 터미널에서: rm -rf ~/Library/Developer/Xcode/DerivedData]]></summary></entry><entry><title type="html">[Xcode] fastlane 에러 해결</title><link href="http://localhost:4000/UIKit-fastlaneError/" rel="alternate" type="text/html" title="[Xcode] fastlane 에러 해결" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-fastlaneError</id><content type="html" xml:base="http://localhost:4000/UIKit-fastlaneError/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="fastlane-에러-해결">fastlane 에러 해결</h1>

<h2 id="깃-저장소에서-관련-내용-삭제">깃 저장소에서 관련 내용 삭제</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 각 명령에서 질문 나오면 y 눌러주기 -&gt; 깃허브에서 제거됨</span>
fastlane match nuke distribution
fastlane match nuke development
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 인증서 &amp; 프로비저닝 프로파일 생성 -&gt; 깃허브에 저장됨</span>
fastlane match appstore
fastlane match development
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 팀원이 같은 인증서를 내려받을 때</span>
fastlane match appstore <span class="nt">--readonly</span>
fastlane match development <span class="nt">--readonly</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Xcode" /><summary type="html"><![CDATA[fastlane 에러 해결 깃 저장소에서 관련 내용 삭제 ## 각 명령에서 질문 나오면 y 눌러주기 -&gt; 깃허브에서 제거됨 fastlane match nuke distribution fastlane match nuke development ## 인증서 &amp; 프로비저닝 프로파일 생성 -&gt; 깃허브에 저장됨 fastlane match appstore fastlane match development ## 팀원이 같은 인증서를 내려받을 때 fastlane match appstore --readonly fastlane match development --readonly]]></summary></entry><entry><title type="html">[Programmers] 3. 두 수를 뽑아서 더하기</title><link href="http://localhost:4000/Programmers-3/" rel="alternate" type="text/html" title="[Programmers] 3. 두 수를 뽑아서 더하기" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-3</id><content type="html" xml:base="http://localhost:4000/Programmers-3/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/03.cpp  <br />
정수 배열 numbers가 주어진다. numbers에서 서로 다른 인덱스에 있는 2개의 수를 뽑아 더해 만들 수 있는 모든 수를 배열에 오름차순으로 담아 반환하는 solution() 함수를 완성하라.</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>numbers의 길이는 2 이상 100 이하이다.</li>
  <li>numbers의 모든 수는 0 이상 100 이하이다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[2, 1, 3, 4, 1] -&gt; [2, 3, 4, 5, 6, 7]  <br />
[5, 0, 2, 7] -&gt; [2, 5, 7, 9, 12]</p>

<h1 id="풀이">풀이</h1>

<blockquote>
  <p><strong>조합 nCr - 순서가 중요하지 않음</strong></p>
</blockquote>

<ul>
  <li>공통 공식:  <br />
\(C(n, r) = \frac{n!}{(n - r)! \cdot r!}\)</li>
  <li>예시: 5명 중 2명을 뽑는 경우  <br />
\(C(5, 2) = \frac{5!}{3! \cdot 2!} = \frac{120}{6 \cdot 2} = 10\)</li>
</ul>

<blockquote>
  <p><strong>순열 nPr - 순서가 중요함</strong></p>
</blockquote>

<ul>
  <li>공통 공식:  <br />
\(P(n, r) = \frac{n!}{(n - r)!}\)</li>
  <li>예시: 5명 중 2명을 뽑아 순서를 나누는 경우  <br />
\(P(5, 2) = \frac{5!}{3!} = \frac{120}{6} = 20\)</li>
</ul>

<p>이 문제에서는 조합으로 풀면 된다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
     4 2 2 1 1 3 4
     2 2 1 1 3 4
     2 1 1 3 4
     1 1 3 4
     1 3 4
     3 4
     4
*/</span>
<span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">numbers</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>

    <span class="c1">// 배열 크기</span>
    <span class="k">let</span> <span class="nv">cnt</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">count</span>
    
    <span class="c1">// 두 수의 합을 저장할 공간</span>
    <span class="k">var</span> <span class="nv">set</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">cnt</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">cnt</span> <span class="p">{</span>
            <span class="c1">// 모든 조합의 합</span>
            <span class="k">set</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="c1">// O(n^2) </span>
        <span class="p">}</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="kt">Array</span><span class="p">(</span><span class="k">set</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>                  <span class="c1">// Set -&gt; Array O(n)</span>
                                                <span class="c1">// sorted() O(n^2 log n)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">printSolution</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">vec</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]))</span> <span class="c1">// 2 3 4 5 6 7</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>    <span class="c1">// 2 5 7 9 12</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;set&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// 내가한 방법</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution2</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">arr</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span> <span class="c1">// O(n^2)</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>               <span class="c1">// O(n^2 log n^2) = O(n^2 log n)</span>
    <span class="n">arr</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span> <span class="c1">// O(n^2)</span>
    <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 모범 답안</span>
<span class="c1">// set은 중복값을 자동으로 제거해주고, 오름차순으로 데이터를 정렬해준다</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sum</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  
            <span class="n">sum</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span> <span class="c1">// O(n^2 log n)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">answer</span><span class="p">(</span><span class="n">sum</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">sum</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/03.cpp 정수 배열 numbers가 주어진다. numbers에서 서로 다른 인덱스에 있는 2개의 수를 뽑아 더해 만들 수 있는 모든 수를 배열에 오름차순으로 담아 반환하는 solution() 함수를 완성하라. 제약조건 numbers의 길이는 2 이상 100 이하이다. numbers의 모든 수는 0 이상 100 이하이다. 입출력 예 [2, 1, 3, 4, 1] -&gt; [2, 3, 4, 5, 6, 7] [5, 0, 2, 7] -&gt; [2, 5, 7, 9, 12] 풀이 조합 nCr - 순서가 중요하지 않음 공통 공식: \(C(n, r) = \frac{n!}{(n - r)! \cdot r!}\) 예시: 5명 중 2명을 뽑는 경우 \(C(5, 2) = \frac{5!}{3! \cdot 2!} = \frac{120}{6 \cdot 2} = 10\) 순열 nPr - 순서가 중요함 공통 공식: \(P(n, r) = \frac{n!}{(n - r)!}\) 예시: 5명 중 2명을 뽑아 순서를 나누는 경우 \(P(5, 2) = \frac{5!}{3!} = \frac{120}{6} = 20\) 이 문제에서는 조합으로 풀면 된다. /* 4 2 2 1 1 3 4 2 2 1 1 3 4 2 1 1 3 4 1 1 3 4 1 3 4 3 4 4 */ import Foundation func solution(_ numbers: [Int]) -&gt; [Int] { // 배열 크기 let cnt = numbers.count // 두 수의 합을 저장할 공간 var set = Set&lt;Int&gt;() for i in 0..&lt;cnt { for j in i+1..&lt;cnt { // 모든 조합의 합 set.insert(numbers[i] + numbers[j]) // O(n^2) } } return Array(set).sorted() // Set -&gt; Array O(n) // sorted() O(n^2 log n) } func printSolution(_ vec: [Int]) { print(vec.map { String($0) }.joined(separator: " ")) } func main() { printSolution(solution([2, 1, 3, 4, 1])) // 2 3 4 5 6 7 printSolution(solution([5, 0, 2, 7])) // 2 5 7 9 12 } main() #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;set&gt; using namespace std; // 내가한 방법 vector&lt;int&gt; solution2(vector&lt;int&gt; numbers) { vector&lt;int&gt; arr; for (int i=0; i&lt;numbers.size(); i++) { for (int j=i+1; j&lt;numbers.size(); j++) arr.push_back(numbers[i] + numbers[j]); // O(n^2) } sort(arr.begin(), arr.end()); // O(n^2 log n^2) = O(n^2 log n) arr.erase(unique(arr.begin(), arr.end()), arr.end()); // O(n^2) return arr; } // 모범 답안 // set은 중복값을 자동으로 제거해주고, 오름차순으로 데이터를 정렬해준다 vector&lt;int&gt; solution(vector&lt;int&gt; numbers) { set&lt;int&gt; sum; for (int i=0; i&lt;numbers.size(); i++) { for (int j=i+1; j&lt;numbers.size(); j++) { sum.insert(numbers[i] + numbers[j]); // O(n^2 log n) } } vector&lt;int&gt; answer(sum.begin(), sum.end()); return answer; }]]></summary></entry><entry><title type="html">[Programmers] 2. 배열 제어하기</title><link href="http://localhost:4000/Programmers-2/" rel="alternate" type="text/html" title="[Programmers] 2. 배열 제어하기" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-2</id><content type="html" xml:base="http://localhost:4000/Programmers-2/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/02.cpp  <br />
정수 배열 lst가 주어진다. 배열의 중복값을 제거하고 배열 데이터를 내림차순으로 정렬해서 반환하는 solution()함수를 구현하라.</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>lst의 길이는 2 이상 1,000 이하이다.</li>
  <li>lst의 원소 값은 -100,000 이상 100,000 이하이다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[4, 2, 2, 1, 3, 4] -&gt; [4, 3, 2, 1]  <br />
[2, 1, 1, 3, 2, 5, 4] -&gt; [5, 4, 3, 2, 1]</p>

<h1 id="풀이">풀이</h1>
<p>배열과 Set 사용법이 요구되었다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">lst</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">setList</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="kt">Set</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span>                <span class="c1">// O(n) </span>
    <span class="k">let</span> <span class="nv">sortedList</span> <span class="o">=</span> <span class="n">setList</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">compare</span><span class="p">)</span> <span class="c1">// O(n logn) -&gt; Timsort</span>
    <span class="k">return</span> <span class="n">sortedList</span>
<span class="p">}</span>

<span class="c1">// 결과를 출력하는 함수</span>
<span class="kd">func</span> <span class="nf">printSolution</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">vec</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// 메인 함수</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]))</span> <span class="c1">// 4 3 2 1</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">]))</span> <span class="c1">// 5 4 3 2 1</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// sort(시작 반복자, 끝 반복자)</span>
<span class="c1">// sort(시작 반복자, 끝 반복자, 비교 함수)    비교 함수는 반환값이 false일 때 원소의 위치를 바꾼다</span>
<span class="c1">// sort(v.rbegin(), v.rend())</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">lst</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//sort(lst.rbegin(), lst.rend());</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">lst</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">lst</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compare</span><span class="p">);</span>                <span class="c1">// O(n log n) -&gt; IntroSort</span>
    <span class="n">lst</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">lst</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">lst</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">lst</span><span class="p">.</span><span class="n">end</span><span class="p">());</span> <span class="c1">// O(n)</span>
    <span class="k">return</span> <span class="n">lst</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">copy</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">" "</span><span class="p">));</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}));</span> <span class="c1">// 4 3 2 1</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">}));</span> <span class="c1">// 5 4 3 2 1</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/02.cpp 정수 배열 lst가 주어진다. 배열의 중복값을 제거하고 배열 데이터를 내림차순으로 정렬해서 반환하는 solution()함수를 구현하라. 제약조건 lst의 길이는 2 이상 1,000 이하이다. lst의 원소 값은 -100,000 이상 100,000 이하이다. 입출력 예 [4, 2, 2, 1, 3, 4] -&gt; [4, 3, 2, 1] [2, 1, 1, 3, 2, 5, 4] -&gt; [5, 4, 3, 2, 1] 풀이 배열과 Set 사용법이 요구되었다. import Foundation func compare(_ a: Int, _ b: Int) -&gt; Bool { return a &gt; b } func solution(_ lst: [Int]) -&gt; [Int] { let setList = Array(Set(lst)) // O(n) let sortedList = setList.sorted(by: compare) // O(n logn) -&gt; Timsort return sortedList } // 결과를 출력하는 함수 func printSolution(_ vec: [Int]) { print(vec.map { String($0) }.joined(separator: " ")) } // 메인 함수 func main() { printSolution(solution([4, 2, 2, 1, 1, 3, 4])) // 4 3 2 1 printSolution(solution([2, 1, 1, 3, 2, 5, 4])) // 5 4 3 2 1 } main() #include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; bool compare(int a, int b) { return a &gt; b; } // sort(시작 반복자, 끝 반복자) // sort(시작 반복자, 끝 반복자, 비교 함수) 비교 함수는 반환값이 false일 때 원소의 위치를 바꾼다 // sort(v.rbegin(), v.rend()) vector&lt;int&gt; solution(vector&lt;int&gt; lst) { //sort(lst.rbegin(), lst.rend()); sort(lst.begin(), lst.end(), compare); // O(n log n) -&gt; IntroSort lst.erase(unique(lst.begin(), lst.end()), lst.end()); // O(n) return lst; } #include &lt;iterator&gt; void print(vector&lt;int&gt; vec) { copy(vec.begin(), vec.end(), std::ostream_iterator&lt;int&gt;(cout, " ")); cout &lt;&lt; endl; } int main() { print(solution({4, 2, 2, 1, 1, 3, 4})); // 4 3 2 1 print(solution({2, 1, 1, 3, 2, 5, 4})); // 5 4 3 2 1 return 0; }]]></summary></entry></feed>