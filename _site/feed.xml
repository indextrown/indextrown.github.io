<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-26T15:36:31+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">DongHyeon Kim’s Blog</title><subtitle>Swift와 크롤링 기술을 통해 안전한 세상을 만들고 싶습니다.</subtitle><author><name>Dong Hyeon</name></author><entry><title type="html">[Xcode] fastlane 에러 해결</title><link href="http://localhost:4000/UIKit-fastlaneError/" rel="alternate" type="text/html" title="[Xcode] fastlane 에러 해결" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-fastlaneError</id><content type="html" xml:base="http://localhost:4000/UIKit-fastlaneError/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="fastlane-에러-해결">fastlane 에러 해결</h1>

<h2 id="깃-저장소에서-관련-내용-삭제">깃 저장소에서 관련 내용 삭제</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 각 명령에서 질문 나오면 y 눌러주기 -&gt; 깃허브에서 제거됨</span>
fastlane match nuke distribution
fastlane match nuke development
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 인증서 &amp; 프로비저닝 프로파일 생성 -&gt; 깃허브에 저장됨</span>
fastlane match appstore
fastlane match development
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## 팀원이 같은 인증서를 내려받을 때</span>
fastlane match appstore <span class="nt">--readonly</span>
fastlane match development <span class="nt">--readonly</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Xcode" /><summary type="html"><![CDATA[fastlane 에러 해결 깃 저장소에서 관련 내용 삭제 ## 각 명령에서 질문 나오면 y 눌러주기 -&gt; 깃허브에서 제거됨 fastlane match nuke distribution fastlane match nuke development ## 인증서 &amp; 프로비저닝 프로파일 생성 -&gt; 깃허브에 저장됨 fastlane match appstore fastlane match development ## 팀원이 같은 인증서를 내려받을 때 fastlane match appstore --readonly fastlane match development --readonly]]></summary></entry><entry><title type="html">[Programmers] 2. 배열 제어하기</title><link href="http://localhost:4000/Programmers-2/" rel="alternate" type="text/html" title="[Programmers] 2. 배열 제어하기" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-2</id><content type="html" xml:base="http://localhost:4000/Programmers-2/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/02.cpp  <br />
정수 배열 lst가 주어진다. 배열의 중복값을 제거하고 배열 데이터를 내림차순으로 정렬해서 반환하는 solution()함수를 구현하라.</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>lst의 길이는 2 이상 1,000 이하이다.</li>
  <li>lst의 원소 값은 -100,000 이상 100,000 이하이다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[4, 2, 2, 1, 3, 4] -&gt; [4, 3, 2, 1]<br />
[2, 1, 1, 3, 2, 5, 4] -&gt; [5, 4, 3, 2, 1]</p>

<h1 id="풀이">풀이</h1>
<p>배열과 Set 사용법이 요구되었다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">compare</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">lst</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">setList</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="kt">Set</span><span class="p">(</span><span class="n">lst</span><span class="p">))</span>                <span class="c1">// O(n) </span>
    <span class="k">let</span> <span class="nv">sortedList</span> <span class="o">=</span> <span class="n">setList</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="n">compare</span><span class="p">)</span> <span class="c1">// O(n logn) -&gt; Timsort</span>
    <span class="k">return</span> <span class="n">sortedList</span>
<span class="p">}</span>

<span class="c1">// 결과를 출력하는 함수</span>
<span class="kd">func</span> <span class="nf">printSolution</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">vec</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// 메인 함수</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]))</span> <span class="c1">// 4 3 2 1</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">]))</span> <span class="c1">// 5 4 3 2 1</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">compare</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// sort(시작 반복자, 끝 반복자)</span>
<span class="c1">// sort(시작 반복자, 끝 반복자, 비교 함수)    비교 함수는 반환값이 false일 때 원소의 위치를 바꾼다</span>
<span class="c1">// sort(v.rbegin(), v.rend())</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">lst</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//sort(lst.rbegin(), lst.rend());</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">lst</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">lst</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">compare</span><span class="p">);</span>                <span class="c1">// O(n log n) -&gt; IntroSort</span>
    <span class="n">lst</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">lst</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">lst</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">lst</span><span class="p">.</span><span class="n">end</span><span class="p">());</span> <span class="c1">// O(n)</span>
    <span class="k">return</span> <span class="n">lst</span><span class="p">;</span>
<span class="p">}</span>

<span class="cp">#include</span> <span class="cpf">&lt;iterator&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">copy</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">" "</span><span class="p">));</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}));</span> <span class="c1">// 4 3 2 1</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">}));</span> <span class="c1">// 5 4 3 2 1</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/02.cpp 정수 배열 lst가 주어진다. 배열의 중복값을 제거하고 배열 데이터를 내림차순으로 정렬해서 반환하는 solution()함수를 구현하라. 제약조건 lst의 길이는 2 이상 1,000 이하이다. lst의 원소 값은 -100,000 이상 100,000 이하이다. 입출력 예 [4, 2, 2, 1, 3, 4] -&gt; [4, 3, 2, 1] [2, 1, 1, 3, 2, 5, 4] -&gt; [5, 4, 3, 2, 1] 풀이 배열과 Set 사용법이 요구되었다. func compare(_ a: Int, _ b: Int) -&gt; Bool { return a &gt; b } func solution(_ lst: [Int]) -&gt; [Int] { let setList = Array(Set(lst)) // O(n) let sortedList = setList.sorted(by: compare) // O(n logn) -&gt; Timsort return sortedList } // 결과를 출력하는 함수 func printSolution(_ vec: [Int]) { print(vec.map { String($0) }.joined(separator: " ")) } // 메인 함수 func main() { printSolution(solution([4, 2, 2, 1, 1, 3, 4])) // 4 3 2 1 printSolution(solution([2, 1, 1, 3, 2, 5, 4])) // 5 4 3 2 1 } main() #include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; bool compare(int a, int b) { return a &gt; b; } // sort(시작 반복자, 끝 반복자) // sort(시작 반복자, 끝 반복자, 비교 함수) 비교 함수는 반환값이 false일 때 원소의 위치를 바꾼다 // sort(v.rbegin(), v.rend()) vector&lt;int&gt; solution(vector&lt;int&gt; lst) { //sort(lst.rbegin(), lst.rend()); sort(lst.begin(), lst.end(), compare); // O(n log n) -&gt; IntroSort lst.erase(unique(lst.begin(), lst.end()), lst.end()); // O(n) return lst; } #include &lt;iterator&gt; void print(vector&lt;int&gt; vec) { copy(vec.begin(), vec.end(), std::ostream_iterator&lt;int&gt;(cout, " ")); cout &lt;&lt; endl; } int main() { print(solution({4, 2, 2, 1, 1, 3, 4})); // 4 3 2 1 print(solution({2, 1, 1, 3, 2, 5, 4})); // 5 4 3 2 1 return 0; }]]></summary></entry><entry><title type="html">[Programmers] 1. 배열 정렬하기</title><link href="http://localhost:4000/Programmers-1/" rel="alternate" type="text/html" title="[Programmers] 1. 배열 정렬하기" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-1</id><content type="html" xml:base="http://localhost:4000/Programmers-1/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/01.cpp  <br />
정수 배열 arr을 오름차순으로 정렬해서 반환하는 solution() 함수를 완성하라.</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>arr의 길이는 2 이상 10^5 이하이다.</li>
  <li>arr의 원소 값은 -100,000 이상 100,000 이하이다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[1, -5, 2, 4, 3] -&gt; [-5, 1, 2, 3, 4]  <br />
[2, 1, 1, 3, 2, 5,4] -&gt; [1, 1, 2, 2, 3, 4, 5]<br />
[6, 1, 7] -&gt; 1, 6, 7</p>

<h1 id="풀이">풀이</h1>
<p>기본적인 정렬 사용법이 요구되었다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">arr</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">arr</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// 결과를 출력하는 함수</span>
<span class="kd">func</span> <span class="nf">printSolution</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">vec</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
<span class="p">}</span>

<span class="c1">// 메인 함수</span>
<span class="kd">func</span> <span class="nf">start</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">]))</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">]))</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>
<span class="p">}</span>

<span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">Main</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">start</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 테스트 코드</span>
<span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="kt">void</span> <span class="nf">print</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">vec</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">copy</span><span class="p">(</span><span class="n">vec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">vec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cout</span><span class="p">,</span> <span class="s">" "</span><span class="p">));</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">}));</span>      <span class="c1">// -5 1 2 3 4</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">}));</span> <span class="c1">// 1 1 2 2 3 4 5</span>
    <span class="n">print</span><span class="p">(</span><span class="n">solution</span><span class="p">({</span><span class="mi">6</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">}));</span>             <span class="c1">// 1 6 7</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/01.cpp 정수 배열 arr을 오름차순으로 정렬해서 반환하는 solution() 함수를 완성하라. 제약조건 arr의 길이는 2 이상 10^5 이하이다. arr의 원소 값은 -100,000 이상 100,000 이하이다. 입출력 예 [1, -5, 2, 4, 3] -&gt; [-5, 1, 2, 3, 4] [2, 1, 1, 3, 2, 5,4] -&gt; [1, 1, 2, 2, 3, 4, 5] [6, 1, 7] -&gt; 1, 6, 7 풀이 기본적인 정렬 사용법이 요구되었다. import Foundation func solution(_ arr: [Int]) -&gt; [Int] { return arr.sorted() } // 결과를 출력하는 함수 func printSolution(_ vec: [Int]) { print(vec.map { String($0) }.joined(separator: " ")) } // 메인 함수 func start() { printSolution(solution([1, -5, 2, 4, 3])) printSolution(solution([2, 1, 1, 3, 2, 5, 4])) printSolution(solution([6, 1, 7])) } @main struct Main { static func main() { start() } } #include &lt;iostream&gt; #include &lt;vector&gt; using namespace std; vector&lt;int&gt; solution(vector&lt;int&gt; arr) { sort(arr.begin(), arr.end()); return arr; } // 테스트 코드 #include &lt;iostream&gt; void print(vector&lt;int&gt; vec) { copy(vec.begin(), vec.end(), std::ostream_iterator&lt;int&gt;(cout, " ")); cout &lt;&lt; endl; } int main() { print(solution({1, -5, 2, 4, 3})); // -5 1 2 3 4 print(solution({2, 1, 1, 3, 2, 5, 4})); // 1 1 2 2 3 4 5 print(solution({6, 1, 7})); // 1 6 7 return 0; }]]></summary></entry><entry><title type="html">[Programmers] 3. 두 수를 뽑아서 더하기</title><link href="http://localhost:4000/Programmers-3/" rel="alternate" type="text/html" title="[Programmers] 3. 두 수를 뽑아서 더하기" /><published>2025-05-26T00:00:00+00:00</published><updated>2025-05-26T00:00:00+00:00</updated><id>http://localhost:4000/%5BProgrammers%5D-3</id><content type="html" xml:base="http://localhost:4000/Programmers-3/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="문제">문제</h1>
<p>https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/03.cpp  <br />
정수 배열 numbers가 주어진다. numbers에서 서로 다른 인덱스에 있는 2개의 수를 뽑아 더해 만들 수 있는 모든 수를 배열에 오름차순으로 담아 반환하는 solution() 함수를 완성하라.</p>

<h3 id="제약조건">제약조건</h3>
<ul>
  <li>numbers의 길이는 2 이상 100 이하이다.</li>
  <li>numbers의 모든 수는 0 이상 100 이하이다.</li>
</ul>

<h3 id="입출력-예">입출력 예</h3>
<p>[2, 1, 3, 4, 1] -&gt; [2, 3, 4, 5, 6, 7]<br />
[5, 0, 2, 7] -&gt; [2, 5, 7, 9, 12]</p>

<h1 id="풀이">풀이</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
     4 2 2 1 1 3 4
     2 2 1 1 3 4
     2 1 1 3 4
     1 1 3 4
     1 3 4
     3 4
     4
*/</span>
<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">numbers</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="p">{</span>

    <span class="c1">// 배열 크기</span>
    <span class="k">let</span> <span class="nv">cnt</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="n">count</span>
    
    <span class="c1">// 두 수의 합을 저장할 공간</span>
    <span class="k">var</span> <span class="nv">set</span> <span class="o">=</span> <span class="kt">Set</span><span class="o">&lt;</span><span class="kt">Int</span><span class="o">&gt;</span><span class="p">()</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">cnt</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">cnt</span> <span class="p">{</span>
            <span class="k">set</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> <span class="c1">// O(n^2)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kt">Array</span><span class="p">(</span><span class="k">set</span><span class="p">)</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>                  <span class="c1">// Set -&gt; Array O(n)</span>
                                                <span class="c1">// sorted() O(n^2 log n)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">printSolution</span><span class="p">(</span><span class="n">_</span> <span class="nv">vec</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">])</span> <span class="p">{</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">vec</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">))</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">]))</span> <span class="c1">// 2 3 4 5 6 7</span>
    <span class="nf">printSolution</span><span class="p">(</span><span class="nf">solution</span><span class="p">([</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">7</span><span class="p">]))</span>    <span class="c1">// 2 5 7 9 12</span>
<span class="p">}</span>

<span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;set&gt;</span><span class="cp">
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="c1">// 내가한 방법</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution2</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">arr</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="n">arr</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span> <span class="c1">// O(n^2)</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>               <span class="c1">// O(n^2 log n^2) = O(n^2 log n)</span>
    <span class="n">arr</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">arr</span><span class="p">.</span><span class="n">end</span><span class="p">());</span> <span class="c1">// O(n^2)</span>
    <span class="k">return</span> <span class="n">arr</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// 모범 답안</span>
<span class="c1">// set은 중복값을 자동으로 제거해주고, 오름차순으로 데이터를 정렬해준다</span>
<span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">solution</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">set</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">sum</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>  
            <span class="n">sum</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span> <span class="c1">// O(n^2 log n)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">answer</span><span class="p">(</span><span class="n">sum</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">sum</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="k">return</span> <span class="n">answer</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Programmers" /><summary type="html"><![CDATA[문제 https://github.com/dremdeveloper/codingtest_cpp/blob/main/solution/03.cpp 정수 배열 numbers가 주어진다. numbers에서 서로 다른 인덱스에 있는 2개의 수를 뽑아 더해 만들 수 있는 모든 수를 배열에 오름차순으로 담아 반환하는 solution() 함수를 완성하라. 제약조건 numbers의 길이는 2 이상 100 이하이다. numbers의 모든 수는 0 이상 100 이하이다. 입출력 예 [2, 1, 3, 4, 1] -&gt; [2, 3, 4, 5, 6, 7] [5, 0, 2, 7] -&gt; [2, 5, 7, 9, 12] 풀이 /* 4 2 2 1 1 3 4 2 2 1 1 3 4 2 1 1 3 4 1 1 3 4 1 3 4 3 4 4 */ func solution(_ numbers: [Int]) -&gt; [Int] { // 배열 크기 let cnt = numbers.count // 두 수의 합을 저장할 공간 var set = Set&lt;Int&gt;() for i in 0..&lt;cnt { for j in i+1..&lt;cnt { set.insert(numbers[i] + numbers[j]) // O(n^2) } } return Array(set).sorted() // Set -&gt; Array O(n) // sorted() O(n^2 log n) } func printSolution(_ vec: [Int]) { print(vec.map { String($0) }.joined(separator: " ")) } func main() { printSolution(solution([2, 1, 3, 4, 1])) // 2 3 4 5 6 7 printSolution(solution([5, 0, 2, 7])) // 2 5 7 9 12 } main() #include &lt;iostream&gt; #include &lt;vector&gt; #include &lt;set&gt; using namespace std; // 내가한 방법 vector&lt;int&gt; solution2(vector&lt;int&gt; numbers) { vector&lt;int&gt; arr; for (int i=0; i&lt;numbers.size(); i++) { for (int j=i+1; j&lt;numbers.size(); j++) arr.push_back(numbers[i] + numbers[j]); // O(n^2) } sort(arr.begin(), arr.end()); // O(n^2 log n^2) = O(n^2 log n) arr.erase(unique(arr.begin(), arr.end()), arr.end()); // O(n^2) return arr; } // 모범 답안 // set은 중복값을 자동으로 제거해주고, 오름차순으로 데이터를 정렬해준다 vector&lt;int&gt; solution(vector&lt;int&gt; numbers) { set&lt;int&gt; sum; for (int i=0; i&lt;numbers.size(); i++) { for (int j=i+1; j&lt;numbers.size(); j++) { sum.insert(numbers[i] + numbers[j]); // O(n^2 log n) } } vector&lt;int&gt; answer(sum.begin(), sum.end()); return answer; }]]></summary></entry><entry><title type="html">[Xcode] 프로젝트에 SwiftLint적용하기</title><link href="http://localhost:4000/UIKit-SwiftLint/" rel="alternate" type="text/html" title="[Xcode] 프로젝트에 SwiftLint적용하기" /><published>2025-05-25T00:00:00+00:00</published><updated>2025-05-25T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-SwiftLint</id><content type="html" xml:base="http://localhost:4000/UIKit-SwiftLint/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h1 id="프로젝트에-swiftlint적용하기">프로젝트에 SwiftLint적용하기</h1>

<p><br /><br /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>swiftlint
</code></pre></div></div>

<p><a href="https://github.com/realm/SwiftLint">공식 사이트</a><br />
설치는 SPM, Pod 등 여러 방법으로 설치할 수 있다. 다양한 프로젝트에 계속 사용하기 위해 HomeBrew로 설치 진행.<br />
<br /><br /></p>

<p><img src="/assets/img/2025-05-25-%5BUIKit%5D-SwiftLint/image-20250525203357274.png" alt="이미지" width="100%" /><br />
New Run Script Phase 클릭하여 추가한다.<br />
여기 컴파일(Run)시에 추가적으로 수행할 쉘 스크립트를 작성할 수 있다.<br />
<br /><br /></p>

<p><img src="/assets/img/2025-05-25-%5BUIKit%5D-SwiftLint/image-20250525203727177.png" alt="이미지" width="100%" /></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// 1번 방식
<span class="k">if </span>which swiftlint <span class="o">&gt;</span>/dev/null<span class="p">;</span> <span class="k">then
  </span>swiftlint
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span>
<span class="k">fi</span>

// 2번 방식<span class="o">(</span>나는 이걸로 성공<span class="o">)</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PATH</span><span class="s2">:/opt/homebrew/bin"</span>
<span class="k">if </span>which swiftlint <span class="o">&gt;</span> /dev/null<span class="p">;</span> <span class="k">then
  </span>swiftlint
<span class="k">else
  </span><span class="nb">echo</span> <span class="s2">"warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint"</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>그다음 이 코드를 스크립트에 추가한다.<br />
<br /><br /></p>

<p><img src="/assets/img/2025-05-25-%5BUIKit%5D-SwiftLint/image-20250525204358876.png" alt="이미지" width="100%" /><br />
Run Script라는 이름을 SwiftLint Script로 바꿔 준 다음, 위치를 Compile Sources위로 올려준다.<br />
컴파일 하기 전에 스크립트를 실행시켜서 SwiftLint를 검사하는 것이 효율적이라고 순서를 이렇게 한다고 한다.<br />
<br /><br /></p>

<p><img src="/assets/img/2025-05-25-%5BUIKit%5D-SwiftLint/image-20250525230013507.png" alt="이미지" width="100%" /><br />
.swiftlint.yml파일을 만들고 빌드(commakd + R) 해보면 Sandbox 관련 오류가 발생한다.<br />
<br /><br /></p>

<p><img src="/assets/img/2025-05-25-%5BUIKit%5D-SwiftLint/image-20250525230201996.png" alt="이미지" width="30%" /></p>

<p><img src="/assets/img/2025-05-25-%5BUIKit%5D-SwiftLint/image-20250525230341162.png" alt="이미지" width="100%" /><br />
Build Settings -&gt; User Script Sandboxing 검색후 No로 변경해준다.<br />
<br /><br /></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># swiftlint.yml</span>

<span class="cp"># 사용하지 않을 규칙 설정</span>
<span class="nv">disabled_rules</span><span class="p">:</span>
  <span class="o">-</span> <span class="n">force_cast</span>               <span class="err">#</span> <span class="n">강제</span> <span class="n">형변환</span> <span class="n">사용</span> <span class="n">시</span> <span class="n">경고하지</span> <span class="n">않음</span>
  <span class="o">-</span> <span class="n">trailing_whitespace</span>      <span class="err">#</span> <span class="n">줄</span> <span class="n">끝</span> <span class="n">공백에</span> <span class="n">대해</span> <span class="n">경고하지</span> <span class="n">않음</span>

<span class="cp"># 식별자(변수, 상수, 함수 이름 등)의 글자 수 제한</span>
<span class="nv">identifier_name</span><span class="p">:</span>
  <span class="nv">min_length</span><span class="p">:</span> <span class="mi">1</span>              <span class="err">#</span> <span class="n">최소</span> <span class="n">글자</span> <span class="nv">수</span><span class="p">:</span> <span class="mi">1</span><span class="n">자</span>
  <span class="nv">max_length</span><span class="p">:</span> <span class="mi">40</span>             <span class="err">#</span> <span class="n">최대</span> <span class="n">글자</span> <span class="nv">수</span><span class="p">:</span> <span class="mi">40</span><span class="n">자</span>
  <span class="nv">allowed_symbols</span><span class="p">:</span> <span class="p">[</span><span class="s">"_"</span><span class="p">]</span>     <span class="err">#</span> <span class="nf">밑줄</span><span class="p">(</span><span class="n">_</span><span class="p">)</span> <span class="n">사용</span> <span class="n">허용</span>
  <span class="nv">validates_start_with_lowercase</span><span class="p">:</span> <span class="kc">true</span>  <span class="err">#</span> <span class="n">소문자로</span> <span class="n">시작해야</span> <span class="n">함</span>

<span class="cp"># 사이클 복잡도 설정 (분기 개수)</span>
<span class="nv">cyclomatic_complexity</span><span class="p">:</span>
  <span class="nv">warning</span><span class="p">:</span> <span class="mi">20</span>                <span class="err">#</span> <span class="mi">20</span> <span class="n">이상이면</span> <span class="n">경고</span>
  <span class="nv">error</span><span class="p">:</span> <span class="mi">30</span>                  <span class="err">#</span> <span class="mi">30</span> <span class="n">이상이면</span> <span class="n">오류</span>

<span class="cp"># 함수 본문의 줄 수 제한</span>
<span class="nv">function_body_length</span><span class="p">:</span>
  <span class="nv">warning</span><span class="p">:</span> <span class="mi">120</span>               <span class="err">#</span> <span class="mi">120</span><span class="n">줄</span> <span class="n">이상이면</span> <span class="n">경고</span>
  <span class="nv">error</span><span class="p">:</span> <span class="mi">160</span>                 <span class="err">#</span> <span class="mi">160</span><span class="n">줄</span> <span class="n">이상이면</span> <span class="n">오류</span>

<span class="cp"># 클래스, 구조체, enum 등의 본문 줄 수 제한</span>
<span class="nv">type_body_length</span><span class="p">:</span>
  <span class="nv">warning</span><span class="p">:</span> <span class="mi">500</span>               <span class="err">#</span> <span class="mi">500</span><span class="n">줄</span> <span class="n">이상이면</span> <span class="n">경고</span>
  <span class="nv">error</span><span class="p">:</span> <span class="mi">1000</span>                <span class="err">#</span> <span class="mi">1000</span><span class="n">줄</span> <span class="n">이상이면</span> <span class="n">오류</span>

<span class="cp"># 한 줄의 최대 길이 제한</span>
<span class="nv">line_length</span><span class="p">:</span>
  <span class="nv">warning</span><span class="p">:</span> <span class="mi">200</span>               <span class="err">#</span> <span class="mi">200</span><span class="n">자</span> <span class="n">이상이면</span> <span class="n">경고</span>
  <span class="nv">error</span><span class="p">:</span> <span class="mi">300</span>                 <span class="err">#</span> <span class="mi">300</span><span class="n">자</span> <span class="n">이상이면</span> <span class="n">오류</span>
  <span class="nv">ignores_comments</span><span class="p">:</span> <span class="kc">true</span>     <span class="err">#</span> <span class="n">주석은</span> <span class="n">길이</span> <span class="n">제한에서</span> <span class="n">제외</span>
  <span class="nv">ignores_urls</span><span class="p">:</span> <span class="kc">true</span>         <span class="err">#</span> <span class="kt">URL은</span> <span class="n">길이</span> <span class="n">제한에서</span> <span class="n">제외</span>

</code></pre></div></div>

<p>.yml코드 완성을 해주면 끝난다.<br />
<br /><br /></p>

<p>Reference</p>

<ul>
  <li>https://dokit.tistory.com/64</li>
  <li>https://didu-story.tistory.com/274</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="Xcode" /><summary type="html"><![CDATA[프로젝트에 SwiftLint적용하기 brew install swiftlint 공식 사이트 설치는 SPM, Pod 등 여러 방법으로 설치할 수 있다. 다양한 프로젝트에 계속 사용하기 위해 HomeBrew로 설치 진행. New Run Script Phase 클릭하여 추가한다. 여기 컴파일(Run)시에 추가적으로 수행할 쉘 스크립트를 작성할 수 있다. // 1번 방식 if which swiftlint &gt;/dev/null; then swiftlint else echo "warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint" fi // 2번 방식(나는 이걸로 성공) export PATH="$PATH:/opt/homebrew/bin" if which swiftlint &gt; /dev/null; then swiftlint else echo "warning: SwiftLint not installed, download from https://github.com/realm/SwiftLint" fi 그다음 이 코드를 스크립트에 추가한다. Run Script라는 이름을 SwiftLint Script로 바꿔 준 다음, 위치를 Compile Sources위로 올려준다. 컴파일 하기 전에 스크립트를 실행시켜서 SwiftLint를 검사하는 것이 효율적이라고 순서를 이렇게 한다고 한다. .swiftlint.yml파일을 만들고 빌드(commakd + R) 해보면 Sandbox 관련 오류가 발생한다. Build Settings -&gt; User Script Sandboxing 검색후 No로 변경해준다. # swiftlint.yml # 사용하지 않을 규칙 설정 disabled_rules: - force_cast # 강제 형변환 사용 시 경고하지 않음 - trailing_whitespace # 줄 끝 공백에 대해 경고하지 않음 # 식별자(변수, 상수, 함수 이름 등)의 글자 수 제한 identifier_name: min_length: 1 # 최소 글자 수: 1자 max_length: 40 # 최대 글자 수: 40자 allowed_symbols: ["_"] # 밑줄(_) 사용 허용 validates_start_with_lowercase: true # 소문자로 시작해야 함 # 사이클 복잡도 설정 (분기 개수) cyclomatic_complexity: warning: 20 # 20 이상이면 경고 error: 30 # 30 이상이면 오류 # 함수 본문의 줄 수 제한 function_body_length: warning: 120 # 120줄 이상이면 경고 error: 160 # 160줄 이상이면 오류 # 클래스, 구조체, enum 등의 본문 줄 수 제한 type_body_length: warning: 500 # 500줄 이상이면 경고 error: 1000 # 1000줄 이상이면 오류 # 한 줄의 최대 길이 제한 line_length: warning: 200 # 200자 이상이면 경고 error: 300 # 300자 이상이면 오류 ignores_comments: true # 주석은 길이 제한에서 제외 ignores_urls: true # URL은 길이 제한에서 제외 .yml코드 완성을 해주면 끝난다. Reference https://dokit.tistory.com/64 https://didu-story.tistory.com/274]]></summary></entry><entry><title type="html">[CleanArchitecture] SOLID, MVVM, CleanArchitecture</title><link href="http://localhost:4000/CleanArchitecture-Clean-Architecture/" rel="alternate" type="text/html" title="[CleanArchitecture] SOLID, MVVM, CleanArchitecture" /><published>2025-05-24T00:00:00+00:00</published><updated>2025-05-24T00:00:00+00:00</updated><id>http://localhost:4000/%5BCleanArchitecture%5D-Clean%20Architecture</id><content type="html" xml:base="http://localhost:4000/CleanArchitecture-Clean-Architecture/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<!-- <table>
  <tr>
    <td><img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean1.png" alt="커스텀셀1" width="50%"></td>
    <td><img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean3.png" alt="커스텀셀" width="50%"></td>
  </tr>
</table>

<div style="display: flex; justify-content: space-between;">
  <img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean1.png" alt="커스텀셀1" width="50%">
  <img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean3.png" alt="커스텀셀" width="50%">
</div> -->

<!-- <div style="display: flex; justify-content: space-between;">
  <img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean1.png" alt="커스텀셀1" width="50%">
  <img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean3.png" alt="커스텀셀" width="50%">
</div> -->

<h1 id="solod-mvvm-cleanarchitecture">SOLOD, MVVM, CleanArchitecture</h1>

<p>클린 아키텍처를 알기 위해서는 MVVM을 알아야 하고 MVVM을 알기 위해서는 SOLID 원칙을 알아야 한다.  SOLID 원칙 -&gt; MVVM -&gt; Interface -&gt; Clean Architecture 순서로 정리하였다.</p>

<h2 id="원칙이란">원칙이란?</h2>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/img.jpg" alt="이미지" width="70%" /></p>

<ul>
  <li>원칙을 지키면 시간이 흐른 뒤에는 큰 영향을 가져온다.</li>
  <li>원칙을 지키지 않는다면 어디서부터 어떻게 고쳐야 할 지 어렵고, 한 부분을 해결하면 다른 부분에서 문제가 발생할 수도 있다.</li>
  <li>SOLID 프로그램의 원칙을 지키면 프로젝트 규모가 커질수록 큰 영향을 가져온다.</li>
  <li>SOLID 원칙을 지키면 얻을 수 있는 효과가 유지보수성이다.</li>
  <li>유지보수가 쉬운 코드 = 어떤 상황에서도 잘 동작하고 변경에 용이</li>
</ul>

<hr />

<h2 id="solid-원칙">SOLID 원칙</h2>

<ul>
  <li>SOLID원칙은 5가지 원칙을 의미한다.</li>
</ul>

<h3 id="1-단일-책임-원칙">1. 단일 책임 원칙</h3>

<ul>
  <li>클래스는 하나의 책임만을 가져야 한다.</li>
  <li>(책임 = 변경이 일어날 때 영향을 받는다라고 가정)</li>
</ul>

<p>ex) ViewConntroller의 책임</p>
<ul>
  <li>UI 그리기   (&lt;- 책임)</li>
  <li>UI 로직 구현</li>
  <li>API 호출</li>
  <li>내부 데이터 저장, 불러오기</li>
</ul>

<p>=&gt; 이 4개중에 하나의 책임만 가져야 한다. 여기서는 UI 그리기가 책임이 된다.<br />
<br /><br /></p>

<h3 id="2-개팡-폐쇄-원칙">2. 개팡 폐쇄 원칙</h3>

<ul>
  <li>클래스는 기능의 확장에 있어서 열려 있어야 하고 수정에는 닫혀 있어야 한다.</li>
</ul>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524154310671.png" alt="이미지" width="50%" /><br />
ViewModel에서 User 데이터에 대한 타입이 변경되면 ViewModel에 의존하는 ViewController가 영향을 받는다.  하지만 ViewController에서 UI에 대한 코드가 변경되면 안된다.</p>

<details> 
    <summary>예제코드</summary>
	<img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524202259228.png" alt="이미지" width="100%" />
</details>

<p><br /><br /></p>

<h3 id="3-인터페이스-분리-원칙">3. 인터페이스 분리 원칙</h3>

<ul>
  <li>사용하지 않는 인터페이스는 쓰지 않아야 한다.</li>
</ul>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524160614297.png" alt="이미지" width="50%" /><br />
사진과 같이 ViewController가 property1과 func3만 사용한다면  ViewController입장에서 나머지 property2, func1, func2는 필요 없다. 이럴때는 인터페이스를 분리해야 한다.<br />
<br /><br /></p>

<h3 id="4-의존성-역전-원칙">4. 의존성 역전 원칙</h3>

<ul>
  <li>고수준 모듈은 저수준 모듈에 의존해서는 안된다. 둘다 추상화에 의존해야 한다.</li>
</ul>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524161541708.png" alt="이미지" width="50%" /><br />
저수준은 UI와 같이 잘 바뀌는 코드를 의미하고 고수준은 앱에서 핵심 기능인 잘 안바뀌는 기능을 의미한다.(쇼핑앱에서는 결제 기능과 유사)<br />
즉 쉽게 바뀌는 코드가 쉽게 바뀌지 않는 코드를 의존해야 한다.<br />
참고로 추상화(인터페이스)에 의존해야한다.</p>

<details> 
    <summary>예제코드</summary>
	<img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524202525835.png" alt="이미지" width="100%" />
</details>

<p><br /><br /></p>

<h3 id="5-리스코프-치환원칙">5. 리스코프 치환원칙</h3>

<ul>
  <li>자식 클래스는 언제나 자신의 부모 클래스로 교체할 수 있어야 한다. 즉 부모 타입을 사용하는 곳에 자식 타입을 넣어도 정상적으로 작동해야 한다.</li>
</ul>

<details> 
    <summary>리스코프 치환 위반 예시</summary>
	<img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524202625296.png" alt="이미지" width="100%" />
</details>

<details> 
    <summary>리스코프 치환 지키는 예시 </summary>
	<img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524202753353.png" alt="이미지" width="100%" />
</details>

<hr />

<h2 id="mvvm">MVVM</h2>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524171856966.png" alt="이미지" width="70%" /></p>

<p>SOLID 원칙을 지키기 위해 MVVM 패턴을 사용한다. MVVM패턴을 지키면 자연스럽게 SOLID 원칙을 지킬 수 있다. MVVM은 Model, View, ViewModel로 3등분으로 구성된다.</p>

<h3 id="그림-상세내용참고">그림 상세내용(참고)</h3>

<ul>
  <li>View는 UI를 표현하고 버튼 클릭이나 텍스트 입력과 같은 <strong>이벤트를 ViewModel으로 전달</strong>한다.</li>
  <li>ViewModel은 View(UI)와 관련한 로직을 모두 처리하거나 상태를 보유한다. 또한 View에서 전달된 이벤트에 따라 바뀐 상태나 바뀐 UI 관련 로직을 처리하고 필요시 ViewController에게 바로 상태를 전달하고, 만약 더 핵심적인 비즈니스 로직(API 호츌)이 필요하면 Model에 전달하여 Model에서 핵심 비즈니스 로직을 처리하고 데이터를 다시 ViewModel로 전달해주고 ViewModel에서 UI적인 로직을 처리하여 ViewController에게 상태나 데이터를 전달한다.</li>
</ul>

<h3 id="mvvm-구성">MVVM 구성</h3>

<table>
  <thead>
    <tr>
      <th>구성 요소</th>
      <th>역할</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Model</strong></td>
      <td>데이터와 비즈니스 로직 (API 통신, 데이터 가공 등)</td>
    </tr>
    <tr>
      <td><strong>ViewModel</strong></td>
      <td>View에 필요한 상태와 로직을 관리 (UI 상태 결정, 이벤트 처리)</td>
    </tr>
    <tr>
      <td><strong>View (UI)</strong></td>
      <td>사용자 입력, 화면 표시 (이벤트는 ViewModel로 전달)</td>
    </tr>
  </tbody>
</table>

<h3 id="-의존성-방향">🔁 의존성 방향</h3>

<ul>
  <li><strong>View → ViewModel</strong>: View는 ViewModel에 의존 (버튼 클릭 → 메서드 호출 등)</li>
  <li><strong>ViewModel → Model</strong>: ViewModel은 데이터가 필요할 때 Model에 요청</li>
  <li><strong>Model은 아무것도 모름</strong> (하위 계층은 상위 계층을 몰라야 함 = DIP 적용)</li>
  <li>의존성의 방향은 잘 변경되는 쪽이 잘 변경되지 않는 쪽을 바라본다, 즉 각 구성요소가 단방향적인 의존성을 지키고 있다.</li>
</ul>

<details> 
    <summary>SOLID 원칙 적용 전 MVVM 코드 (DIP 위반)</summary>
	<img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524203055395.png" alt="이미지" width="100%" />
</details>

<details> 
    <summary>SOLID 원칙 적용 후 MVVM 코드 (DIP, OCP 등 만족)</summary>
	<img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524203210106.png" alt="이미지" width="100%" />
</details>

<hr />

<h2 id="interface">Interface</h2>

<p>클린아키텍처를 이해하기위해 인터페이스 개념을 다시 한번 알고 가자.</p>

<h3 id="인터페이스란">인터페이스란?</h3>

<ul>
  <li>우리가 흔이 말하는 앱의 유저 인터페이스(UI)는 사용자가 직접 마주하는 화면을 의미한다.</li>
  <li>어떻게 구성되고, 어떻게 동작하며, 어떤 방식으로 정의한다.</li>
</ul>

<h3 id="️-냉장고로-예시를-들어본다면">❄️ 냉장고로 예시를 들어본다면</h3>

<ul>
  <li>유저 인터페이스(UI): 손잡이, 버튼, 디스플레이</li>
  <li>내부 로직: 온도 조절, 냉각 등 실제 동작</li>
  <li><strong>중요한 포인트</strong>:  <br />
  사용자는 내부 로직을 몰라도, 버튼 하나로 냉장고를 조작할 수 있다.  <br />
  → 즉, <strong>“인터페이스만 알면 사용 가능”</strong>한 구조다.</li>
</ul>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524175041634.png" alt="이미지" width="70%" /></p>

<ul>
  <li>냉장고의 UI는 <code class="language-plaintext highlighter-rouge">ViewController</code>, 내부 로직은 <code class="language-plaintext highlighter-rouge">ViewModel</code>로 비유할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">ViewController</code>는 <strong>“냉장고 온도를 내려주세요”</strong>라고 요청만 한다.</li>
  <li>실제 로직(냉각, 온도 계산 등)은 <code class="language-plaintext highlighter-rouge">ViewModel</code>이 처리한다.</li>
</ul>

<h2 id="인터페이스를-정리하자면">인터페이스를 정리하자면</h2>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524175910967.png" alt="이미지" width="70%" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">ViewController</code>가 <code class="language-plaintext highlighter-rouge">ViewModel</code>을 <strong>직접 구현이 아닌 인터페이스(Protocol)</strong>에 의존하면,</li>
  <li>내부 로직이 바뀌더라도 ViewController는 수정 없이 그대로 동작할 수 있다.</li>
</ul>

<p>이렇게 <strong>구현을 감추고 필요한 기능만 정의한 것</strong>을 <code class="language-plaintext highlighter-rouge">**추상화**</code>라고 한다.<br />
인터페이스를 사용하는이유 = 의존성을 최소화 하기 위해 = 변경을 대응하기 위함.</p>

<hr />

<h2 id="clean-architecture">Clean Architecture</h2>

<p><img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean1.png" alt="커스텀셀1" width="50%" /><br />
엉글  밥Robert C. Martin)이 제시한 <strong>추상적인 개념</strong>으로서 <strong>관심사를 분리시키고 의존도를 낮추는 것에 목적을 둔 아키텍처</strong>이다. 모바일 뿐만 아니라 웹이나 서버 등 여러 곳에서 많이 사용하는 아키텍처이다. 모바일 기준으로는 조금 단순화한 아래 사진을 참고하면 된다.</p>

<p><img src="/assets/img/2025-03-25-%5BCleanArchitecture%5D-CleanArchitecture/clean3.png" alt="커스텀셀" width="50%" /><br />
모바일 기준으로는 크게 3개의 계층(Layer)로 분류한다. Domain Layer, Data Layer, Presentation Layer로 분류한다.</p>

<hr />

<h3 id="1-domain-layer">1. Domain Layer</h3>

<p>Domain Layer는 프로젝트의 <strong>가장 핵심적인 영역</strong>이며,  <br />
비즈니스의 규칙과 요구사항을 직접 담고 있는 계층이다.</p>

<h3 id="구성-요소">구성 요소</h3>

<ul>
  <li>Entity - 모델 정의</li>
  <li>UseCase - 핵심적인 비즈니스 로직을 담은 역할
    <ul>
      <li>유저 리스트 불러오기</li>
      <li>유저 상세 데이터 불러오기</li>
      <li>유저를 내부 저장소에 저장하기</li>
    </ul>
  </li>
  <li>Repository Protocol(인터페이스) - UseCase와 Data Layer(서버 API, 로컬 DB)를 연결해주는 중간 다리 역할
    <ul>
      <li><code class="language-plaintext highlighter-rouge">UseCase</code>와 <code class="language-plaintext highlighter-rouge">Data Layer</code> 사이를 연결하는 <strong>추상화 계층</strong></li>
      <li>데이터의 출처가 무엇이든 (API, DB 등) <code class="language-plaintext highlighter-rouge">UseCase</code>는 몰라도 된다</li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="2-data-layer">2. Data Layer</h3>

<p>데이터를 가져오는 역할이다.</p>

<ul>
  <li>DB</li>
  <li>API</li>
  <li>Repository 구현체
    <ul>
      <li>API를 사용할지 DB를 사용할지를 Repository를 통해서 가져온다.</li>
      <li>Repository를 통해 가져오므로 API나 DB를 직접 의존할 필요가 없다.</li>
    </ul>
  </li>
</ul>

<h3 id="왜-repository를-사용하는가">왜 Repository를 사용하는가?</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UseCase</code>는 <strong>데이터가 어디서 오는지 알 필요 없다.</strong>
    <ul>
      <li>API든, CoreData든, Realm이든 전혀 신경 쓰지 않는다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Repository</code>가 데이터의 출처를 감싸서 대신 처리해준다.
    <ul>
      <li>덕분에 <code class="language-plaintext highlighter-rouge">UseCase</code>는 <strong>오직 기능 수행에만 집중 가능</strong></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">Repository</code>는 인터페이스만 존재하며, 실제 구현은 <strong>Data Layer</strong>에서 처리한다.</li>
</ul>

<hr />

<h3 id="3-presentation-layer">3. Presentation Layer</h3>

<ul>
  <li>MVVM에서 ViewController(UI)와 ViewModel(Presentor)을 의미한다.
    <ul>
      <li>M을 제외한 VVM이 Presentation에 존대한다.</li>
      <li>M은 Data/Domain Layer둘다 포함한다.</li>
      <li>MVVM에서 클린 아키텍처 확장함에 있어서 M이 세분화 되었다.</li>
    </ul>
  </li>
  <li>UI</li>
  <li>Presenters(=ViewModel)</li>
</ul>

<hr />

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/image-20250524210248333.png" alt="커스텀셀" width="50%" /><br />
의존성이 바깥에서 안으로 향하고 있다.  고수준(Domain Layer)는 변동이 거의 일어나지 않는다. 저수준(Presentation Layer)는 변동이 자주 발생한다. 의존성의 방향은 자주 변하는 쪽에서 자주 변하지 않는 쪽으로 의존한다.  저수준은 고수준을 의존할 수 있지만. 고수준이 저수준을 의존하면 의존성 역전 원칙 위반이다.</p>

<h3 id="의존성-역전-원칙-위반-예시">의존성 역전 원칙 위반 예시</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 저수준 Data Layer</span>
<span class="kd">class</span> <span class="kt">Repository</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="c1">// 고수준 Domain Layer</span>
<span class="kd">class</span> <span class="kt">Usecase</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">repository</span> <span class="o">=</span> <span class="kt">Repository</span><span class="p">()</span> <span class="c1">// 2. 고수준(Usecase)이 저수준(Repository)을 의존하고있다 -&gt; 의존성 역전 위반</span>
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">repository</span><span class="o">.</span><span class="nf">getUsers</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 저수준 Presentation Layer</span>
<span class="kd">class</span> <span class="kt">ViewModel</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">usecase</span> <span class="o">=</span> <span class="kt">Usecase</span><span class="p">()</span> <span class="c1">// 1. 저수준(ViewModel)이 고수준(usecase)을 의존하고 있다 O</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="의존성-역전-시킨-좋은-예시">의존성 역전 시킨 좋은 예시</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 의존성 역전을 하려면 -&gt; Protocol(인터페이스)를 사용하면 된다. </span>
<span class="c1">// 인터페이스는 추상화 한 개념이라 변경이 일어나지 않기 때문에 항상 고수준이다.</span>
<span class="c1">// ViewModel, Repository는 저수준, Usecase는 고수준</span>

<span class="c1">// Domain Layer</span>
<span class="kd">protocol</span> <span class="kt">RepositoryProtocol</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// 저수준 Data Layer</span>
<span class="kd">class</span> <span class="kt">Repository</span><span class="p">:</span> <span class="kt">RepositoryProtocol</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span> <span class="p">{}</span>
<span class="p">}</span>

<span class="c1">// 고수준 Domain Layer</span>
<span class="kd">class</span> <span class="kt">Usecase</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">repository</span><span class="p">:</span> <span class="kt">RepositoryProtocol</span> <span class="c1">// 2. 고수준(Usecase)이 고수준(protocol)을 의존하고있다 -&gt; 의존성 역전 시켜서 클린아키텍처 원칙을 만족 O</span>
    
    <span class="nf">init</span><span class="p">(</span><span class="nv">repository</span><span class="p">:</span> <span class="kt">RepositoryProtocol</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">repository</span> <span class="o">=</span> <span class="n">repository</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="nf">getUsers</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">repository</span><span class="o">.</span><span class="nf">getUsers</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="c1">// 저수준 Presentation Layer</span>
<span class="kd">class</span> <span class="kt">ViewModel</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">usecase</span> <span class="o">=</span> <span class="kt">Usecase</span><span class="p">(</span><span class="nv">repository</span><span class="p">:</span> <span class="kt">Repository</span><span class="p">())</span> <span class="c1">// 1. 저수준(ViewModel)이 고수준(usecase)을 의존하고 있다 -&gt; 클린아키텍처 원칙 만족</span>
<span class="p">}</span>
</code></pre></div></div>

<p><br /><br /></p>

<h1 id="최종-clean-architecture-구조">최종 Clean Architecture 구조</h1>

<p><img src="/assets/img/2025-05-24-%5BCleanArchitecture%5D-Clean%20Architecture/123.drawio.png" alt="커스텀셀" width="100%" /></p>]]></content><author><name>Dong Hyeon</name></author><category term="CleanArchitecture" /><summary type="html"><![CDATA[SOLOD, MVVM, CleanArchitecture 클린 아키텍처를 알기 위해서는 MVVM을 알아야 하고 MVVM을 알기 위해서는 SOLID 원칙을 알아야 한다. SOLID 원칙 -&gt; MVVM -&gt; Interface -&gt; Clean Architecture 순서로 정리하였다. 원칙이란? 원칙을 지키면 시간이 흐른 뒤에는 큰 영향을 가져온다. 원칙을 지키지 않는다면 어디서부터 어떻게 고쳐야 할 지 어렵고, 한 부분을 해결하면 다른 부분에서 문제가 발생할 수도 있다. SOLID 프로그램의 원칙을 지키면 프로젝트 규모가 커질수록 큰 영향을 가져온다. SOLID 원칙을 지키면 얻을 수 있는 효과가 유지보수성이다. 유지보수가 쉬운 코드 = 어떤 상황에서도 잘 동작하고 변경에 용이 SOLID 원칙 SOLID원칙은 5가지 원칙을 의미한다. 1. 단일 책임 원칙 클래스는 하나의 책임만을 가져야 한다. (책임 = 변경이 일어날 때 영향을 받는다라고 가정) ex) ViewConntroller의 책임 UI 그리기 (&lt;- 책임) UI 로직 구현 API 호출 내부 데이터 저장, 불러오기 =&gt; 이 4개중에 하나의 책임만 가져야 한다. 여기서는 UI 그리기가 책임이 된다. 2. 개팡 폐쇄 원칙 클래스는 기능의 확장에 있어서 열려 있어야 하고 수정에는 닫혀 있어야 한다. ViewModel에서 User 데이터에 대한 타입이 변경되면 ViewModel에 의존하는 ViewController가 영향을 받는다. 하지만 ViewController에서 UI에 대한 코드가 변경되면 안된다. 예제코드 3. 인터페이스 분리 원칙 사용하지 않는 인터페이스는 쓰지 않아야 한다. 사진과 같이 ViewController가 property1과 func3만 사용한다면 ViewController입장에서 나머지 property2, func1, func2는 필요 없다. 이럴때는 인터페이스를 분리해야 한다. 4. 의존성 역전 원칙 고수준 모듈은 저수준 모듈에 의존해서는 안된다. 둘다 추상화에 의존해야 한다. 저수준은 UI와 같이 잘 바뀌는 코드를 의미하고 고수준은 앱에서 핵심 기능인 잘 안바뀌는 기능을 의미한다.(쇼핑앱에서는 결제 기능과 유사) 즉 쉽게 바뀌는 코드가 쉽게 바뀌지 않는 코드를 의존해야 한다. 참고로 추상화(인터페이스)에 의존해야한다. 예제코드 5. 리스코프 치환원칙 자식 클래스는 언제나 자신의 부모 클래스로 교체할 수 있어야 한다. 즉 부모 타입을 사용하는 곳에 자식 타입을 넣어도 정상적으로 작동해야 한다. 리스코프 치환 위반 예시 리스코프 치환 지키는 예시 MVVM SOLID 원칙을 지키기 위해 MVVM 패턴을 사용한다. MVVM패턴을 지키면 자연스럽게 SOLID 원칙을 지킬 수 있다. MVVM은 Model, View, ViewModel로 3등분으로 구성된다. 그림 상세내용(참고) View는 UI를 표현하고 버튼 클릭이나 텍스트 입력과 같은 이벤트를 ViewModel으로 전달한다. ViewModel은 View(UI)와 관련한 로직을 모두 처리하거나 상태를 보유한다. 또한 View에서 전달된 이벤트에 따라 바뀐 상태나 바뀐 UI 관련 로직을 처리하고 필요시 ViewController에게 바로 상태를 전달하고, 만약 더 핵심적인 비즈니스 로직(API 호츌)이 필요하면 Model에 전달하여 Model에서 핵심 비즈니스 로직을 처리하고 데이터를 다시 ViewModel로 전달해주고 ViewModel에서 UI적인 로직을 처리하여 ViewController에게 상태나 데이터를 전달한다. MVVM 구성 구성 요소 역할 Model 데이터와 비즈니스 로직 (API 통신, 데이터 가공 등) ViewModel View에 필요한 상태와 로직을 관리 (UI 상태 결정, 이벤트 처리) View (UI) 사용자 입력, 화면 표시 (이벤트는 ViewModel로 전달) 🔁 의존성 방향 View → ViewModel: View는 ViewModel에 의존 (버튼 클릭 → 메서드 호출 등) ViewModel → Model: ViewModel은 데이터가 필요할 때 Model에 요청 Model은 아무것도 모름 (하위 계층은 상위 계층을 몰라야 함 = DIP 적용) 의존성의 방향은 잘 변경되는 쪽이 잘 변경되지 않는 쪽을 바라본다, 즉 각 구성요소가 단방향적인 의존성을 지키고 있다. SOLID 원칙 적용 전 MVVM 코드 (DIP 위반) SOLID 원칙 적용 후 MVVM 코드 (DIP, OCP 등 만족) Interface 클린아키텍처를 이해하기위해 인터페이스 개념을 다시 한번 알고 가자. 인터페이스란? 우리가 흔이 말하는 앱의 유저 인터페이스(UI)는 사용자가 직접 마주하는 화면을 의미한다. 어떻게 구성되고, 어떻게 동작하며, 어떤 방식으로 정의한다. ❄️ 냉장고로 예시를 들어본다면 유저 인터페이스(UI): 손잡이, 버튼, 디스플레이 내부 로직: 온도 조절, 냉각 등 실제 동작 중요한 포인트: 사용자는 내부 로직을 몰라도, 버튼 하나로 냉장고를 조작할 수 있다. → 즉, “인터페이스만 알면 사용 가능”한 구조다. 냉장고의 UI는 ViewController, 내부 로직은 ViewModel로 비유할 수 있다. ViewController는 “냉장고 온도를 내려주세요”라고 요청만 한다. 실제 로직(냉각, 온도 계산 등)은 ViewModel이 처리한다. 인터페이스를 정리하자면 ViewController가 ViewModel을 직접 구현이 아닌 인터페이스(Protocol)에 의존하면, 내부 로직이 바뀌더라도 ViewController는 수정 없이 그대로 동작할 수 있다. 이렇게 구현을 감추고 필요한 기능만 정의한 것을 **추상화**라고 한다. 인터페이스를 사용하는이유 = 의존성을 최소화 하기 위해 = 변경을 대응하기 위함. Clean Architecture 엉글 밥Robert C. Martin)이 제시한 추상적인 개념으로서 관심사를 분리시키고 의존도를 낮추는 것에 목적을 둔 아키텍처이다. 모바일 뿐만 아니라 웹이나 서버 등 여러 곳에서 많이 사용하는 아키텍처이다. 모바일 기준으로는 조금 단순화한 아래 사진을 참고하면 된다. 모바일 기준으로는 크게 3개의 계층(Layer)로 분류한다. Domain Layer, Data Layer, Presentation Layer로 분류한다. 1. Domain Layer Domain Layer는 프로젝트의 가장 핵심적인 영역이며, 비즈니스의 규칙과 요구사항을 직접 담고 있는 계층이다. 구성 요소 Entity - 모델 정의 UseCase - 핵심적인 비즈니스 로직을 담은 역할 유저 리스트 불러오기 유저 상세 데이터 불러오기 유저를 내부 저장소에 저장하기 Repository Protocol(인터페이스) - UseCase와 Data Layer(서버 API, 로컬 DB)를 연결해주는 중간 다리 역할 UseCase와 Data Layer 사이를 연결하는 추상화 계층 데이터의 출처가 무엇이든 (API, DB 등) UseCase는 몰라도 된다 2. Data Layer 데이터를 가져오는 역할이다. DB API Repository 구현체 API를 사용할지 DB를 사용할지를 Repository를 통해서 가져온다. Repository를 통해 가져오므로 API나 DB를 직접 의존할 필요가 없다. 왜 Repository를 사용하는가? UseCase는 데이터가 어디서 오는지 알 필요 없다. API든, CoreData든, Realm이든 전혀 신경 쓰지 않는다. Repository가 데이터의 출처를 감싸서 대신 처리해준다. 덕분에 UseCase는 오직 기능 수행에만 집중 가능 Repository는 인터페이스만 존재하며, 실제 구현은 Data Layer에서 처리한다. 3. Presentation Layer MVVM에서 ViewController(UI)와 ViewModel(Presentor)을 의미한다. M을 제외한 VVM이 Presentation에 존대한다. M은 Data/Domain Layer둘다 포함한다. MVVM에서 클린 아키텍처 확장함에 있어서 M이 세분화 되었다. UI Presenters(=ViewModel) 의존성이 바깥에서 안으로 향하고 있다. 고수준(Domain Layer)는 변동이 거의 일어나지 않는다. 저수준(Presentation Layer)는 변동이 자주 발생한다. 의존성의 방향은 자주 변하는 쪽에서 자주 변하지 않는 쪽으로 의존한다. 저수준은 고수준을 의존할 수 있지만. 고수준이 저수준을 의존하면 의존성 역전 원칙 위반이다. 의존성 역전 원칙 위반 예시 // 저수준 Data Layer class Repository { func getUsers() {} } // 고수준 Domain Layer class Usecase { private let repository = Repository() // 2. 고수준(Usecase)이 저수준(Repository)을 의존하고있다 -&gt; 의존성 역전 위반 func getUsers() { repository.getUsers() } } // 저수준 Presentation Layer class ViewModel { private let usecase = Usecase() // 1. 저수준(ViewModel)이 고수준(usecase)을 의존하고 있다 O } 의존성 역전 시킨 좋은 예시 // 의존성 역전을 하려면 -&gt; Protocol(인터페이스)를 사용하면 된다. // 인터페이스는 추상화 한 개념이라 변경이 일어나지 않기 때문에 항상 고수준이다. // ViewModel, Repository는 저수준, Usecase는 고수준 // Domain Layer protocol RepositoryProtocol { func getUsers() } // 저수준 Data Layer class Repository: RepositoryProtocol { func getUsers() {} } // 고수준 Domain Layer class Usecase { private let repository: RepositoryProtocol // 2. 고수준(Usecase)이 고수준(protocol)을 의존하고있다 -&gt; 의존성 역전 시켜서 클린아키텍처 원칙을 만족 O init(repository: RepositoryProtocol) { self.repository = repository } func getUsers() { repository.getUsers() } } // 저수준 Presentation Layer class ViewModel { private let usecase = Usecase(repository: Repository()) // 1. 저수준(ViewModel)이 고수준(usecase)을 의존하고 있다 -&gt; 클린아키텍처 원칙 만족 } 최종 Clean Architecture 구조]]></summary></entry><entry><title type="html">[Baekjoon] 백준 2910 빈도 정렬</title><link href="http://localhost:4000/Baekjoon-2910/" rel="alternate" type="text/html" title="[Baekjoon] 백준 2910 빈도 정렬" /><published>2025-05-22T00:00:00+00:00</published><updated>2025-05-22T00:00:00+00:00</updated><id>http://localhost:4000/%5BBaekjoon%5D-2910</id><content type="html" xml:base="http://localhost:4000/Baekjoon-2910/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->
<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/2910">빈도 정렬</a></p>

<p><img src="/assets/img/2025-05-22-%5BBaekjoon%5D-2910/image-20250523012134858.png" alt="이미지" width="100%" /><br />
자주 등장하는 숫자 기준으로 오름차순 정렬하되, 등장횟수가 같다면 먼저 나온 것이 앞에 있어야 한다.</p>

<h2 id="풀이">풀이</h2>

<p>정렬 관련 함수</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 배열</span>
<span class="k">var</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>

<span class="c1">// 오름차순 정렬</span>
<span class="k">let</span> <span class="nv">ascending</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="nf">sorted</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"오름차순:"</span><span class="p">,</span> <span class="n">ascending</span><span class="p">)</span> <span class="c1">// [1, 2, 3, 5, 8]</span>

<span class="c1">// 내림차순 정렬</span>
<span class="k">let</span> <span class="nv">descending</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="nf">sorted</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="o">&gt;</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"내림차순:"</span><span class="p">,</span> <span class="n">descending</span><span class="p">)</span> <span class="c1">// [8, 5, 3, 2, 1]</span>


<span class="c1">// 딕셔너리</span>
<span class="k">let</span> <span class="nv">scores</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Alice"</span><span class="p">:</span> <span class="mi">88</span><span class="p">,</span> <span class="s">"Bob"</span><span class="p">:</span> <span class="mi">95</span><span class="p">,</span> <span class="s">"Charlie"</span><span class="p">:</span> <span class="mi">72</span><span class="p">]</span>

<span class="c1">// 🔹 value 기준 오름차순 정렬</span>
<span class="k">let</span> <span class="nv">byScoreAsc</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&lt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"점수 오름차순:"</span><span class="p">,</span> <span class="n">byScoreAsc</span><span class="p">)</span>

<span class="c1">// 🔹 value 기준 내림차순 정렬</span>
<span class="k">let</span> <span class="nv">byScoreDesc</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"점수 내림차순:"</span><span class="p">,</span> <span class="n">byScoreDesc</span><span class="p">)</span>

<span class="c1">// 🔹 key 기준 오름차순 정렬</span>
<span class="k">let</span> <span class="nv">byNameAsc</span> <span class="o">=</span> <span class="n">scores</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">key</span> <span class="o">&lt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">key</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="s">"이름 오름차순:"</span><span class="p">,</span> <span class="n">byNameAsc</span><span class="p">)</span>

<span class="c1">// 우선순위 기반 정렬 1</span>
<span class="k">let</span> <span class="nv">dic</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="mi">1</span><span class="p">]</span>
<span class="k">let</span> <span class="nv">order</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="c1">// 우선순위: 2 &gt; 3 &gt; 1 &gt; 4</span>

<span class="k">let</span> <span class="nv">sortedKeys</span> <span class="o">=</span> <span class="n">dic</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="p">{</span>
        <span class="c1">// O(n)</span>
        <span class="k">return</span> <span class="n">order</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="nv">$0</span><span class="o">.</span><span class="n">key</span><span class="p">)</span><span class="o">!</span> <span class="o">&lt;</span> <span class="n">order</span><span class="o">.</span><span class="nf">firstIndex</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="nv">$1</span><span class="o">.</span><span class="n">key</span><span class="p">)</span><span class="o">!</span> <span class="c1">// &lt;: 인덱스가 낮은 key가 먼저 온다</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span>
<span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">key</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sortedKeys</span><span class="p">)</span>

<span class="c1">// 우선순위 기반 정렬 2</span>
<span class="k">let</span> <span class="nv">dic</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="mi">1</span><span class="p">]</span> <span class="c1">// num: count</span>
<span class="k">let</span> <span class="nv">order</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>
 
<span class="c1">// [2: 0, 3: 1, 1: 2, 4: 3] = num: idx(Order)</span>
<span class="c1">// 우선순위 인덱스를 미리 딕셔너리로 만들어 둔다 (O(1) 접근)</span>
<span class="k">let</span> <span class="nv">priority</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span> <span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="kt">Dictionary</span><span class="p">(</span><span class="nv">uniqueKeysWithValues</span><span class="p">:</span> <span class="n">order</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="p">(</span><span class="nv">$1</span><span class="p">,</span> <span class="nv">$0</span><span class="p">)</span> <span class="p">})</span>

<span class="k">let</span> <span class="nv">sortedKeys</span> <span class="o">=</span> <span class="n">dic</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span>
    <span class="k">if</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">priority</span><span class="p">[</span><span class="nv">$0</span><span class="o">.</span><span class="n">key</span><span class="p">]</span><span class="o">!</span> <span class="o">&lt;</span> <span class="n">priority</span><span class="p">[</span><span class="nv">$1</span><span class="o">.</span><span class="n">key</span><span class="p">]</span><span class="o">!</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span>
<span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">key</span> <span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="n">sortedKeys</span><span class="p">)</span>

</code></pre></div></div>

<p>처음 접근 방법<br />
딕셔너리의 키를 숫자로 두고 value로 카운팅을 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">_</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span> <span class="c1">// [1, 1, 1, 2, 2, 2]</span>
<span class="k">var</span> <span class="nv">dic</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

<span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
    <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">,</span> <span class="k">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">dic</span><span class="p">)</span>       <span class="c1">// [2: 3, 1: 2]</span>

<span class="c1">// value가 많은순으로 키룰 정렬하는 방법</span>
<span class="k">let</span> <span class="nv">sortedKeys</span> <span class="o">=</span> <span class="n">dic</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span>
<span class="p">}</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">key</span> <span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sortedKeys</span><span class="p">)</span>  <span class="c1">// [2, 1]</span>

<span class="k">var</span> <span class="nv">output</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="n">sortedKeys</span> <span class="p">{</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">num</span><span class="se">)</span><span class="s"> "</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">!</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span> <span class="c1">// 2 2 2 1 1</span>
</code></pre></div></div>

<p>이러면 1번 예제는 해결이 되지만 만약 동일한 등장횟수면 해당 순서를 보장해줘야 한다.</p>

<h2 id="제출-1">제출 1</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
5 2
2 1 2 1 2
 */</span>
<span class="n">_</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span>
<span class="k">let</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>

<span class="c1">// ── 1) 빈도 계산 / 순서 계산 ─────────────────────────────────────</span>
<span class="k">var</span> <span class="nv">dic</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>    <span class="c1">// 숫자:개수</span>
<span class="k">var</span> <span class="nv">order</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>  <span class="c1">// 숫자:우선순위</span>
<span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span> <span class="k">in</span> <span class="n">numbers</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span> <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="n">order</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">idx</span> <span class="c1">// num이 처음 등장한 idx 기록</span>
    <span class="p">}</span>
    <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">,</span> <span class="k">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>  <span class="c1">// [num:value]</span>
<span class="p">}</span>

<span class="c1">// ── 2) 빈도순으로 key 한번씩만 내보내기 ─────────────────────────────────────</span>
<span class="k">let</span> <span class="nv">keysByFreq</span> <span class="o">=</span> <span class="n">dic</span>
    <span class="o">.</span><span class="n">sorted</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">==</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="p">{</span>
            <span class="c1">// 먼저 나온 key가 앞으로 오도록 정렬</span>
            <span class="k">return</span> <span class="n">order</span><span class="p">[</span><span class="nv">$0</span><span class="o">.</span><span class="n">key</span><span class="p">]</span><span class="o">!</span> <span class="o">&lt;</span> <span class="n">order</span><span class="p">[</span><span class="nv">$1</span><span class="o">.</span><span class="n">key</span><span class="p">]</span><span class="o">!</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span> <span class="o">&gt;</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span> <span class="c1">// 내림차순</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">key</span> <span class="p">}</span>                   <span class="c1">// key만 추출</span>

<span class="c1">// ── 3) 빈도순으로 key를 빈도만큼 반복 출력 ─────────────────────────────────────</span>
<span class="k">var</span> <span class="nv">output</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="n">keysByFreq</span> <span class="p">{</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">num</span><span class="se">)</span><span class="s"> "</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">!</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>

</code></pre></div></div>

<h2 id="제출-2">제출 2</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
5 2
2 1 2 1 2

딕셔너리 dic은 다음과 같이 구성
[숫자: (등장 순서, 등장 횟수)]

[예시]
[
  2: (0, 3), // 0번째에 처음 등장, 3번 나옴
  1: (1, 2), // 1번째에 처음 등장, 2번 나옴
]

*/</span>
<span class="n">_</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span>
<span class="k">var</span> <span class="nv">dic</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">:</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">Int</span><span class="p">)]()</span>
<span class="k">let</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">num</span><span class="p">)</span> <span class="k">in</span> <span class="n">numbers</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 숫자 처음 등장시</span>
    <span class="k">if</span> <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1">// 등장순서, 1번 등장</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">]</span><span class="o">!.</span><span class="mi">1</span> <span class="o">+=</span> <span class="mi">1</span>   <span class="c1">// 이미 등장한 숫자라면 횟수만 추가</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 등장 횟수가 많은 숫자가 먼저 오도록, 같으면 등장순서가 빠른 순으로</span>
<span class="k">let</span> <span class="nv">sorted</span> <span class="o">=</span> <span class="n">dic</span><span class="o">.</span><span class="n">sorted</span> <span class="p">{</span>
    <span class="k">let</span> <span class="p">(</span><span class="nv">firstIdx</span><span class="p">,</span> <span class="nv">firstCnt</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span>
    <span class="k">let</span> <span class="p">(</span><span class="nv">secondIdx</span><span class="p">,</span> <span class="nv">secondCnt</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$1</span><span class="o">.</span><span class="n">value</span>
    
    <span class="k">if</span> <span class="n">firstCnt</span> <span class="o">!=</span> <span class="n">secondCnt</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">firstCnt</span> <span class="o">&gt;</span> <span class="n">secondCnt</span> <span class="c1">// 등장 횟수 많은 순</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">firstIdx</span> <span class="o">&lt;</span> <span class="n">secondIdx</span> <span class="c1">// 먼저 등장한 숫자 먼저</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 출력 1</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sorted</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="nv">$0</span><span class="o">.</span><span class="n">key</span><span class="se">)</span><span class="s"> "</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="nv">$0</span><span class="o">.</span><span class="n">value</span><span class="o">.</span><span class="mi">1</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="nf">joined</span><span class="p">())</span>

<span class="c1">// 출력 2</span>
<span class="k">var</span> <span class="nv">output</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="p">(</span><span class="n">number</span><span class="p">,</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">cnt</span><span class="p">))</span> <span class="k">in</span> <span class="n">sorted</span> <span class="p">{</span>
    <span class="n">output</span> <span class="o">+=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">repeating</span><span class="p">:</span> <span class="s">"</span><span class="se">\(</span><span class="n">number</span><span class="se">)</span><span class="s"> "</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="n">cnt</span><span class="p">)</span>
<span class="p">}</span>
<span class="nf">print</span><span class="p">(</span><span class="n">output</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Baekjoon" /><summary type="html"><![CDATA[문제 빈도 정렬 자주 등장하는 숫자 기준으로 오름차순 정렬하되, 등장횟수가 같다면 먼저 나온 것이 앞에 있어야 한다. 풀이 정렬 관련 함수 // 배열 var numbers = [5, 2, 8, 1, 3] // 오름차순 정렬 let ascending = numbers.sorted() print("오름차순:", ascending) // [1, 2, 3, 5, 8] // 내림차순 정렬 let descending = numbers.sorted(by: &gt;) print("내림차순:", descending) // [8, 5, 3, 2, 1] // 딕셔너리 let scores = ["Alice": 88, "Bob": 95, "Charlie": 72] // 🔹 value 기준 오름차순 정렬 let byScoreAsc = scores.sorted { $0.value &lt; $1.value } print("점수 오름차순:", byScoreAsc) // 🔹 value 기준 내림차순 정렬 let byScoreDesc = scores.sorted { $0.value &gt; $1.value } print("점수 내림차순:", byScoreDesc) // 🔹 key 기준 오름차순 정렬 let byNameAsc = scores.sorted { $0.key &lt; $1.key } print("이름 오름차순:", byNameAsc) // 우선순위 기반 정렬 1 let dic = [1: 2, 2: 5, 3: 5, 4: 1] let order = [2, 3, 1, 4] // 우선순위: 2 &gt; 3 &gt; 1 &gt; 4 let sortedKeys = dic.sorted { if $0.value == $1.value { // O(n) return order.firstIndex(of: $0.key)! &lt; order.firstIndex(of: $1.key)! // &lt;: 인덱스가 낮은 key가 먼저 온다 } return $0.value &gt; $1.value }.map { $0.key } print(sortedKeys) // 우선순위 기반 정렬 2 let dic = [1: 2, 2: 5, 3: 5, 4: 1] // num: count let order = [2, 3, 1, 4] // [2: 0, 3: 1, 1: 2, 4: 3] = num: idx(Order) // 우선순위 인덱스를 미리 딕셔너리로 만들어 둔다 (O(1) 접근) let priority: [Int: Int] = Dictionary(uniqueKeysWithValues: order.enumerated().map { ($1, $0) }) let sortedKeys = dic.sorted { if $0.value == $1.value { return priority[$0.key]! &lt; priority[$1.key]! } return $0.value &gt; $1.value }.map { $0.key } print(sortedKeys) 처음 접근 방법 딕셔너리의 키를 숫자로 두고 value로 카운팅을 한다. _ = readLine() let numbers = readLine()!.split(separator: " ").map { Int($0)! } // [1, 1, 1, 2, 2, 2] var dic: [Int:Int] = [:] for num in numbers { dic[num, default: 0] += 1 } print(dic) // [2: 3, 1: 2] // value가 많은순으로 키룰 정렬하는 방법 let sortedKeys = dic.sorted { return $0.value &gt; $1.value }.map { $0.key } print(sortedKeys) // [2, 1] var output = "" for num in sortedKeys { output += String(repeating: "\(num) ", count: dic[num]!) } print(output) // 2 2 2 1 1 이러면 1번 예제는 해결이 되지만 만약 동일한 등장횟수면 해당 순서를 보장해줘야 한다. 제출 1 /* 5 2 2 1 2 1 2 */ _ = readLine() let numbers = readLine()!.split(separator: " ").map { Int($0)! } // ── 1) 빈도 계산 / 순서 계산 ───────────────────────────────────── var dic: [Int:Int] = [:] // 숫자:개수 var order: [Int:Int] = [:] // 숫자:우선순위 for (idx, num) in numbers.enumerated() { if dic[num] == nil { order[num] = idx // num이 처음 등장한 idx 기록 } dic[num, default: 0] += 1 // [num:value] } // ── 2) 빈도순으로 key 한번씩만 내보내기 ───────────────────────────────────── let keysByFreq = dic .sorted { if $0.value == $1.value { // 먼저 나온 key가 앞으로 오도록 정렬 return order[$0.key]! &lt; order[$1.key]! } else { return $0.value &gt; $1.value // 내림차순 } } .map { $0.key } // key만 추출 // ── 3) 빈도순으로 key를 빈도만큼 반복 출력 ───────────────────────────────────── var output: String = "" for num in keysByFreq { output += String(repeating: "\(num) ", count: dic[num]!) } print(output) 제출 2 /* 5 2 2 1 2 1 2 딕셔너리 dic은 다음과 같이 구성 [숫자: (등장 순서, 등장 횟수)] [예시] [ 2: (0, 3), // 0번째에 처음 등장, 3번 나옴 1: (1, 2), // 1번째에 처음 등장, 2번 나옴 ] */ _ = readLine() var dic = [Int: (Int, Int)]() let numbers = readLine()!.split(separator: " ").map { Int($0)! } for (idx, num) in numbers.enumerated() { // 숫자 처음 등장시 if dic[num] == nil { dic[num] = (idx, 1) // 등장순서, 1번 등장 } else { dic[num]!.1 += 1 // 이미 등장한 숫자라면 횟수만 추가 } } // 등장 횟수가 많은 숫자가 먼저 오도록, 같으면 등장순서가 빠른 순으로 let sorted = dic.sorted { let (firstIdx, firstCnt) = $0.value let (secondIdx, secondCnt) = $1.value if firstCnt != secondCnt { return firstCnt &gt; secondCnt // 등장 횟수 많은 순 } else { return firstIdx &lt; secondIdx // 먼저 등장한 숫자 먼저 } } // 출력 1 print(sorted.map { String(repeating: "\($0.key) ", count: $0.value.1) }.joined()) // 출력 2 var output = "" for (number, (_, cnt)) in sorted { output += String(repeating: "\(number) ", count: cnt) } print(output)]]></summary></entry><entry><title type="html">[UIKit] iOS 푸시알림 FCM, APNS</title><link href="http://localhost:4000/UIKit-FCM/" rel="alternate" type="text/html" title="[UIKit] iOS 푸시알림 FCM, APNS" /><published>2025-05-22T00:00:00+00:00</published><updated>2025-05-22T00:00:00+00:00</updated><id>http://localhost:4000/%5BUIKit%5D-FCM</id><content type="html" xml:base="http://localhost:4000/UIKit-FCM/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->

<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="ios-푸시알림-fcm-apns">iOS 푸시알림 FCM, APNS</h2>

<p>iOS에서 푸시 종류는 2가지가 있다.</p>

<ol>
  <li>로컬에서 직접 보내는 알림</li>
  <li>서버에서 보내는 알림
    <ul>
      <li>서버에서 보내는 APNS(Apple Push Notification Service)</li>
      <li>
        <p>FCM(Firebase Cloud Messaging) -&gt; 이번 포스팅에서는 FCM을 활용한 2번 방식을 진행할 예정이다.</p>

        <p>​</p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="apns-란">APNS 란?</h2>

<p><strong>APNS (Apple Push Notification Service)</strong> 는  <br />
iOS의 모든 원격 알림이 반드시 거쳐야 하는 <strong>애플 공식 푸시 전달 서버</strong>이다..</p>

<p>즉, 푸시 메시지를 <strong>내가 직접 사용자 기기로 보내는 게 아니라</strong>  <br />
→ <strong>APNS에 요청</strong>  <br />
→ <strong>APNS가 사용자 기기로 전송</strong>  <br />
하는 방식이다.</p>

<hr />

<h2 id="fcm-란">FCM 란?</h2>

<p><strong>FCM은 Google에서 제공하는 클라우드 기반 메시징 서비스</strong>로,<br />
iOS의 APNS를 포함해 Android, Web 등 다양한 플랫폼에 푸시 메시지를 전송할 수 있도록 <strong>중간 서버 역할</strong>을 해준다.<br />
iOS에서 FCM을 통해 푸시 알림을 보내면, FCM 내부적으로 APNS를 거쳐서 사용자 기기에 도달한다.</p>

<h4 id="fcm이-apns-대신-해주는-것들">FCM이 APNS 대신 해주는 것들</h4>

<ul>
  <li>애플 인증서 등록 및 관리</li>
  <li>APNS에 메시지 전송 요청</li>
  <li>안드로이드, iOS 둘 다 지원 (멀티 플랫폼)</li>
  <li>클라우드 환경에서 손쉽게 운영</li>
</ul>

<h3 id="왜-fcm을-쓰는가">왜 FCM을 쓰는가?</h3>

<ul>
  <li>APNS 서버 직접 구축이 <strong>복잡하고 부담스러울 때</strong></li>
  <li><strong>iOS &amp; Android를 동시에 지원</strong>하는 일관된 환경이 필요할 때</li>
  <li>푸시 알림 시스템을 <strong>빠르게 구축</strong>하고 싶을 때</li>
  <li><strong>Firebase Analytics</strong>, <strong>A/B 테스트</strong> 같은 연계 기능을 활용할 때</li>
</ul>

<hr />

<h2 id="푸시-알림의-기본-동작-흐름">푸시 알림의 기본 동작 흐름</h2>

<ol>
  <li><strong>앱이 APNS에 Device Token 요청</strong>
    <ul>
      <li>이 토큰은 <strong>앱이 설치된 기기의 주소 역할</strong>을 한다.</li>
    </ul>
  </li>
  <li><strong>APNS가 앱에게 Device Token 전달</strong></li>
  <li><strong>앱이 Device Token을 푸시 서버(FCM 등)에 전달</strong>
    <ul>
      <li>이 서버가 실제 푸시 메시지를 보낼 주체이다.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="apns를-통한-푸시-알림-동작-구조">APNS를 통한 푸시 알림 동작 구조</h2>

<ol>
  <li>푸시 서버(예: FCM)가 메시지와 Device Token을 APNS에 전송
    <ul>
      <li>이때 APNS와 푸시 서버는 <strong>TLS 인증</strong>으로 보안 통신</li>
      <li>서버에는 <strong>APNS 인증 정보(p8 키 or 인증서)</strong>가 등록되어 있어야 함</li>
    </ul>
  </li>
  <li>APNS는 해당 디바이스로 푸시 메시지를 전송</li>
  <li>디바이스에서 푸시 알림 수신</li>
</ol>

<hr />

<h2 id="실습">실습</h2>

<p><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250522235833599.png" alt="이미지" width="100%" /><br />
identifiers에서 해당 프로젝트 누른 후 push notification 체크박스 체크 해준다.</p>

<p><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523000005112.png" alt="이미지" width="100%" /><br />
keys에서 키를 발급 해준다. 완료하면 Download버튼이 생긴다 이를 통해 p8파일을 다운로드 한다.</p>

<p><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523000727014.png" alt="이미지" width="100%" /><br />
firebase 프로젝트 -&gt; 프로젝트 설정 -&gt; 클라우드 메시징에서 APNS인증키를 등록해준다.</p>

<p><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523000908524.png" alt="이미지" width="30%" /><br />
업로드를 눌러서 완료한다.</p>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523001147940.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523001324675.png" alt="커스텀셀" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">Push Notifications</td>
    <td style="text-align:center;">Background Modes</td>
  </tr>
</table>
<p>xcode -&gt; target -&gt; Push Notifications, Background Mode 추가한다.</p>

<p><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523001739843.png" alt="이미지" width="100%" /><br />
Remote Notifications 체크해준다.</p>

<hr />

<h2 id="appdelegateswift">AppDelegate.swift</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">UIKit</span>
<span class="kd">import</span> <span class="kt">FirebaseCore</span>
<span class="kd">import</span> <span class="kt">FirebaseMessaging</span>
<span class="kd">import</span> <span class="kt">UserNotifications</span>

<span class="kd">@main</span>
<span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">UIResponder</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
    
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
                     <span class="n">didFinishLaunchingWithOptions</span> <span class="nv">launchOptions</span><span class="p">:</span> <span class="p">[</span><span class="kt">UIApplication</span><span class="o">.</span><span class="kt">LaunchOptionsKey</span><span class="p">:</span> <span class="kt">Any</span><span class="p">]?)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span> <span class="p">{</span>
        
        <span class="c1">// Firebase 초기화</span>
        <span class="kt">FirebaseApp</span><span class="o">.</span><span class="nf">configure</span><span class="p">()</span>
        
        <span class="c1">// 알림 권한 요청</span>
        <span class="kt">UNUserNotificationCenter</span><span class="o">.</span><span class="nf">current</span><span class="p">()</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        <span class="kt">UNUserNotificationCenter</span><span class="o">.</span><span class="nf">current</span><span class="p">()</span><span class="o">.</span><span class="nf">requestAuthorization</span><span class="p">(</span>
            <span class="nv">options</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">alert</span><span class="p">,</span> <span class="o">.</span><span class="n">badge</span><span class="p">,</span> <span class="o">.</span><span class="n">sound</span><span class="p">]</span>
        <span class="p">)</span> <span class="p">{</span> <span class="n">granted</span><span class="p">,</span> <span class="n">error</span> <span class="k">in</span>
            <span class="nf">print</span><span class="p">(</span><span class="s">"✅ 알림 권한 요청 결과: </span><span class="se">\(</span><span class="n">granted</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">granted</span> <span class="p">{</span>
                <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="k">async</span> <span class="p">{</span>
                    <span class="kt">UIApplication</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">registerForRemoteNotifications</span><span class="p">()</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        
        <span class="c1">// FCM 설정</span>
        <span class="kt">Messaging</span><span class="o">.</span><span class="nf">messaging</span><span class="p">()</span><span class="o">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="k">self</span>
        
        <span class="k">return</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">UNUserNotificationCenterDelegate</span> <span class="p">{</span>
    
    <span class="c1">// APNs로부터 device token 받았을 때 FCM에 등록</span>
    <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
                     <span class="n">didRegisterForRemoteNotificationsWithDeviceToken</span> <span class="nv">deviceToken</span><span class="p">:</span> <span class="kt">Data</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"📮 APNS Token 수신: </span><span class="se">\(</span><span class="n">deviceToken</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        <span class="kt">Messaging</span><span class="o">.</span><span class="nf">messaging</span><span class="p">()</span><span class="o">.</span><span class="n">apnsToken</span> <span class="o">=</span> <span class="n">deviceToken</span>
    <span class="p">}</span>

    <span class="c1">// 앱이 실행 중일 때 알림 수신 (배너로 표시되게 설정)</span>
    <span class="kd">func</span> <span class="nf">userNotificationCenter</span><span class="p">(</span><span class="n">_</span> <span class="nv">center</span><span class="p">:</span> <span class="kt">UNUserNotificationCenter</span><span class="p">,</span>
                                <span class="n">willPresent</span> <span class="nv">notification</span><span class="p">:</span> <span class="kt">UNNotification</span><span class="p">,</span>
                                <span class="n">withCompletionHandler</span> <span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">(</span><span class="kt">UNNotificationPresentationOptions</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">completionHandler</span><span class="p">([</span><span class="o">.</span><span class="n">list</span><span class="p">,</span> <span class="o">.</span><span class="n">banner</span><span class="p">,</span> <span class="o">.</span><span class="n">sound</span><span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">MessagingDelegate</span> <span class="p">{</span>
    
    <span class="c1">// FCM 토큰 갱신될 때 호출</span>
    <span class="kd">func</span> <span class="nf">messaging</span><span class="p">(</span><span class="n">_</span> <span class="nv">messaging</span><span class="p">:</span> <span class="kt">Messaging</span><span class="p">,</span> <span class="n">didReceiveRegistrationToken</span> <span class="nv">fcmToken</span><span class="p">:</span> <span class="kt">String</span><span class="p">?)</span> <span class="p">{</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"📌 FCM Token: </span><span class="se">\(</span><span class="n">fcmToken</span> <span class="p">??</span> <span class="s">"nil"</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
        
        <span class="c1">// 필요 시 NotificationCenter로 다른 컴포넌트에 전달</span>
        <span class="kt">NotificationCenter</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">post</span><span class="p">(</span>
            <span class="nv">name</span><span class="p">:</span> <span class="kt">Notification</span><span class="o">.</span><span class="kt">Name</span><span class="p">(</span><span class="s">"FCMToken"</span><span class="p">),</span>
            <span class="nv">object</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
            <span class="nv">userInfo</span><span class="p">:</span> <span class="p">[</span><span class="s">"token"</span><span class="p">:</span> <span class="n">fcmToken</span> <span class="p">??</span> <span class="s">""</span><span class="p">]</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>

<ul>
  <li>빌드하면 나오는 FCM을 복사한다.</li>
</ul>

<p>FCM.py</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">firebase_admin</span>
<span class="kn">from</span> <span class="n">firebase_admin</span> <span class="kn">import</span> <span class="n">credentials</span><span class="p">,</span> <span class="n">messaging</span>

<span class="c1"># 1. 서비스 계정 키 경로 (.json)
</span><span class="n">cred</span> <span class="o">=</span> <span class="n">credentials</span><span class="p">.</span><span class="nc">Certificate</span><span class="p">(</span><span class="sh">"</span><span class="s">파이어베이스 설정 -&gt; 서비스 계정 -&gt; 새 비공키 키 생성시 .json파일 다운 가능 -&gt; 해당 경로 입력</span><span class="sh">"</span><span class="p">)</span>
<span class="n">firebase_admin</span><span class="p">.</span><span class="nf">initialize_app</span><span class="p">(</span><span class="n">cred</span><span class="p">)</span>

<span class="c1"># 2. 대상 유저의 FCM 토큰
</span><span class="n">fcm_token</span> <span class="o">=</span> <span class="sh">"</span><span class="s">빌드하면 나오는 FCM 입력</span><span class="sh">"</span>

<span class="c1"># 3. 전송할 메시지
</span><span class="n">title</span> <span class="o">=</span> <span class="sh">"</span><span class="s">새 댓글이 달렸어요!</span><span class="sh">"</span>
<span class="n">body</span> <span class="o">=</span> <span class="sh">"</span><span class="s">당신의 게시글에 누군가 댓글을 남겼습니다.</span><span class="sh">"</span>

<span class="c1"># 4. 알림 메시지 구성
</span><span class="n">message</span> <span class="o">=</span> <span class="n">messaging</span><span class="p">.</span><span class="nc">Message</span><span class="p">(</span>
    <span class="n">token</span><span class="o">=</span><span class="n">fcm_token</span><span class="p">,</span>
    <span class="n">notification</span><span class="o">=</span><span class="n">messaging</span><span class="p">.</span><span class="nc">Notification</span><span class="p">(</span>
        <span class="n">title</span><span class="o">=</span><span class="n">title</span><span class="p">,</span>
        <span class="n">body</span><span class="o">=</span><span class="n">body</span><span class="p">,</span>
    <span class="p">)</span>
<span class="p">)</span>

<span class="c1"># 5. 메시지 전송
</span><span class="k">try</span><span class="p">:</span>
    <span class="n">response</span> <span class="o">=</span> <span class="n">messaging</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">✅ 메시지 전송 성공:</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">❌ 메시지 전송 실패:</span><span class="sh">"</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</code></pre></div></div>

<table>
  <tr>
    <td><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523002353948.png" alt="커스텀셀1" width="100%" /></td>
    <td><img src="/assets/img/2025-05-22-%5BUIKit%5D-FCM/image-20250523002621503.png" alt="커스텀셀" width="100%" /></td>
  </tr>
  <tr>
    <td style="text-align:center;">앱이 종료되어있을 때</td>
    <td style="text-align:center;">앱 실행중일 때</td>
  </tr>
</table>

<h2 id="reference">Reference</h2>

<ul>
  <li>https://bannavi.tistory.com/558</li>
  <li>https://dokit.tistory.com/49</li>
  <li>https://dokit.tistory.com/50</li>
  <li>https://velog.io/@niro/Firebase-Push-Notification-알림-보내기-with-SwiftUI</li>
  <li>https://yagom.net/forums/topic/push-알림을-보낼-때-fcm-과-apns-의-차이점이-있나요/</li>
</ul>]]></content><author><name>Dong Hyeon</name></author><category term="UIKit" /><summary type="html"><![CDATA[iOS 푸시알림 FCM, APNS iOS에서 푸시 종류는 2가지가 있다. 로컬에서 직접 보내는 알림 서버에서 보내는 알림 서버에서 보내는 APNS(Apple Push Notification Service) FCM(Firebase Cloud Messaging) -&gt; 이번 포스팅에서는 FCM을 활용한 2번 방식을 진행할 예정이다. ​ APNS 란? APNS (Apple Push Notification Service) 는 iOS의 모든 원격 알림이 반드시 거쳐야 하는 애플 공식 푸시 전달 서버이다.. 즉, 푸시 메시지를 내가 직접 사용자 기기로 보내는 게 아니라 → APNS에 요청 → APNS가 사용자 기기로 전송 하는 방식이다. FCM 란? FCM은 Google에서 제공하는 클라우드 기반 메시징 서비스로, iOS의 APNS를 포함해 Android, Web 등 다양한 플랫폼에 푸시 메시지를 전송할 수 있도록 중간 서버 역할을 해준다. iOS에서 FCM을 통해 푸시 알림을 보내면, FCM 내부적으로 APNS를 거쳐서 사용자 기기에 도달한다. FCM이 APNS 대신 해주는 것들 애플 인증서 등록 및 관리 APNS에 메시지 전송 요청 안드로이드, iOS 둘 다 지원 (멀티 플랫폼) 클라우드 환경에서 손쉽게 운영 왜 FCM을 쓰는가? APNS 서버 직접 구축이 복잡하고 부담스러울 때 iOS &amp; Android를 동시에 지원하는 일관된 환경이 필요할 때 푸시 알림 시스템을 빠르게 구축하고 싶을 때 Firebase Analytics, A/B 테스트 같은 연계 기능을 활용할 때 푸시 알림의 기본 동작 흐름 앱이 APNS에 Device Token 요청 이 토큰은 앱이 설치된 기기의 주소 역할을 한다. APNS가 앱에게 Device Token 전달 앱이 Device Token을 푸시 서버(FCM 등)에 전달 이 서버가 실제 푸시 메시지를 보낼 주체이다. APNS를 통한 푸시 알림 동작 구조 푸시 서버(예: FCM)가 메시지와 Device Token을 APNS에 전송 이때 APNS와 푸시 서버는 TLS 인증으로 보안 통신 서버에는 APNS 인증 정보(p8 키 or 인증서)가 등록되어 있어야 함 APNS는 해당 디바이스로 푸시 메시지를 전송 디바이스에서 푸시 알림 수신 실습 identifiers에서 해당 프로젝트 누른 후 push notification 체크박스 체크 해준다. keys에서 키를 발급 해준다. 완료하면 Download버튼이 생긴다 이를 통해 p8파일을 다운로드 한다. firebase 프로젝트 -&gt; 프로젝트 설정 -&gt; 클라우드 메시징에서 APNS인증키를 등록해준다. 업로드를 눌러서 완료한다. Push Notifications Background Modes xcode -&gt; target -&gt; Push Notifications, Background Mode 추가한다. Remote Notifications 체크해준다. AppDelegate.swift import UIKit import FirebaseCore import FirebaseMessaging import UserNotifications @main class AppDelegate: UIResponder, UIApplicationDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -&gt; Bool { // Firebase 초기화 FirebaseApp.configure() // 알림 권한 요청 UNUserNotificationCenter.current().delegate = self UNUserNotificationCenter.current().requestAuthorization( options: [.alert, .badge, .sound] ) { granted, error in print("✅ 알림 권한 요청 결과: \(granted)") if granted { DispatchQueue.main.async { UIApplication.shared.registerForRemoteNotifications() } } } // FCM 설정 Messaging.messaging().delegate = self return true } } extension AppDelegate: UNUserNotificationCenterDelegate { // APNs로부터 device token 받았을 때 FCM에 등록 func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) { print("📮 APNS Token 수신: \(deviceToken)") Messaging.messaging().apnsToken = deviceToken } // 앱이 실행 중일 때 알림 수신 (배너로 표시되게 설정) func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -&gt; Void) { completionHandler([.list, .banner, .sound]) } } extension AppDelegate: MessagingDelegate { // FCM 토큰 갱신될 때 호출 func messaging(_ messaging: Messaging, didReceiveRegistrationToken fcmToken: String?) { print("📌 FCM Token: \(fcmToken ?? "nil")") // 필요 시 NotificationCenter로 다른 컴포넌트에 전달 NotificationCenter.default.post( name: Notification.Name("FCMToken"), object: nil, userInfo: ["token": fcmToken ?? ""] ) } } 빌드하면 나오는 FCM을 복사한다. FCM.py import firebase_admin from firebase_admin import credentials, messaging # 1. 서비스 계정 키 경로 (.json) cred = credentials.Certificate("파이어베이스 설정 -&gt; 서비스 계정 -&gt; 새 비공키 키 생성시 .json파일 다운 가능 -&gt; 해당 경로 입력") firebase_admin.initialize_app(cred) # 2. 대상 유저의 FCM 토큰 fcm_token = "빌드하면 나오는 FCM 입력" # 3. 전송할 메시지 title = "새 댓글이 달렸어요!" body = "당신의 게시글에 누군가 댓글을 남겼습니다." # 4. 알림 메시지 구성 message = messaging.Message( token=fcm_token, notification=messaging.Notification( title=title, body=body, ) ) # 5. 메시지 전송 try: response = messaging.send(message) print("✅ 메시지 전송 성공:", response) except Exception as e: print("❌ 메시지 전송 실패:", e) 앱이 종료되어있을 때 앱 실행중일 때 Reference https://bannavi.tistory.com/558 https://dokit.tistory.com/49 https://dokit.tistory.com/50 https://velog.io/@niro/Firebase-Push-Notification-알림-보내기-with-SwiftUI https://yagom.net/forums/topic/push-알림을-보낼-때-fcm-과-apns-의-차이점이-있나요/]]></summary></entry><entry><title type="html">[Baekjoon] 백준 2828 사과 담기 게임</title><link href="http://localhost:4000/Baekjoon-2828/" rel="alternate" type="text/html" title="[Baekjoon] 백준 2828 사과 담기 게임" /><published>2025-05-22T00:00:00+00:00</published><updated>2025-05-22T00:00:00+00:00</updated><id>http://localhost:4000/%5BBaekjoon%5D-2828</id><content type="html" xml:base="http://localhost:4000/Baekjoon-2828/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->
<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/2828">사과 담기 게임</a></p>

<p><img src="/assets/img/2025-05-22-%5BBaekjoon%5D-2828/image-20250522131128824.png" alt="이미지" width="100%" /><br />
스크린 위에서 사과 여러개가 떨어질 때 바구니로 사과를 담기 위한 이동거리의 최솟값을 구하라</p>

<h2 id="풀이">풀이</h2>
<p>시작지점을 left와 right를 방정식으로 나타낼 수 있다.<br />
left = 1<br />
right = left + m - 1</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
 5 1
 3
 1
 5
 3
 */</span>

<span class="k">let</span> <span class="nv">input</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="nf">split</span><span class="p">(</span><span class="nv">separator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">Int</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span><span class="o">!</span> <span class="p">}</span>
<span class="k">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>          <span class="c1">// screen</span>
<span class="k">let</span> <span class="nv">m</span> <span class="o">=</span> <span class="n">input</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>          <span class="c1">// basket</span>
<span class="k">let</span> <span class="nv">j</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="nf">readLine</span><span class="p">()</span><span class="o">!</span><span class="p">)</span><span class="o">!</span> <span class="c1">// count</span>

<span class="k">var</span> <span class="nv">left</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">var</span> <span class="nv">right</span> <span class="o">=</span> <span class="k">left</span> <span class="o">+</span> <span class="n">m</span> <span class="o">-</span> <span class="mi">1</span> <span class="c1">// 그냉 m으로 해도 된다</span>
<span class="k">var</span> <span class="nv">totalMove</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">j</span> <span class="p">{</span>
    <span class="c1">// 사과가 떨어지는 위치</span>
    <span class="k">let</span> <span class="nv">pos</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="nf">readLine</span><span class="p">()</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
    
    <span class="c1">// 사과의 위치가 이미 바구니가 있는 위치이면 아래 바구니 이동 로직을 무시</span>
    <span class="k">if</span> <span class="n">pos</span> <span class="o">&gt;=</span> <span class="k">left</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="k">right</span> <span class="p">{</span> <span class="k">continue</span> <span class="p">}</span>
   
    <span class="c1">// 포지션이 바구니 안에 있으면 이동 안함</span>
    <span class="k">if</span> <span class="n">pos</span> <span class="o">&lt;</span> <span class="k">left</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">move</span> <span class="o">=</span> <span class="k">left</span> <span class="o">-</span> <span class="n">pos</span>
        <span class="k">left</span> <span class="o">-=</span> <span class="n">move</span>
        <span class="k">right</span> <span class="o">-=</span> <span class="n">move</span>
        <span class="n">totalMove</span> <span class="o">+=</span> <span class="n">move</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">pos</span> <span class="o">&gt;</span> <span class="k">right</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">move</span> <span class="o">=</span> <span class="n">pos</span> <span class="o">-</span> <span class="k">right</span>
        <span class="k">right</span> <span class="o">+=</span> <span class="n">move</span>
        <span class="k">left</span> <span class="o">+=</span> <span class="n">move</span>
        <span class="n">totalMove</span> <span class="o">+=</span> <span class="n">move</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nf">print</span><span class="p">(</span><span class="n">totalMove</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Baekjoon" /><summary type="html"><![CDATA[문제 사과 담기 게임 스크린 위에서 사과 여러개가 떨어질 때 바구니로 사과를 담기 위한 이동거리의 최솟값을 구하라 풀이 시작지점을 left와 right를 방정식으로 나타낼 수 있다. left = 1 right = left + m - 1 /* 5 1 3 1 5 3 */ let input = readLine()!.split(separator: " ").map { Int($0)! } let n = input[0] // screen let m = input[1] // basket let j = Int(readLine()!)! // count var left = 1 var right = left + m - 1 // 그냉 m으로 해도 된다 var totalMove = 0 for _ in 0..&lt;j { // 사과가 떨어지는 위치 let pos = Int(readLine()!)! // 사과의 위치가 이미 바구니가 있는 위치이면 아래 바구니 이동 로직을 무시 if pos &gt;= left &amp;&amp; pos &lt;= right { continue } // 포지션이 바구니 안에 있으면 이동 안함 if pos &lt; left { let move = left - pos left -= move right -= move totalMove += move } else if pos &gt; right { let move = pos - right right += move left += move totalMove += move } } print(totalMove)]]></summary></entry><entry><title type="html">[Baekjoon] 백준 1992 쿼드트리</title><link href="http://localhost:4000/Baekjoon-1992/" rel="alternate" type="text/html" title="[Baekjoon] 백준 1992 쿼드트리" /><published>2025-05-21T00:00:00+00:00</published><updated>2025-05-21T00:00:00+00:00</updated><id>http://localhost:4000/%5BBaekjoon%5D-1992</id><content type="html" xml:base="http://localhost:4000/Baekjoon-1992/"><![CDATA[<!-- <img src="/assets/img/2025-05-08-[UIKit]-tableView2/1.png" alt="1" width="50%"> -->
<!-- <img src="/assets/img/2025-05-08-%5BUIKit%5D-tableView2/1.png" alt="이미지" width="30%"> -->

<h2 id="문제">문제</h2>
<p><a href="https://www.acmicpc.net/problem/1992">쿼드트리</a></p>

<p><img src="/assets/img/2025-05-21-%5BBaekjoon%5D-1992/image-20250521124353945.png" alt="이미지" width="100%" /><br />
주어진 영상이 0으로만 이루어져 있다면 결과는 0이 되고 혹은 그 반대면 결과가 1이 된다.  <br />
만약 0과 1이 섞여 있으면 전체를 한번에 나타내지 못하고 4개의 영역으로 나누어 각 영역을 압축한 결과를 차례로 괄호 안에서 묶어서 표현한다.</p>

<h2 id="풀이">풀이</h2>
<p>분할 정복 알고리즘을 사용하여 해결할 수 있다.  <br />
분할 정복은 재귀적으로 큰 문제를 하위 문제로 쪼개어 하위 문제를 해결하고 모아서 상위 문제를 해결하는 방식이다.  <br />
2차원 배열을 같은 숫자로 구성된 4등분 단위로 압축 및 재귀적으로 처리하여 괄호로 묶는다. Stack으로도 구현 가능하다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
┌───┬───┐
│ 1 │ 2 │
├───┼───┤
│ 3 │ 4 │
└───┴───┘
*/</span>
<span class="k">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="nf">readLine</span><span class="p">()</span><span class="o">!</span><span class="p">)</span><span class="o">!</span>
<span class="k">var</span> <span class="nv">graph</span><span class="p">:</span> <span class="p">[[</span><span class="kt">String</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">n</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">row</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="n">map</span> <span class="p">{</span> <span class="kt">String</span><span class="p">(</span><span class="nv">$0</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">graph</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 분할정복 함수 - (y, x) 위치에서 size 크기의 정사각형 영역 처리</span>
<span class="kd">func</span> <span class="nf">go</span><span class="p">(</span><span class="n">_</span> <span class="nv">y</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">x</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">size</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">base</span> <span class="o">=</span> <span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span>
    <span class="k">var</span> <span class="nv">ret</span> <span class="o">=</span> <span class="s">""</span>

    <span class="k">for</span> <span class="n">row</span> <span class="k">in</span> <span class="n">y</span><span class="o">..&lt;</span><span class="n">y</span><span class="o">+</span><span class="n">size</span> <span class="p">{</span>
        <span class="k">for</span> <span class="n">col</span> <span class="k">in</span> <span class="n">x</span><span class="o">..&lt;</span><span class="n">x</span><span class="o">+</span><span class="n">size</span> <span class="p">{</span>
            <span class="c1">// 입력 조건이 2^k 이므로 0이하로 들어올 가능성이 없기 때문에 기저 사례 필요 x</span>
            <span class="k">if</span> <span class="n">size</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">{</span> <span class="k">return</span> <span class="n">graph</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="p">}</span>

            <span class="c1">// 하나라도 값이 다르다면 4분할하여 재귀적으로 검사</span>
            <span class="k">if</span> <span class="n">base</span> <span class="o">!=</span> <span class="n">graph</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span> <span class="p">{</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="s">"("</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="nf">go</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">size</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="nf">go</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="o">+</span><span class="n">size</span><span class="sr">/2, size/</span><span class="mi">2</span><span class="p">)</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="nf">go</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">size</span><span class="sr">/2, x, size/</span><span class="mi">2</span><span class="p">)</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="nf">go</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">size</span><span class="sr">/2, x+size/2, size/</span><span class="mi">2</span><span class="p">)</span>
                <span class="n">ret</span> <span class="o">+=</span> <span class="s">")"</span>
                <span class="k">return</span> <span class="n">ret</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="c1">// 모두 같은 값이면 해당 값 반환</span>
    <span class="k">return</span> <span class="n">base</span>
<span class="p">}</span>

<span class="c1">// (0, 0)부터 분할정복 시작</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">go</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>Dong Hyeon</name></author><category term="Baekjoon" /><summary type="html"><![CDATA[문제 쿼드트리 주어진 영상이 0으로만 이루어져 있다면 결과는 0이 되고 혹은 그 반대면 결과가 1이 된다. 만약 0과 1이 섞여 있으면 전체를 한번에 나타내지 못하고 4개의 영역으로 나누어 각 영역을 압축한 결과를 차례로 괄호 안에서 묶어서 표현한다. 풀이 분할 정복 알고리즘을 사용하여 해결할 수 있다. 분할 정복은 재귀적으로 큰 문제를 하위 문제로 쪼개어 하위 문제를 해결하고 모아서 상위 문제를 해결하는 방식이다. 2차원 배열을 같은 숫자로 구성된 4등분 단위로 압축 및 재귀적으로 처리하여 괄호로 묶는다. Stack으로도 구현 가능하다. /* ┌───┬───┐ │ 1 │ 2 │ ├───┼───┤ │ 3 │ 4 │ └───┴───┘ */ let n = Int(readLine()!)! var graph: [[String]] = [] for _ in 0..&lt;n { let row = readLine()!.map { String($0) } graph.append(row) } // 분할정복 함수 - (y, x) 위치에서 size 크기의 정사각형 영역 처리 func go(_ y: Int, _ x: Int, _ size: Int) -&gt; String { let base = graph[y][x] var ret = "" for row in y..&lt;y+size { for col in x..&lt;x+size { // 입력 조건이 2^k 이므로 0이하로 들어올 가능성이 없기 때문에 기저 사례 필요 x if size == 1 { return graph[y][x] } // 하나라도 값이 다르다면 4분할하여 재귀적으로 검사 if base != graph[row][col] { ret += "(" ret += go(y, x, size/2) ret += go(y, x+size/2, size/2) ret += go(y+size/2, x, size/2) ret += go(y+size/2, x+size/2, size/2) ret += ")" return ret } } } // 모두 같은 값이면 해당 값 반환 return base } // (0, 0)부터 분할정복 시작 print(go(0, 0, n))]]></summary></entry></feed>